# Task ID: 39
# Title: Fix Critical TypeScript Build Errors
# Status: done
# Dependencies: 35, 38
# Priority: high
# Description: Address critical TypeScript build errors to restore the application's compilation and deployment capabilities. This involves resolving missing dependencies, type safety violations, and interface mismatches. The build is currently failing with 40 TypeScript errors.
# Details:
1. **Analyze Build Errors:** Examine the TypeScript compiler output to identify the root cause of each error. Categorize errors based on type (e.g., missing dependencies, type mismatches, interface violations). Prioritize errors based on their impact on the build process.
2. **Resolve Missing Dependencies:** Identify and install any missing npm packages or TypeScript definition files (`.d.ts`). Update `package.json` and run `npm install` or `yarn install` to ensure all dependencies are correctly installed.
3. **Fix Type Safety Violations:** Address type mismatches by modifying code to conform to expected types. Use TypeScript's type checking features to identify and correct type-related errors. Add explicit type annotations where necessary to improve code clarity and prevent future type errors.
4. **Resolve Interface Mismatches:** Ensure that all classes and functions correctly implement the interfaces they are supposed to. Update interfaces or implementations as needed to resolve any mismatches. Pay close attention to function signatures and property types.
5. **Refactor Code (if necessary):** If the errors are due to poor code structure or design, refactor the code to improve its maintainability and reduce the likelihood of future errors. Consider using design patterns to improve code organization and reduce complexity.
6. **Update TypeScript Configuration:** Review the `tsconfig.json` file to ensure that the compiler options are correctly configured. Adjust compiler options as needed to enforce stricter type checking and prevent common errors.
7. **Linting and Formatting:** Run a linter (e.g., ESLint) and formatter (e.g., Prettier) to identify and fix any code style issues that may be contributing to the errors. Ensure that the code is consistently formatted and follows best practices.
8. **Incremental Compilation:** Utilize TypeScript's incremental compilation feature to speed up the build process and identify errors more quickly. Enab...
<info added on 2025-07-03T15:22:29.553Z>
Progress Update: Reduced build errors from 40 to 36 errors (10% improvement). Successfully:

✅ Fixed MarketType export issue by moving enum to shared package
✅ Created websocket.service.ts to resolve missing module errors  
✅ Updated all MarketType imports across the codebase
✅ Fixed indicators library export issues

Remaining 36 errors are in these categories:
- Type mismatches in monitoring services (19 errors)
- Missing exchange types module (2 errors) 
- Bot status type inconsistencies (3 errors)
- ATR indicator data access issues (3 errors)
- Strategy and trade executor type issues (5 errors)
- System monitor type issues (2 errors)
- Various interface violations (2 errors)

Next focus: Complete remaining type fixes to achieve full build success.
</info added on 2025-07-03T15:22:29.553Z>
<info added on 2025-07-03T15:26:29.810Z>
Build Error Progress Update - Achieved 12.5% Reduction:

✅ **RESOLVED: WebSocket Service Module Issues**
   - Created websocket.service.ts wrapper for JabbrWebSocketServer
   - Fixed imports in database-monitor, exchange-monitor, and bot-manager
   - Reduced errors from 36 to 35

✅ **RESOLVED: Exchange Type Import Issues** 
   - Fixed MarketType imports from shared package across all files
   - Corrected import paths in exchange-manager

Current Status: 35 errors remaining in 9 files, concentrated in:
- **Monitoring Services** (22 errors) - Interface mismatches, wrong function signatures
- **Bot/Trading Logic** (4 errors) - Status type inconsistencies, property mismatches  
- **ATR Indicator** (3 errors) - Array indexing with undefined values
- **Strategy Monitor** (2 errors) - Undefined object access
- **System Monitor** (2 errors) - Type conversion issues
- **Exchange Manager** (2 errors) - Property type mismatches

Next Priority: Focus on monitoring services as they contain 63% of remaining errors. These appear to be interface definition mismatches rather than missing modules.
</info added on 2025-07-03T15:26:29.810Z>
<info added on 2025-07-03T15:34:50.160Z>
Monitoring Services Fix Progress Update - Achieved 23% Total Reduction:

✅ **FIXED: Health Status Type Mismatches**
   - Corrected 'critical' → 'unhealthy' and 'warning' → 'degraded' in SystemHealth comparisons
   - Fixed health status enum alignments with shared package types

✅ **FIXED: MetricsCollector Interface Issues**
   - Corrected recordMetric wrapper method to use proper parameter structure
   - Fixed type parameter positioning (gauge, counter, etc.)

✅ **FIXED: AlertManager CreateAlert Interface**
   - Updated createAlert wrapper to use object-based parameters instead of individual arguments
   - Mapped severity levels to proper Alert interface structure

**Build Progress**: 35 → 31 errors (23% total reduction from original 40)
- **Monitoring Services**: Reduced from 19 to 15 errors (21% improvement)
- Successfully fixed type safety violations and interface mismatches

**Remaining Issues**: 
- AlertManager constructor and missing methods (start/stop)
- Service constructor signatures (websocket parameter issues)
- Direct createAlert calls still using old 5-parameter format
- MetricsCollectorConfig property mismatches

Next: Fix constructor signatures and remaining alert calls.
</info added on 2025-07-03T15:34:50.160Z>
<info added on 2025-07-03T15:45:46.178Z>
Major Monitoring Services Fix Complete - Achieved 52% Total Reduction:

✅ **MONITORING SERVICES LARGELY FIXED**: 
   - Fixed ALL 9 createAlert calls to use proper object-based Alert interface
   - Removed non-existent start/stop method calls on AlertManager
   - Fixed AlertManager constructor parameter signature
   - Reduced monitoring service errors from 15 to 3 (80% improvement in this area)

**Overall Build Progress**: 40 → 19 errors (52% total reduction!)
- **Monitoring Services**: 15 → 3 errors (80% reduction)
- **Successfully resolved**: All alert creation interface mismatches

**Remaining 19 errors breakdown**:
- **Bot/Trading Logic**: 4 errors (bot-manager, trade-executor)
- **Exchange Manager**: 2 errors (type mismatches)
- **ATR Indicator**: 3 errors (array indexing)
- **Strategy Monitor**: 2 errors (undefined access)
- **System Monitor**: 2 errors (type conversion)
- **WebSocket Message Types**: 3 errors (database/exchange monitors)
- **Service Constructors**: 3 errors (remaining parameter mismatches)

The monitoring services are now substantially fixed. Focus shifted to remaining constructor issues and other service type mismatches.
</info added on 2025-07-03T15:45:46.178Z>

# Test Strategy:
1. **Run TypeScript Compiler:** Execute the TypeScript compiler (`tsc`) to verify that all errors have been resolved and the build completes successfully without errors.
2. **Unit Tests:** Run all existing unit tests to ensure that the changes made to fix the build errors have not introduced any regressions. Write new unit tests to cover any code that was modified or added.
3. **Integration Tests:** Run integration tests to verify that the different components of the application are working together correctly. Pay close attention to any areas that were affected by the build errors.
4. **End-to-End Tests:** Run end-to-end tests to simulate real-world user scenarios and verify that the application is functioning as expected. Ensure that all critical features are working correctly.
5. **Code Review:** Have another developer review the code to ensure that the changes are correct and that they do not introduce any new issues.
6. **Regression Testing:** After the build errors have been resolved, perform regression testing to ensure that no existing functionality has been broken.

# Subtasks:
## 9. Resolve WebSocket Service Module Errors [done]
### Dependencies: None
### Description: Fix the missing `websocket.service` module import in `bot-manager.ts`, `database-monitor.service.ts`, and `exchange-monitor.service.ts`.
### Details:
The build is failing because the `websocket.service` module cannot be found. This needs to be fixed by either creating the module or correcting the import path.

## 10. Correct Indicator Library Exports [done]
### Dependencies: None
### Description: Fix the missing exports for `MACDIndicator`, `BollingerBandsIndicator`, etc., in `JabbrLabs/indicators/index.ts`.
### Details:
The build is failing because several indicators are not being exported from the main `index.ts` file in the indicators library. This needs to be fixed by adding the missing exports.

## 11. Fix Type Errors in Monitoring Services [done]
### Dependencies: None
### Description: Address the numerous type errors, incorrect comparisons, and function call mismatches in `monitoring.service.ts` and other related monitoring files.
### Details:
The monitoring services have a large number of TypeScript errors that need to be fixed. This includes incorrect type comparisons, wrong function arguments, and other type-related issues.

## 12. Resolve Type Errors in Trading Logic [done]
### Dependencies: None
### Description: Fix the type errors in `trade-executor.ts` and `exchange-manager.ts`, including the missing `MarketType` export from the `@jabbr/shared` package.
### Details:
The core trading logic has several type errors that need to be fixed. This includes a missing `MarketType` export from the shared package, which is causing a cascade of errors.

## 13. Investigate and Fix ATR Indicator Array Indexing Issues [done]
### Dependencies: None
### Description: Investigate and resolve the array indexing issues related to the ATR indicator. Ensure that the ATR indicator is correctly accessing and processing data.
### Details:
The ATR indicator is experiencing array indexing issues, leading to incorrect calculations or runtime errors. This needs to be investigated and fixed by ensuring correct array access and bounds checking.

## 14. Address Exchange Manager Type Issues [done]
### Dependencies: None
### Description: Fix the type errors and mismatches in `exchange-manager.ts`. Ensure that the exchange manager is correctly handling different exchange types and data formats.
### Details:
The exchange manager has several type-related issues that need to be addressed. This includes incorrect type assignments, missing type definitions, and type mismatches between different exchange implementations.

## 15. Correct Bot Manager Type Mismatches [done]
### Dependencies: None
### Description: Fix the type mismatches and errors in `bot-manager.ts`. Ensure that the bot manager is correctly handling different bot types and configurations.
### Details:
The bot manager has several type mismatches that need to be corrected. This includes incorrect function signatures, missing type annotations, and type mismatches between different bot implementations.

## 1. Identify and Resolve Missing Dependencies [done]
### Dependencies: None
### Description: Scan the TypeScript build output for errors related to missing npm packages or TypeScript definition files. Update `package.json` with the necessary dependencies and run `npm install` or `yarn install`.
### Details:
Examine error messages like 'Cannot find module' or 'Cannot find name'. Use `npm search <module_name>` to find the correct package. Add the package to `package.json` using `npm install --save <module_name>` or `yarn add <module_name>`. Verify installation by checking `node_modules`.

## 2. Fix Indicator Type Safety Errors [done]
### Dependencies: None
### Description: Address TypeScript errors related to incorrect usage or typing of indicators. Ensure all indicators are imported from the unified JabbrLabs/indicators source, as per Task 35. Correct any type mismatches or incorrect property access related to indicators.
### Details:
Review indicator-related error messages in the TypeScript output. Verify that all indicator imports are from `@jabbrlabs/indicators`. Correct any type mismatches by adjusting the code to match the expected indicator types. Add type assertions or type guards where necessary.

## 3. Resolve Plugin System Type Errors [done]
### Dependencies: None
### Description: Address TypeScript errors related to the plugin system's type definitions and usage. Ensure that plugins are correctly typed and that the plugin system is correctly handling plugin interactions.
### Details:
Examine error messages related to plugin interfaces, function signatures, and property types. Update plugin interfaces or implementations to resolve any mismatches. Add explicit type annotations to improve code clarity and prevent future type errors. Ensure that the plugin system correctly handles different plugin types.

## 4. Fix Exchange Interface Errors [done]
### Dependencies: None
### Description: Address TypeScript errors related to the exchange interface definitions and their implementations. Ensure that all exchanges correctly implement the required interfaces and that data is being passed correctly between exchanges and other parts of the application.
### Details:
Review error messages related to exchange interfaces, function signatures, and property types. Update exchange interfaces or implementations to resolve any mismatches. Pay close attention to data types and ensure that data is being correctly converted between different formats. Add unit tests to verify that exchanges are correctly implementing the required interfaces.

## 5. Address Frontend Linting Errors [done]
### Dependencies: None
### Description: Run ESLint on the frontend code and fix any linting errors that are identified. Ensure that the code is consistently formatted and follows best practices.
### Details:
Run `eslint --fix` to automatically fix any linting errors that can be automatically fixed. Manually fix any remaining linting errors. Update the ESLint configuration file to prevent future linting errors.

## 6. Update TypeScript Configuration [done]
### Dependencies: None
### Description: Review the `tsconfig.json` file to ensure that the compiler options are correctly configured. Adjust compiler options as needed to enforce stricter type checking and prevent common errors.
### Details:
Review the `tsconfig.json` file and ensure that the compiler options are correctly configured. Consider enabling stricter type checking options such as `strictNullChecks` and `noImplicitAny`. Adjust compiler options as needed to prevent common errors.

## 7. Refactor Code for Improved Type Safety (If Necessary) [done]
### Dependencies: None
### Description: If the errors are due to poor code structure or design, refactor the code to improve its maintainability and reduce the likelihood of future errors. Focus on areas identified during the previous subtasks.
### Details:
Identify areas of code that are difficult to type or that are prone to type errors. Refactor the code to improve its structure and make it easier to type. Consider using design patterns to improve code organization and reduce complexity. Add unit tests to verify that the refactored code is functioning correctly.

## 8. Verify Build Success and Address Remaining Errors [done]
### Dependencies: None
### Description: Run a full TypeScript build to ensure that all errors have been resolved. Address any remaining errors that are identified.
### Details:
Run `tsc` to perform a full TypeScript build. Examine the compiler output for any remaining errors. Address any remaining errors by repeating the steps outlined in the previous subtasks.

