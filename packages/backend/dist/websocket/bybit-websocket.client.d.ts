import { EventEmitter } from 'events';
export declare class BybitWebSocketClient extends EventEmitter {
    private ws;
    private subscriptions;
    private reconnectAttempts;
    private isConnecting;
    private heartbeatInterval;
    private reconnectTimeout;
    private readonly BYBIT_WS_URL;
    private readonly BYBIT_WS_URL_TESTNET;
    private readonly MAX_RECONNECT_ATTEMPTS;
    private readonly RECONNECT_DELAY;
    private readonly HEARTBEAT_INTERVAL;
    private readonly CONNECTION_TIMEOUT;
    private isTestnet;
    constructor(isTestnet?: boolean);
    connect(): Promise<void>;
    disconnect(): void;
    subscribe(topic: string, symbol?: string): Promise<void>;
    unsubscribe(topic: string, symbol?: string): Promise<void>;
    subscribeToTicker(symbol: string): Promise<void>;
    subscribeToOrderbook(symbol: string, depth?: number): Promise<void>;
    subscribeToTrades(symbol: string): Promise<void>;
    subscribeToKline(symbol: string, interval?: string): Promise<void>;
    isConnected(): boolean;
    getSubscriptionCount(): number;
    getSubscriptions(): string[];
    private setupEventHandlers;
    private handleOpen;
    private handleMessage;
    private handleSubscriptionResponse;
    private handleMarketData;
    private handleClose;
    private handleError;
    private handlePing;
    private handlePong;
    private startHeartbeat;
    private scheduleReconnect;
    private resubscribeAll;
    private getSubscriptionKey;
    private parseTopic;
}
export default BybitWebSocketClient;
//# sourceMappingURL=bybit-websocket.client.d.ts.map