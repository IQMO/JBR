{
  "timestamp": "2025-07-04T01:40:26.133Z",
  "project": "JBR Trading Platform",
  "task": "Task 41.3 - Manual Duplicated Code Review",
  "manualAnalysis": {
    "semanticPatterns": [],
    "similarFunctions": [
      {
        "pattern": "const runFixedBacktest = () =>",
        "file": "packages\\backend\\scripts\\backtest\\fixed-sma-backtest.ts",
        "original": "const runFixedBacktest = () =>"
      },
      {
        "pattern": "const generateSampleData = (): Candle[] =>",
        "file": "packages\\backend\\scripts\\backtest\\fixed-sma-backtest.ts",
        "original": "const generateSampleData = (): Candle[] =>"
      },
      {
        "pattern": "function generateSyntheticCandles",
        "file": "packages\\backend\\scripts\\backtest\\sma-backtest.ts",
        "original": "function generateSyntheticCandles"
      },
      {
        "pattern": "function to",
        "file": "packages\\backend\\scripts\\backtest\\sma-backtest.ts",
        "original": "function to"
      },
      {
        "pattern": "function runBacktest",
        "file": "packages\\backend\\scripts\\backtest\\sma-backtest.ts",
        "original": "function runBacktest"
      },
      {
        "pattern": "function generateSyntheticCandles",
        "file": "packages\\backend\\scripts\\debug\\compare-sma-processors.ts",
        "original": "function generateSyntheticCandles"
      },
      {
        "pattern": "function processAndTrade",
        "file": "packages\\backend\\scripts\\debug\\compare-sma-processors.ts",
        "original": "function processAndTrade"
      },
      {
        "pattern": "function async",
        "file": "packages\\backend\\scripts\\debug\\compare-sma-processors.ts",
        "original": "function\r\nasync"
      },
      {
        "pattern": "function runComparisonTest",
        "file": "packages\\backend\\scripts\\debug\\compare-sma-processors.ts",
        "original": "function runComparisonTest"
      },
      {
        "pattern": "function to",
        "file": "packages\\backend\\scripts\\debug\\debug-sma-processor.ts",
        "original": "function to"
      },
      {
        "pattern": "const findAndFixIssues = () =>",
        "file": "packages\\backend\\scripts\\debug\\debug-sma-processor.ts",
        "original": "const findAndFixIssues = () =>"
      },
      {
        "pattern": "const generateTestData = (length: number): Candle[] =>",
        "file": "packages\\backend\\scripts\\debug\\debug-sma-signals.ts",
        "original": "const generateTestData = (length: number): Candle[] =>"
      },
      {
        "pattern": "const debugSignalProcessor = () =>",
        "file": "packages\\backend\\scripts\\debug\\debug-sma-signals.ts",
        "original": "const debugSignalProcessor = () =>"
      },
      {
        "pattern": "function debugSignalProcessor",
        "file": "packages\\backend\\scripts\\debug\\debug-sma-signals.ts",
        "original": "function\r\ndebugSignalProcessor"
      },
      {
        "pattern": "const generateCandlesWithTrends = (): Candle[] =>",
        "file": "packages\\backend\\scripts\\debug\\simple-sma-debug.ts",
        "original": "const generateCandlesWithTrends = (): Candle[] =>"
      },
      {
        "pattern": "const testSignalProcessor = () =>",
        "file": "packages\\backend\\scripts\\debug\\simple-sma-debug.ts",
        "original": "const testSignalProcessor = () =>"
      },
      {
        "pattern": "const testStrategy = () =>",
        "file": "packages\\backend\\scripts\\debug\\simple-sma-debug.ts",
        "original": "const testStrategy = () =>"
      },
      {
        "pattern": "function generateSyntheticCandles",
        "file": "packages\\backend\\scripts\\test\\run-sma-test.ts",
        "original": "function generateSyntheticCandles"
      },
      {
        "pattern": "function runTest",
        "file": "packages\\backend\\scripts\\test\\run-sma-test.ts",
        "original": "function runTest"
      },
      {
        "pattern": "function testStandaloneEngine",
        "file": "packages\\backend\\scripts\\test\\test-engine-standalone.ts",
        "original": "function testStandaloneEngine"
      },
      {
        "pattern": "function testFuturesBeast",
        "file": "packages\\backend\\scripts\\test\\test-futures-beast.ts",
        "original": "function testFuturesBeast"
      },
      {
        "pattern": "function testFuturesPositionModify",
        "file": "packages\\backend\\scripts\\test\\test-futures-position-modify.ts",
        "original": "function testFuturesPositionModify"
      },
      {
        "pattern": "function testLiveOrder",
        "file": "packages\\backend\\scripts\\test\\test-live-order.ts",
        "original": "function testLiveOrder"
      },
      {
        "pattern": "function testMainnetSmall",
        "file": "packages\\backend\\scripts\\test\\test-mainnet-small.ts",
        "original": "function testMainnetSmall"
      },
      {
        "pattern": "function testMarketData",
        "file": "packages\\backend\\scripts\\test\\test-market-data.ts",
        "original": "function testMarketData"
      },
      {
        "pattern": "const loadHistoricalData = (symbol: string, startDate: Date, endDate: Date): Candle[] =>",
        "file": "packages\\backend\\scripts\\test\\test-sma-backtest.ts",
        "original": "const loadHistoricalData = (symbol: string, startDate: Date, endDate: Date): Candle[] =>"
      },
      {
        "pattern": "const createBacktestContext = (candles: Candle[]): StrategyContext =>",
        "file": "packages\\backend\\scripts\\test\\test-sma-backtest.ts",
        "original": "const createBacktestContext = (candles: Candle[]): StrategyContext =>"
      },
      {
        "pattern": "function const",
        "file": "packages\\backend\\scripts\\test\\test-sma-backtest.ts",
        "original": "function\r\nconst"
      },
      {
        "pattern": "const main = async () =>",
        "file": "packages\\backend\\scripts\\test\\test-sma-backtest.ts",
        "original": "const main = async () =>"
      },
      {
        "pattern": "const generateTestData = (length: number): Candle[] =>",
        "file": "packages\\backend\\scripts\\test\\test-sma-signals.ts",
        "original": "const generateTestData = (length: number): Candle[] =>"
      },
      {
        "pattern": "function const",
        "file": "packages\\backend\\scripts\\test\\test-sma-signals.ts",
        "original": "function\r\nconst"
      },
      {
        "pattern": "const testConfig = (name: string, config: any, candles: Candle[]) =>",
        "file": "packages\\backend\\scripts\\test\\test-sma-signals.ts",
        "original": "const testConfig = (name: string, config: any, candles: Candle[]) =>"
      },
      {
        "pattern": "function runTests",
        "file": "packages\\backend\\scripts\\test\\test-strategy-framework.ts",
        "original": "function runTests"
      },
      {
        "pattern": "function verifyOrder",
        "file": "packages\\backend\\scripts\\test\\verify-order.ts",
        "original": "function verifyOrder"
      },
      {
        "pattern": "function createStateManager",
        "file": "packages\\backend\\src\\bots\\enhanced-bot-integration.ts",
        "original": "function createStateManager"
      },
      {
        "pattern": "function createShutdownManager",
        "file": "packages\\backend\\src\\bots\\enhanced-bot-integration.ts",
        "original": "function createShutdownManager"
      },
      {
        "pattern": "function getEnvironment",
        "file": "packages\\backend\\src\\config\\config-manager.ts",
        "original": "function getEnvironment"
      },
      {
        "pattern": "function isProduction",
        "file": "packages\\backend\\src\\config\\config-manager.ts",
        "original": "function isProduction"
      },
      {
        "pattern": "function isDevelopment",
        "file": "packages\\backend\\src\\config\\config-manager.ts",
        "original": "function isDevelopment"
      },
      {
        "pattern": "function isTest",
        "file": "packages\\backend\\src\\config\\config-manager.ts",
        "original": "function isTest"
      },
      {
        "pattern": "function validateConfig",
        "file": "packages\\backend\\src\\config\\config-manager.ts",
        "original": "function validateConfig"
      },
      {
        "pattern": "function initializeDatabase",
        "file": "packages\\backend\\src\\database\\database.config.ts",
        "original": "function initializeDatabase"
      },
      {
        "pattern": "function shutdownDatabase",
        "file": "packages\\backend\\src\\database\\database.config.ts",
        "original": "function shutdownDatabase"
      },
      {
        "pattern": "function to",
        "file": "packages\\backend\\src\\database\\migration-runner.ts",
        "original": "function to"
      },
      {
        "pattern": "function runMigrations",
        "file": "packages\\backend\\src\\database\\migration-runner.ts",
        "original": "function runMigrations"
      },
      {
        "pattern": "function to",
        "file": "packages\\backend\\src\\database\\migration-runner.ts",
        "original": "function to"
      },
      {
        "pattern": "function getMigrationStatus",
        "file": "packages\\backend\\src\\database\\migration-runner.ts",
        "original": "function getMigrationStatus"
      },
      {
        "pattern": "function to",
        "file": "packages\\backend\\src\\database\\migration-runner.ts",
        "original": "function to"
      },
      {
        "pattern": "function verifyMigrations",
        "file": "packages\\backend\\src\\database\\migration-runner.ts",
        "original": "function verifyMigrations"
      },
      {
        "pattern": "function that",
        "file": "packages\\backend\\src\\exchanges\\bybit-exchange.ts",
        "original": "function that"
      },
      {
        "pattern": "function export",
        "file": "packages\\backend\\src\\JabbrLabs\\bot-cycle\\bot-cycle-stable.ts",
        "original": "function\r\nexport"
      },
      {
        "pattern": "function stableBotCycle",
        "file": "packages\\backend\\src\\JabbrLabs\\bot-cycle\\bot-cycle-stable.ts",
        "original": "function stableBotCycle"
      },
      {
        "pattern": "function getExchangeClient",
        "file": "packages\\backend\\src\\JabbrLabs\\bot-cycle\\exchange-client.ts",
        "original": "function getExchangeClient"
      },
      {
        "pattern": "function assertIsNumber",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
        "original": "function assertIsNumber"
      },
      {
        "pattern": "function calculateATR",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
        "original": "function calculateATR"
      },
      {
        "pattern": "function calculateATRStopLoss",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
        "original": "function calculateATRStopLoss"
      },
      {
        "pattern": "function to",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\average-price.ts",
        "original": "function to"
      },
      {
        "pattern": "function calculateAveragePrice",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\average-price.ts",
        "original": "function calculateAveragePrice"
      },
      {
        "pattern": "function calculateBollingerBands",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands.ts",
        "original": "function calculateBollingerBands"
      },
      {
        "pattern": "function getBollingerBandsSignals",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands.ts",
        "original": "function getBollingerBandsSignals"
      },
      {
        "pattern": "const checkFinite = (v: any) =>",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\indicator-interface.ts",
        "original": "const checkFinite = (v: any) =>"
      },
      {
        "pattern": "function calculateMACD",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\macd.ts",
        "original": "function calculateMACD"
      },
      {
        "pattern": "function getMACDSignals",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\macd.ts",
        "original": "function getMACDSignals"
      },
      {
        "pattern": "function calculateSMA",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\moving-averages.ts",
        "original": "function calculateSMA"
      },
      {
        "pattern": "function calculateEMA",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\moving-averages.ts",
        "original": "function calculateEMA"
      },
      {
        "pattern": "function getMASignals",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\moving-averages.ts",
        "original": "function getMASignals"
      },
      {
        "pattern": "function calculateRSI",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
        "original": "function calculateRSI"
      },
      {
        "pattern": "function getRSISignals",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
        "original": "function getRSISignals"
      },
      {
        "pattern": "function calculateStandardDeviation",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\standard-deviation.ts",
        "original": "function calculateStandardDeviation"
      },
      {
        "pattern": "function calculateStandardDeviationSeries",
        "file": "packages\\backend\\src\\JabbrLabs\\indicators\\standard-deviation.ts",
        "original": "function calculateStandardDeviationSeries"
      },
      {
        "pattern": "function sigmoid",
        "file": "packages\\backend\\src\\JabbrLabs\\signals\\aether\\utils.ts",
        "original": "function sigmoid"
      },
      {
        "pattern": "function sigmoidNormalized",
        "file": "packages\\backend\\src\\JabbrLabs\\signals\\aether\\utils.ts",
        "original": "function sigmoidNormalized"
      },
      {
        "pattern": "function tanhNormalized",
        "file": "packages\\backend\\src\\JabbrLabs\\signals\\aether\\utils.ts",
        "original": "function tanhNormalized"
      },
      {
        "pattern": "function exponentialSmoothing",
        "file": "packages\\backend\\src\\JabbrLabs\\signals\\aether\\utils.ts",
        "original": "function exponentialSmoothing"
      },
      {
        "pattern": "function __setAetherDeterministicMode",
        "file": "packages\\backend\\src\\JabbrLabs\\signals\\aether\\utils.ts",
        "original": "function __setAetherDeterministicMode"
      },
      {
        "pattern": "function fractionalBrownianMotion",
        "file": "packages\\backend\\src\\JabbrLabs\\signals\\aether\\utils.ts",
        "original": "function fractionalBrownianMotion"
      },
      {
        "pattern": "function malliavinDerivative",
        "file": "packages\\backend\\src\\JabbrLabs\\signals\\aether\\utils.ts",
        "original": "function malliavinDerivative"
      },
      {
        "pattern": "function meanFieldInteraction",
        "file": "packages\\backend\\src\\JabbrLabs\\signals\\aether\\utils.ts",
        "original": "function meanFieldInteraction"
      },
      {
        "pattern": "function reflectedBarrier",
        "file": "packages\\backend\\src\\JabbrLabs\\signals\\aether\\utils.ts",
        "original": "function reflectedBarrier"
      },
      {
        "pattern": "function getAetherRandom",
        "file": "packages\\backend\\src\\JabbrLabs\\signals\\aether\\utils.ts",
        "original": "function getAetherRandom"
      },
      {
        "pattern": "function validateConfig",
        "file": "packages\\backend\\src\\JabbrLabs\\target-reacher\\config-validator.ts",
        "original": "function validateConfig"
      },
      {
        "pattern": "function camelToSnake",
        "file": "packages\\backend\\src\\JabbrLabs\\target-reacher\\parameter-mapping.ts",
        "original": "function camelToSnake"
      },
      {
        "pattern": "function snakeToCamel",
        "file": "packages\\backend\\src\\JabbrLabs\\target-reacher\\parameter-mapping.ts",
        "original": "function snakeToCamel"
      },
      {
        "pattern": "function validateTargetParameters",
        "file": "packages\\backend\\src\\JabbrLabs\\target-reacher\\parameters.ts",
        "original": "function validateTargetParameters"
      },
      {
        "pattern": "function adjustParametersForRisk",
        "file": "packages\\backend\\src\\JabbrLabs\\target-reacher\\parameters.ts",
        "original": "function adjustParametersForRisk"
      },
      {
        "pattern": "function executeSignal",
        "file": "packages\\backend\\src\\JabbrLabs\\unified-signals.ts",
        "original": "function executeSignal"
      },
      {
        "pattern": "function cancelSignal",
        "file": "packages\\backend\\src\\JabbrLabs\\unified-signals.ts",
        "original": "function cancelSignal"
      },
      {
        "pattern": "function getSignalStatus",
        "file": "packages\\backend\\src\\JabbrLabs\\unified-signals.ts",
        "original": "function getSignalStatus"
      },
      {
        "pattern": "function strategyResultToSignalData",
        "file": "packages\\backend\\src\\JabbrLabs\\unified-strategies.ts",
        "original": "function strategyResultToSignalData"
      },
      {
        "pattern": "function executeStrategySignal",
        "file": "packages\\backend\\src\\JabbrLabs\\unified-strategies.ts",
        "original": "function executeStrategySignal"
      },
      {
        "pattern": "function downloadHistoricalData",
        "file": "packages\\backend\\src\\services\\data-service.ts",
        "original": "function downloadHistoricalData"
      },
      {
        "pattern": "function generateMockCandles",
        "file": "packages\\backend\\src\\services\\data-service.ts",
        "original": "function generateMockCandles"
      },
      {
        "pattern": "function getTimeframeMilliseconds",
        "file": "packages\\backend\\src\\services\\data-service.ts",
        "original": "function getTimeframeMilliseconds"
      },
      {
        "pattern": "function exportCandlesToCsv",
        "file": "packages\\backend\\src\\services\\data-service.ts",
        "original": "function exportCandlesToCsv"
      },
      {
        "pattern": "const encryptApiCredentials = (apiKey: string, apiSecret: string, passphrase?: string) =>",
        "file": "packages\\backend\\src\\services\\encryption.service.ts",
        "original": "const encryptApiCredentials = (apiKey: string, apiSecret: string, passphrase?: string) =>"
      },
      {
        "pattern": "const decryptApiCredentials = (encryptedApiKey: string, encryptedApiSecret: string, encryptedPassphrase?: string) =>",
        "file": "packages\\backend\\src\\services\\encryption.service.ts",
        "original": "const decryptApiCredentials = (encryptedApiKey: string, encryptedApiSecret: string, encryptedPassphrase?: string) =>"
      },
      {
        "pattern": "const createSeries = (name: string, type: MetricSeries['type'] = 'gauge'): MetricSeries =>",
        "file": "packages\\backend\\src\\services\\metrics-collector.service.ts",
        "original": "const createSeries = (name: string, type: MetricSeries['type'] = 'gauge'): MetricSeries =>"
      },
      {
        "pattern": "function to",
        "file": "packages\\backend\\src\\strategies\\strategy-backtest.ts",
        "original": "function to"
      },
      {
        "pattern": "function quickBacktest",
        "file": "packages\\backend\\src\\strategies\\strategy-backtest.ts",
        "original": "function quickBacktest"
      },
      {
        "pattern": "function createBasicContext",
        "file": "packages\\backend\\src\\strategies\\strategy-utils.ts",
        "original": "function createBasicContext"
      },
      {
        "pattern": "function createAndInitializeStrategy",
        "file": "packages\\backend\\src\\strategies\\strategy-utils.ts",
        "original": "function createAndInitializeStrategy"
      },
      {
        "pattern": "function runStrategyWithErrorHandling",
        "file": "packages\\backend\\src\\strategies\\strategy-utils.ts",
        "original": "function runStrategyWithErrorHandling"
      },
      {
        "pattern": "function cleanupStrategy",
        "file": "packages\\backend\\src\\strategies\\strategy-utils.ts",
        "original": "function cleanupStrategy"
      },
      {
        "pattern": "function getAllAvailableStrategies",
        "file": "packages\\backend\\src\\strategies\\strategy-utils.ts",
        "original": "function getAllAvailableStrategies"
      },
      {
        "pattern": "function findStrategyByName",
        "file": "packages\\backend\\src\\strategies\\strategy-utils.ts",
        "original": "function findStrategyByName"
      },
      {
        "pattern": "function testMainnetSafe",
        "file": "packages\\backend\\src\\test-mainnet-safe.ts",
        "original": "function testMainnetSafe"
      },
      {
        "pattern": "function getNetworkTime",
        "file": "packages\\backend\\src\\types\\ntp-client.d.ts",
        "original": "function getNetworkTime"
      },
      {
        "pattern": "function execution",
        "file": "packages\\backend\\src\\utils\\performance-profiler.ts",
        "original": "function execution"
      },
      {
        "pattern": "const generateBullishCandles = (count: number, startPrice = 100, timeframe = '1h'): Candle[] =>",
        "file": "packages\\backend\\tests\\fixtures\\candles.ts",
        "original": "const generateBullishCandles = (count: number, startPrice = 100, timeframe = '1h'): Candle[] =>"
      },
      {
        "pattern": "const generateBearishCandles = (count: number, startPrice = 100, timeframe = '1h'): Candle[] =>",
        "file": "packages\\backend\\tests\\fixtures\\candles.ts",
        "original": "const generateBearishCandles = (count: number, startPrice = 100, timeframe = '1h'): Candle[] =>"
      },
      {
        "pattern": "const generateCrossoverCandles = (count: number, startPrice = 100, timeframe = '1h'): Candle[] =>",
        "file": "packages\\backend\\tests\\fixtures\\candles.ts",
        "original": "const generateCrossoverCandles = (count: number, startPrice = 100, timeframe = '1h'): Candle[] =>"
      },
      {
        "pattern": "function to",
        "file": "packages\\backend\\tests\\fixtures\\candles.ts",
        "original": "function to"
      },
      {
        "pattern": "const timeframeToMs = (timeframe: string): number =>",
        "file": "packages\\backend\\tests\\fixtures\\candles.ts",
        "original": "const timeframeToMs = (timeframe: string): number =>"
      },
      {
        "pattern": "const createMockContext = (): StrategyContext =>",
        "file": "packages\\backend\\tests\\integration\\strategies\\strategy-factory.test.ts",
        "original": "const createMockContext = (): StrategyContext =>"
      },
      {
        "pattern": "function testTradingEngine",
        "file": "packages\\backend\\tests\\integration\\trading\\test-trading-engine.ts",
        "original": "function testTradingEngine"
      },
      {
        "pattern": "function to",
        "file": "packages\\backend\\tests\\unit\\signals\\sma\\improved-sma-signal-processor.test.ts",
        "original": "function to"
      },
      {
        "pattern": "const createMockContext = (candles: Candle[] = []): StrategyContext =>",
        "file": "packages\\backend\\tests\\unit\\signals\\sma\\sma-crossover-strategy.test.ts",
        "original": "const createMockContext = (candles: Candle[] = []): StrategyContext =>"
      },
      {
        "pattern": "const generateBullishCandles = (count: number, startPrice = 100): Candle[] =>",
        "file": "packages\\backend\\tests\\utils\\test-helpers.ts",
        "original": "const generateBullishCandles = (count: number, startPrice = 100): Candle[] =>"
      },
      {
        "pattern": "const generateBearishCandles = (count: number, startPrice = 100): Candle[] =>",
        "file": "packages\\backend\\tests\\utils\\test-helpers.ts",
        "original": "const generateBearishCandles = (count: number, startPrice = 100): Candle[] =>"
      },
      {
        "pattern": "const generateMixedTrendCandles = (count: number, startPrice = 100): Candle[] =>",
        "file": "packages\\backend\\tests\\utils\\test-helpers.ts",
        "original": "const generateMixedTrendCandles = (count: number, startPrice = 100): Candle[] =>"
      },
      {
        "pattern": "function BotCreatePage",
        "file": "packages\\frontend\\src\\app\\bots\\create\\page.tsx",
        "original": "function BotCreatePage"
      },
      {
        "pattern": "const onSubmit = async (data: FormData) =>",
        "file": "packages\\frontend\\src\\app\\bots\\create\\page.tsx",
        "original": "const onSubmit = async (data: FormData) =>"
      },
      {
        "pattern": "function BotsPage",
        "file": "packages\\frontend\\src\\app\\bots\\page.tsx",
        "original": "function BotsPage"
      },
      {
        "pattern": "const fetchBots = async () =>",
        "file": "packages\\frontend\\src\\app\\bots\\page.tsx",
        "original": "const fetchBots = async () =>"
      },
      {
        "pattern": "const handleBotAction = async (botId: string, action: 'start' | 'stop' | 'pause' | 'resume') =>",
        "file": "packages\\frontend\\src\\app\\bots\\page.tsx",
        "original": "const handleBotAction = async (botId: string, action: 'start' | 'stop' | 'pause' | 'resume') =>"
      },
      {
        "pattern": "const getStatusColor = (status: BotStatus): string =>",
        "file": "packages\\frontend\\src\\app\\bots\\page.tsx",
        "original": "const getStatusColor = (status: BotStatus): string =>"
      },
      {
        "pattern": "const getStatusIcon = (status: BotStatus): string =>",
        "file": "packages\\frontend\\src\\app\\bots\\page.tsx",
        "original": "const getStatusIcon = (status: BotStatus): string =>"
      },
      {
        "pattern": "const canPerformAction = (status: BotStatus, action: string): boolean =>",
        "file": "packages\\frontend\\src\\app\\bots\\page.tsx",
        "original": "const canPerformAction = (status: BotStatus, action: string): boolean =>"
      },
      {
        "pattern": "const handleSort = (field: SortField) =>",
        "file": "packages\\frontend\\src\\app\\bots\\page.tsx",
        "original": "const handleSort = (field: SortField) =>"
      },
      {
        "pattern": "const handleFilterChange = (filterType: keyof BotFilters, value: string) =>",
        "file": "packages\\frontend\\src\\app\\bots\\page.tsx",
        "original": "const handleFilterChange = (filterType: keyof BotFilters, value: string) =>"
      },
      {
        "pattern": "const deleteBot = async (botId: string) =>",
        "file": "packages\\frontend\\src\\app\\bots\\page.tsx",
        "original": "const deleteBot = async (botId: string) =>"
      },
      {
        "pattern": "const getUniqueStrategies = () =>",
        "file": "packages\\frontend\\src\\app\\bots\\page.tsx",
        "original": "const getUniqueStrategies = () =>"
      },
      {
        "pattern": "const getUniqueExchanges = () =>",
        "file": "packages\\frontend\\src\\app\\bots\\page.tsx",
        "original": "const getUniqueExchanges = () =>"
      },
      {
        "pattern": "function EditBotPage",
        "file": "packages\\frontend\\src\\app\\bots\\[id]\\edit\\page.tsx",
        "original": "function EditBotPage"
      },
      {
        "pattern": "const fetchBot = async () =>",
        "file": "packages\\frontend\\src\\app\\bots\\[id]\\edit\\page.tsx",
        "original": "const fetchBot = async () =>"
      },
      {
        "pattern": "const onSubmit = async (data: EditBotFormData) =>",
        "file": "packages\\frontend\\src\\app\\bots\\[id]\\edit\\page.tsx",
        "original": "const onSubmit = async (data: EditBotFormData) =>"
      },
      {
        "pattern": "function Navigation",
        "file": "packages\\frontend\\src\\app\\layout.tsx",
        "original": "function Navigation"
      },
      {
        "pattern": "function RootLayout",
        "file": "packages\\frontend\\src\\app\\layout.tsx",
        "original": "function RootLayout"
      },
      {
        "pattern": "function HomePage",
        "file": "packages\\frontend\\src\\app\\page.tsx",
        "original": "function HomePage"
      },
      {
        "pattern": "const ConnectionStatus = ({ wsUrl = 'ws://localhost:3002/ws', token }: ConnectionStatusProps) =>",
        "file": "packages\\frontend\\src\\components\\ConnectionStatus.tsx",
        "original": "const ConnectionStatus = ({ \r\n  wsUrl = 'ws://localhost:3002/ws', \r\n  token \r\n}: ConnectionStatusProps) =>"
      },
      {
        "pattern": "const handleWebSocketMessage = (message: any) =>",
        "file": "packages\\frontend\\src\\components\\StrategyMonitor.tsx",
        "original": "const handleWebSocketMessage = (message: any) =>"
      },
      {
        "pattern": "const handleStrategyUpdate = (update: StrategyUpdateMessage) =>",
        "file": "packages\\frontend\\src\\components\\StrategyMonitor.tsx",
        "original": "const handleStrategyUpdate = (update: StrategyUpdateMessage) =>"
      },
      {
        "pattern": "const handleBotStatusUpdate = (data: any) =>",
        "file": "packages\\frontend\\src\\components\\StrategyMonitor.tsx",
        "original": "const handleBotStatusUpdate = (data: any) =>"
      },
      {
        "pattern": "const getStrategyMetrics = (botId: string): StrategyPerformanceMetrics | null =>",
        "file": "packages\\frontend\\src\\components\\StrategyMonitor.tsx",
        "original": "const getStrategyMetrics = (botId: string): StrategyPerformanceMetrics | null =>"
      },
      {
        "pattern": "const formatCurrency = (amount: number): string =>",
        "file": "packages\\frontend\\src\\components\\StrategyMonitor.tsx",
        "original": "const formatCurrency = (amount: number): string =>"
      },
      {
        "pattern": "const formatPercentage = (value: number): string =>",
        "file": "packages\\frontend\\src\\components\\StrategyMonitor.tsx",
        "original": "const formatPercentage = (value: number): string =>"
      },
      {
        "pattern": "const formatUptime = (uptime: number): string =>",
        "file": "packages\\frontend\\src\\components\\StrategyMonitor.tsx",
        "original": "const formatUptime = (uptime: number): string =>"
      },
      {
        "pattern": "const getRiskColor = (riskScore: number): string =>",
        "file": "packages\\frontend\\src\\components\\StrategyMonitor.tsx",
        "original": "const getRiskColor = (riskScore: number): string =>"
      },
      {
        "pattern": "const getStatusColor = (isRunning: boolean): string =>",
        "file": "packages\\frontend\\src\\components\\StrategyMonitor.tsx",
        "original": "const getStatusColor = (isRunning: boolean): string =>"
      },
      {
        "pattern": "const useWebSocketContext = (): WebSocketContextValue =>",
        "file": "packages\\frontend\\src\\contexts\\WebSocketContext.tsx",
        "original": "const useWebSocketContext = (): WebSocketContextValue =>"
      },
      {
        "pattern": "const useWebSocket = (options: WebSocketOptions): UseWebSocketReturn =>",
        "file": "packages\\frontend\\src\\hooks\\useWebSocket.ts",
        "original": "const useWebSocket = (options: WebSocketOptions): UseWebSocketReturn =>"
      },
      {
        "pattern": "const getStatusColor = ({ isConnected, isConnecting, connectionError }: ConnectionStatusState): string =>",
        "file": "packages\\frontend\\src\\utils\\connectionStatus.ts",
        "original": "const getStatusColor = ({ isConnected, isConnecting, connectionError }: ConnectionStatusState): string =>"
      },
      {
        "pattern": "const getStatusText = ({ isConnected, isConnecting, connectionError }: ConnectionStatusState): string =>",
        "file": "packages\\frontend\\src\\utils\\connectionStatus.ts",
        "original": "const getStatusText = ({ isConnected, isConnecting, connectionError }: ConnectionStatusState): string =>"
      },
      {
        "pattern": "const validateBotConfiguration = (data: unknown) =>",
        "file": "packages\\shared\\src\\validation.ts",
        "original": "const validateBotConfiguration = (data: unknown) =>"
      }
    ]
  },
  "automatedResults": {
    "timestamp": "2025-07-04T01:34:50.359Z",
    "project": "JBR Trading Platform",
    "task": "Task 41.2 - Automated Duplicated Code Detection",
    "analysis": {
      "exactFileDuplicates": {
        "count": 21,
        "instances": [
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\bot-cycle\\bot-cycle-stable.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 1281
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\bot-cycle\\exchange-client.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 1268
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\bot-cycle\\stable-bot-cycle.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 187
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\bot-cycle\\unified-trading-engine.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 5633
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\indicators\\average-price.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 1180
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\indicators\\index.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 8443
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\target-reacher\\config-validator.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 5398
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\target-reacher\\interfaces.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 5212
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\target-reacher\\modular-target-reacher.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 4195
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\target-reacher\\parameter-mapping.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 1097
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\target-reacher\\parameters.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 1746
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\unified-signals.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 12637
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\JabbrLabs\\unified-strategies.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 4840
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\services\\data-service.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 5134
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\tests\\setup.js"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 1851
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\tests\\unit\\bot-runtime-enhanced.test.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 0
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\frontend\\next-env.d.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 233
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\frontend\\tests\\setup.js"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 1252
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\shared\\src\\index.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 8458
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\shared\\src\\types.ts"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 13229
          },
          {
            "type": "exact_duplicate",
            "files": [
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\backend\\src\\index.ts",
              "E:\\M.U. Kamal\\Programing\\0TS\\Jabbr\\JBR\\packages\\shared\\tests\\setup.js"
            ],
            "hash": "d41d8cd98f00b204e9800998ecf8427e",
            "size": 528
          }
        ]
      },
      "codeBlockDuplicates": {
        "count": 0,
        "instances": []
      },
      "jscpd": {
        "hasIssues": true
      }
    },
    "summary": {
      "totalIssues": 21,
      "severity": "high",
      "recommendations": [
        "Remove exact file duplicates - these are likely copy-paste errors",
        "Consolidate duplicate files into shared modules"
      ]
    },
    "toolsUsed": [
      "Custom file hash comparison",
      "Regex-based code block extraction",
      "JSCPD static analysis tool",
      "Pattern matching algorithms"
    ]
  },
  "recommendations": [
    "Review semantic similarities for potential refactoring opportunities",
    "Consolidate similar function patterns into utility functions",
    "Consider creating base classes for repeated patterns",
    "Implement shared interfaces for similar data structures"
  ]
}
