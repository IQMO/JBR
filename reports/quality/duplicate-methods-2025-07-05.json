{
  "timestamp": "2025-07-05T18:07:48.713Z",
  "summary": {
    "totalMethods": 3475,
    "totalFiles": 251,
    "exactDuplicates": 499,
    "similarDuplicates": 206,
    "potentialSavings": {
      "linesOfCode": 9740,
      "duplicateFiles": 143
    }
  },
  "duplicateGroups": [
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 172,
          "endLine": 174,
          "className": "AIProjectAnalyzer",
          "signature": "constructor(projectRoot: string)"
        },
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 59,
          "endLine": 61,
          "className": "DependencyGraphBuilder",
          "signature": "constructor(projectRoot: string)"
        },
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 59,
          "endLine": 61,
          "className": "DependencyGraphBuilder",
          "signature": "constructor(projectRoot: string)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 720,
          "endLine": 735,
          "className": "AIProjectAnalyzer",
          "signature": "if (testFiles.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 753,
          "endLine": 768,
          "className": "AIProjectAnalyzer",
          "signature": "if (docFiles.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-report-generator.ts",
          "startLine": 146,
          "endLine": 148,
          "className": "AIReportGenerator",
          "signature": "if (issues.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-report-generator.ts",
          "startLine": 193,
          "endLine": 195,
          "className": "AIReportGenerator",
          "signature": "if (!insights.aiGeneratedInsights || insights.aiGeneratedInsights.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-report-generator.ts",
          "startLine": 211,
          "endLine": 213,
          "className": "AIReportGenerator",
          "signature": "if (recommendations.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 80,
          "endLine": 85,
          "className": "CICDIntegration",
          "signature": "constructor(projectRoot: string)"
        },
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 80,
          "endLine": 85,
          "className": "CICDIntegration",
          "signature": "constructor(projectRoot: string)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "initializeConfig",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 91,
          "endLine": 112,
          "className": "CICDIntegration",
          "signature": "initializeConfig(platforms: CICDConfig['platforms'] = ['github']): CICDConfig"
        },
        {
          "name": "initializeConfig",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 91,
          "endLine": 112,
          "className": "CICDIntegration",
          "signature": "initializeConfig(platforms: CICDConfig['platforms'] = ['github']): CICDConfig"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "loadConfig",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 117,
          "endLine": 128,
          "className": "CICDIntegration",
          "signature": "loadConfig(): CICDConfig"
        },
        {
          "name": "loadConfig",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 117,
          "endLine": 128,
          "className": "CICDIntegration",
          "signature": "loadConfig(): CICDConfig"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "saveConfig",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 133,
          "endLine": 143,
          "className": "CICDIntegration",
          "signature": "saveConfig(config: CICDConfig): void"
        },
        {
          "name": "saveConfig",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 133,
          "endLine": 143,
          "className": "CICDIntegration",
          "signature": "saveConfig(config: CICDConfig): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "runValidation",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 148,
          "endLine": 201,
          "className": "CICDIntegration",
          "signature": "runValidation(): Promise<CICDValidationResult>"
        },
        {
          "name": "runValidation",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 148,
          "endLine": 201,
          "className": "CICDIntegration",
          "signature": "runValidation(): Promise<CICDValidationResult>"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 151,
          "endLine": 167,
          "className": "CICDIntegration",
          "signature": "if (!config.enabled)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 151,
          "endLine": 167,
          "className": "CICDIntegration",
          "signature": "if (!config.enabled)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 207,
          "endLine": 209,
          "className": "CICDIntegration",
          "signature": "if (!config.validationRules.enforceTaskValidation)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 207,
          "endLine": 209,
          "className": "CICDIntegration",
          "signature": "if (!config.validationRules.enforceTaskValidation)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 216,
          "endLine": 218,
          "className": "CICDIntegration",
          "signature": "if (issue.severity === 'error')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 216,
          "endLine": 218,
          "className": "CICDIntegration",
          "signature": "if (issue.severity === 'error')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 232,
          "endLine": 234,
          "className": "CICDIntegration",
          "signature": "if (!config.validationRules.requireMilestoneProgress)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 232,
          "endLine": 234,
          "className": "CICDIntegration",
          "signature": "if (!config.validationRules.requireMilestoneProgress)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 241,
          "endLine": 253,
          "className": "CICDIntegration",
          "signature": "if (activeMilestones.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 241,
          "endLine": 253,
          "className": "CICDIntegration",
          "signature": "if (activeMilestones.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 247,
          "endLine": 249,
          "className": "CICDIntegration",
          "signature": "if (milestone.metrics.timeline.daysRemaining < 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 247,
          "endLine": 249,
          "className": "CICDIntegration",
          "signature": "if (milestone.metrics.timeline.daysRemaining < 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 250,
          "endLine": 252,
          "className": "CICDIntegration",
          "signature": "if (milestone.metrics.taskCount.blocked > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 250,
          "endLine": 252,
          "className": "CICDIntegration",
          "signature": "if (milestone.metrics.taskCount.blocked > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "loadTasks",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 287,
          "endLine": 312,
          "className": "CICDIntegration",
          "signature": "loadTasks(): any"
        },
        {
          "name": "loadTasks",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 287,
          "endLine": 312,
          "className": "CICDIntegration",
          "signature": "loadTasks(): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 10,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 296,
          "endLine": 298,
          "className": "CICDIntegration",
          "signature": "if (data.master && data.master.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 339,
          "endLine": 341,
          "className": "DependencyGraphBuilder",
          "signature": "if (data.master && data.master.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 129,
          "endLine": 131,
          "className": "MilestoneTracker",
          "signature": "if (data.master && data.master.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 484,
          "endLine": 486,
          "className": "ProgressTracker",
          "signature": "if (data.master && data.master.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 647,
          "endLine": 649,
          "className": "StatusValidator",
          "signature": "if (data.master && data.master.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 296,
          "endLine": 298,
          "className": "CICDIntegration",
          "signature": "if (data.master && data.master.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 339,
          "endLine": 341,
          "className": "DependencyGraphBuilder",
          "signature": "if (data.master && data.master.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 129,
          "endLine": 131,
          "className": "MilestoneTracker",
          "signature": "if (data.master && data.master.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 484,
          "endLine": 486,
          "className": "ProgressTracker",
          "signature": "if (data.master && data.master.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 647,
          "endLine": 649,
          "className": "StatusValidator",
          "signature": "if (data.master && data.master.tasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 10,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 300,
          "endLine": 302,
          "className": "CICDIntegration",
          "signature": "if (data.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 343,
          "endLine": 345,
          "className": "DependencyGraphBuilder",
          "signature": "if (data.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 133,
          "endLine": 135,
          "className": "MilestoneTracker",
          "signature": "if (data.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 488,
          "endLine": 490,
          "className": "ProgressTracker",
          "signature": "if (data.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 651,
          "endLine": 653,
          "className": "StatusValidator",
          "signature": "if (data.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 300,
          "endLine": 302,
          "className": "CICDIntegration",
          "signature": "if (data.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 343,
          "endLine": 345,
          "className": "DependencyGraphBuilder",
          "signature": "if (data.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 133,
          "endLine": 135,
          "className": "MilestoneTracker",
          "signature": "if (data.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 488,
          "endLine": 490,
          "className": "ProgressTracker",
          "signature": "if (data.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 651,
          "endLine": 653,
          "className": "StatusValidator",
          "signature": "if (data.tasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getTestCoverage",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 317,
          "endLine": 330,
          "className": "CICDIntegration",
          "signature": "getTestCoverage(): number"
        },
        {
          "name": "getTestCoverage",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 317,
          "endLine": 330,
          "className": "CICDIntegration",
          "signature": "getTestCoverage(): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateRecommendations",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 381,
          "endLine": 406,
          "className": "CICDIntegration",
          "signature": "generateRecommendations(\r\n    taskValidation: CICDValidationResult['checks']['taskValidation'],\r\n    milestoneProgress: CICDValidationResult['checks']['milestoneProgress'],\r\n    quality: CICDValidationResult['checks']['quality']\r\n  ): string[]"
        },
        {
          "name": "generateRecommendations",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 381,
          "endLine": 406,
          "className": "CICDIntegration",
          "signature": "generateRecommendations(\r\n    taskValidation: CICDValidationResult['checks']['taskValidation'],\r\n    milestoneProgress: CICDValidationResult['checks']['milestoneProgress'],\r\n    quality: CICDValidationResult['checks']['quality']\r\n  ): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 387,
          "endLine": 389,
          "className": "CICDIntegration",
          "signature": "if (!taskValidation.passed)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 395,
          "endLine": 397,
          "className": "CICDIntegration",
          "signature": "if (!milestoneProgress.passed)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 387,
          "endLine": 389,
          "className": "CICDIntegration",
          "signature": "if (!taskValidation.passed)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 395,
          "endLine": 397,
          "className": "CICDIntegration",
          "signature": "if (!milestoneProgress.passed)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 6,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 391,
          "endLine": 393,
          "className": "CICDIntegration",
          "signature": "if (taskValidation.warnings.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 1183,
          "endLine": 1185,
          "className": "DependencyVisualizer",
          "signature": "if (graph.metadata.cycles.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 1187,
          "endLine": 1189,
          "className": "DependencyVisualizer",
          "signature": "if (graph.metadata.orphanTasks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 391,
          "endLine": 393,
          "className": "CICDIntegration",
          "signature": "if (taskValidation.warnings.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 1183,
          "endLine": 1185,
          "className": "DependencyVisualizer",
          "signature": "if (graph.metadata.cycles.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 1187,
          "endLine": 1189,
          "className": "DependencyVisualizer",
          "signature": "if (graph.metadata.orphanTasks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 399,
          "endLine": 406,
          "className": "CICDIntegration",
          "signature": "if (!quality.passed)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 399,
          "endLine": 406,
          "className": "CICDIntegration",
          "signature": "if (!quality.passed)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 401,
          "endLine": 403,
          "className": "CICDIntegration",
          "signature": "if (quality.testCoverage < quality.requiredCoverage)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 401,
          "endLine": 403,
          "className": "CICDIntegration",
          "signature": "if (quality.testCoverage < quality.requiredCoverage)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 404,
          "endLine": 406,
          "className": "CICDIntegration",
          "signature": "if (quality.blockedTasks > quality.maxBlocked)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 404,
          "endLine": 406,
          "className": "CICDIntegration",
          "signature": "if (quality.blockedTasks > quality.maxBlocked)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateWorkflowFiles",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 434,
          "endLine": 451,
          "className": "CICDIntegration",
          "signature": "generateWorkflowFiles(platforms: CICDConfig['platforms']): void"
        },
        {
          "name": "generateWorkflowFiles",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 434,
          "endLine": 451,
          "className": "CICDIntegration",
          "signature": "generateWorkflowFiles(platforms: CICDConfig['platforms']): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "switch",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 436,
          "endLine": 449,
          "className": "CICDIntegration",
          "signature": "switch (platform)"
        },
        {
          "name": "switch",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 436,
          "endLine": 449,
          "className": "CICDIntegration",
          "signature": "switch (platform)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateGitHubWorkflow",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 456,
          "endLine": 502,
          "className": "CICDIntegration",
          "signature": "generateGitHubWorkflow(): void"
        },
        {
          "name": "generateGitHubWorkflow",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 456,
          "endLine": 502,
          "className": "CICDIntegration",
          "signature": "generateGitHubWorkflow(): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateGitLabCI",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 507,
          "endLine": 532,
          "className": "CICDIntegration",
          "signature": "generateGitLabCI(): void"
        },
        {
          "name": "generateGitLabCI",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 507,
          "endLine": 532,
          "className": "CICDIntegration",
          "signature": "generateGitLabCI(): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateJenkinsfile",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 537,
          "endLine": 567,
          "className": "CICDIntegration",
          "signature": "generateJenkinsfile(): void"
        },
        {
          "name": "generateJenkinsfile",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 537,
          "endLine": 567,
          "className": "CICDIntegration",
          "signature": "generateJenkinsfile(): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "stage",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 542,
          "endLine": 548,
          "className": "CICDIntegration",
          "signature": "stage('Setup')"
        },
        {
          "name": "stage",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 542,
          "endLine": 548,
          "className": "CICDIntegration",
          "signature": "stage('Setup')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "dir",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 544,
          "endLine": 546,
          "className": "CICDIntegration",
          "signature": "dir('.taskmaster')"
        },
        {
          "name": "dir",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 552,
          "endLine": 554,
          "className": "CICDIntegration",
          "signature": "dir('.taskmaster')"
        },
        {
          "name": "dir",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 544,
          "endLine": 546,
          "className": "CICDIntegration",
          "signature": "dir('.taskmaster')"
        },
        {
          "name": "dir",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 552,
          "endLine": 554,
          "className": "CICDIntegration",
          "signature": "dir('.taskmaster')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "stage",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 549,
          "endLine": 560,
          "className": "CICDIntegration",
          "signature": "stage('Validate Tasks')"
        },
        {
          "name": "stage",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 549,
          "endLine": 560,
          "className": "CICDIntegration",
          "signature": "stage('Validate Tasks')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateAzurePipeline",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 572,
          "endLine": 604,
          "className": "CICDIntegration",
          "signature": "generateAzurePipeline(): void"
        },
        {
          "name": "generateAzurePipeline",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 572,
          "endLine": 604,
          "className": "CICDIntegration",
          "signature": "generateAzurePipeline(): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "updateConfig",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 609,
          "endLine": 613,
          "className": "CICDIntegration",
          "signature": "updateConfig(updates: Partial<CICDConfig>): void"
        },
        {
          "name": "updateConfig",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 609,
          "endLine": 613,
          "className": "CICDIntegration",
          "signature": "updateConfig(updates: Partial<CICDConfig>): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getConfig",
          "filePath": ".\\.taskmaster\\src\\cicd-integration.ts",
          "startLine": 618,
          "endLine": 620,
          "className": "CICDIntegration",
          "signature": "getConfig(): CICDConfig"
        },
        {
          "name": "getConfig",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cicd-integration.ts",
          "startLine": 618,
          "endLine": 620,
          "className": "CICDIntegration",
          "signature": "getConfig(): CICDConfig"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 71,
          "endLine": 79,
          "signature": "if (options.collect)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 70,
          "endLine": 78,
          "signature": "if (options.collect)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 80,
          "endLine": 92,
          "signature": "if (options.trends)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 79,
          "endLine": 91,
          "signature": "if (options.trends)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 84,
          "endLine": 86,
          "signature": "if (trends.error)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 83,
          "endLine": 85,
          "signature": "if (trends.error)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 94,
          "endLine": 112,
          "signature": "if (options.summary)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 93,
          "endLine": 111,
          "signature": "if (options.summary)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 98,
          "endLine": 100,
          "signature": "if (summary.error)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 97,
          "endLine": 99,
          "signature": "if (summary.error)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 107,
          "endLine": 110,
          "signature": "if (summary.recommendations.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 106,
          "endLine": 109,
          "signature": "if (summary.recommendations.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 114,
          "endLine": 124,
          "signature": "if (options.export)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 113,
          "endLine": 123,
          "signature": "if (options.export)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 149,
          "endLine": 159,
          "signature": "if (options.start)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 148,
          "endLine": 158,
          "signature": "if (options.start)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 150,
          "endLine": 153,
          "signature": "if (!options.description)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 149,
          "endLine": 152,
          "signature": "if (!options.description)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 160,
          "endLine": 163,
          "signature": "if (options.end)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 159,
          "endLine": 162,
          "signature": "if (options.end)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 165,
          "endLine": 169,
          "signature": "if (options.report)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 164,
          "endLine": 168,
          "signature": "if (options.report)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 199,
          "endLine": 203,
          "signature": "if (options.metrics)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 198,
          "endLine": 202,
          "signature": "if (options.metrics)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 205,
          "endLine": 208,
          "signature": "if (options.dashboard)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 204,
          "endLine": 207,
          "signature": "if (options.dashboard)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 247,
          "endLine": 286,
          "signature": "if (options.init)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 246,
          "endLine": 285,
          "signature": "if (options.init)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 287,
          "endLine": 291,
          "signature": "if (options.set)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 286,
          "endLine": 290,
          "signature": "if (options.set)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 293,
          "endLine": 297,
          "signature": "if (options.get)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 292,
          "endLine": 296,
          "signature": "if (options.get)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 299,
          "endLine": 307,
          "signature": "if (options.list)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 298,
          "endLine": 306,
          "signature": "if (options.list)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 334,
          "endLine": 337,
          "signature": "if (options.type === 'svg' || options.type === 'both')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 333,
          "endLine": 336,
          "signature": "if (options.type === 'svg' || options.type === 'both')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 339,
          "endLine": 342,
          "signature": "if (options.type === 'html' || options.type === 'both')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 338,
          "endLine": 341,
          "signature": "if (options.type === 'html' || options.type === 'both')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 344,
          "endLine": 347,
          "signature": "if (options.analyze)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 343,
          "endLine": 346,
          "signature": "if (options.analyze)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 375,
          "endLine": 392,
          "signature": "if (options.create)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 374,
          "endLine": 391,
          "signature": "if (options.create)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 377,
          "endLine": 380,
          "signature": "if (!options.title || !options.description || !options.target)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 376,
          "endLine": 379,
          "signature": "if (!options.title || !options.description || !options.target)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 395,
          "endLine": 398,
          "signature": "if (milestones.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 394,
          "endLine": 397,
          "signature": "if (milestones.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 415,
          "endLine": 418,
          "signature": "if (report.insights.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 414,
          "endLine": 417,
          "signature": "if (report.insights.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 420,
          "endLine": 423,
          "signature": "if (report.recommendations.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 419,
          "endLine": 422,
          "signature": "if (report.recommendations.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 425,
          "endLine": 428,
          "signature": "if (report.risks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 424,
          "endLine": 427,
          "signature": "if (report.risks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 456,
          "endLine": 460,
          "signature": "if (options.test)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 455,
          "endLine": 459,
          "signature": "if (options.test)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 461,
          "endLine": 465,
          "signature": "if (options.sync)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 460,
          "endLine": 464,
          "signature": "if (options.sync)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 467,
          "endLine": 471,
          "signature": "if (options.webhook)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 466,
          "endLine": 470,
          "signature": "if (options.webhook)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 505,
          "endLine": 507,
          "signature": "if (options.fix)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 504,
          "endLine": 506,
          "signature": "if (options.fix)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 510,
          "endLine": 528,
          "signature": "if (options.task)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 509,
          "endLine": 527,
          "signature": "if (options.task)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 515,
          "endLine": 517,
          "signature": "if (results.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 514,
          "endLine": 516,
          "signature": "if (results.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 522,
          "endLine": 526,
          "signature": "if (result.suggestions)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 521,
          "endLine": 525,
          "signature": "if (result.suggestions)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 540,
          "endLine": 542,
          "signature": "if (report.summary.autoFixed > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 539,
          "endLine": 541,
          "signature": "if (report.summary.autoFixed > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 551,
          "endLine": 568,
          "signature": "if (filteredIssues.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 550,
          "endLine": 567,
          "signature": "if (filteredIssues.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 559,
          "endLine": 561,
          "signature": "if (issue.autoFixed)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 558,
          "endLine": 560,
          "signature": "if (issue.autoFixed)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 570,
          "endLine": 575,
          "signature": "if (report.recommendations.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 569,
          "endLine": 574,
          "signature": "if (report.recommendations.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 577,
          "endLine": 580,
          "signature": "if (options.report)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 576,
          "endLine": 579,
          "signature": "if (options.report)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 616,
          "endLine": 629,
          "signature": "if (options.detailed)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 615,
          "endLine": 628,
          "signature": "if (options.detailed)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 623,
          "endLine": 628,
          "signature": "if (projectMetrics.riskFactors.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 622,
          "endLine": 627,
          "signature": "if (projectMetrics.riskFactors.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 654,
          "endLine": 697,
          "signature": "if (options.validate)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 653,
          "endLine": 696,
          "signature": "if (options.validate)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 665,
          "endLine": 668,
          "signature": "if (taskCheck.errors.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 664,
          "endLine": 667,
          "signature": "if (taskCheck.errors.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 669,
          "endLine": 672,
          "signature": "if (taskCheck.warnings.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 668,
          "endLine": 671,
          "signature": "if (taskCheck.warnings.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 678,
          "endLine": 681,
          "signature": "if (milestoneCheck.blockers.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 677,
          "endLine": 680,
          "signature": "if (milestoneCheck.blockers.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\cli.ts",
          "startLine": 690,
          "endLine": 693,
          "signature": "if (result.recommendations.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\cli.ts",
          "startLine": 689,
          "endLine": 692,
          "signature": "if (result.recommendations.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 38,
          "endLine": 52,
          "className": "DashboardGenerator",
          "signature": "constructor(projectRoot: string, config?: Partial<DashboardConfig>)"
        },
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 38,
          "endLine": 52,
          "className": "DashboardGenerator",
          "signature": "constructor(projectRoot: string, config?: Partial<DashboardConfig>)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateHTMLDashboard",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 58,
          "endLine": 259,
          "className": "DashboardGenerator",
          "signature": "generateHTMLDashboard(): string"
        },
        {
          "name": "generateHTMLDashboard",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 58,
          "endLine": 259,
          "className": "DashboardGenerator",
          "signature": "generateHTMLDashboard(): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateAlertsSection",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 264,
          "endLine": 295,
          "className": "DashboardGenerator",
          "signature": "generateAlertsSection(alerts: any): string"
        },
        {
          "name": "generateAlertsSection",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 264,
          "endLine": 295,
          "className": "DashboardGenerator",
          "signature": "generateAlertsSection(alerts: any): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 266,
          "endLine": 271,
          "className": "DashboardGenerator",
          "signature": "if (alerts.blockedTasks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 266,
          "endLine": 271,
          "className": "DashboardGenerator",
          "signature": "if (alerts.blockedTasks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 273,
          "endLine": 278,
          "className": "DashboardGenerator",
          "signature": "if (alerts.overdueTasks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 273,
          "endLine": 278,
          "className": "DashboardGenerator",
          "signature": "if (alerts.overdueTasks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 280,
          "endLine": 284,
          "className": "DashboardGenerator",
          "signature": "if (alerts.dependencyIssues.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 286,
          "endLine": 290,
          "className": "DashboardGenerator",
          "signature": "if (alerts.highRiskTasks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 280,
          "endLine": 284,
          "className": "DashboardGenerator",
          "signature": "if (alerts.dependencyIssues.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 286,
          "endLine": 290,
          "className": "DashboardGenerator",
          "signature": "if (alerts.highRiskTasks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateRecommendationsSection",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 300,
          "endLine": 309,
          "className": "DashboardGenerator",
          "signature": "generateRecommendationsSection(recommendations: string[]): string"
        },
        {
          "name": "generateRecommendationsSection",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 300,
          "endLine": 309,
          "className": "DashboardGenerator",
          "signature": "generateRecommendationsSection(recommendations: string[]): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateJSONDashboard",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 314,
          "endLine": 333,
          "className": "DashboardGenerator",
          "signature": "generateJSONDashboard(): any"
        },
        {
          "name": "generateJSONDashboard",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 314,
          "endLine": 333,
          "className": "DashboardGenerator",
          "signature": "generateJSONDashboard(): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateSlackNotification",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 338,
          "endLine": 373,
          "className": "DashboardGenerator",
          "signature": "generateSlackNotification(): any"
        },
        {
          "name": "generateSlackNotification",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 338,
          "endLine": 373,
          "className": "DashboardGenerator",
          "signature": "generateSlackNotification(): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateGitHubIssue",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 378,
          "endLine": 414,
          "className": "DashboardGenerator",
          "signature": "generateGitHubIssue(blockedTasks: TaskMetrics[]): any"
        },
        {
          "name": "generateGitHubIssue",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 378,
          "endLine": 414,
          "className": "DashboardGenerator",
          "signature": "generateGitHubIssue(blockedTasks: TaskMetrics[]): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "saveDashboard",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 419,
          "endLine": 444,
          "className": "DashboardGenerator",
          "signature": "saveDashboard(): void"
        },
        {
          "name": "saveDashboard",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 419,
          "endLine": 444,
          "className": "DashboardGenerator",
          "signature": "saveDashboard(): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 453,
          "endLine": 457,
          "className": "DashboardGenerator",
          "signature": "if (this.config.integrations.slack?.webhookUrl)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 453,
          "endLine": 457,
          "className": "DashboardGenerator",
          "signature": "if (this.config.integrations.slack?.webhookUrl)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 460,
          "endLine": 464,
          "className": "DashboardGenerator",
          "signature": "if (this.config.integrations.github && dashboard.alerts.blockedTasks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 460,
          "endLine": 464,
          "className": "DashboardGenerator",
          "signature": "if (this.config.integrations.github && dashboard.alerts.blockedTasks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "loadTasksData",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 466,
          "endLine": 472,
          "className": "DashboardGenerator",
          "signature": "loadTasksData(): any"
        },
        {
          "name": "loadTasksData",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 490,
          "endLine": 496,
          "className": "MetricsCollector",
          "signature": "loadTasksData(): any"
        },
        {
          "name": "loadTasksData",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 466,
          "endLine": 472,
          "className": "DashboardGenerator",
          "signature": "loadTasksData(): any"
        },
        {
          "name": "loadTasksData",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 490,
          "endLine": 496,
          "className": "MetricsCollector",
          "signature": "loadTasksData(): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dashboard-generator.ts",
          "startLine": 487,
          "endLine": 489,
          "className": "DashboardCLI",
          "signature": "if (options.notify)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dashboard-generator.ts",
          "startLine": 487,
          "endLine": 489,
          "className": "DashboardCLI",
          "signature": "if (options.notify)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "buildGraph",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 67,
          "endLine": 130,
          "className": "DependencyGraphBuilder",
          "signature": "buildGraph(): DependencyGraph"
        },
        {
          "name": "buildGraph",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 67,
          "endLine": 130,
          "className": "DependencyGraphBuilder",
          "signature": "buildGraph(): DependencyGraph"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 71,
          "endLine": 73,
          "className": "DependencyGraphBuilder",
          "signature": "if (!tasksData.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 71,
          "endLine": 73,
          "className": "DependencyGraphBuilder",
          "signature": "if (!tasksData.tasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 77,
          "endLine": 120,
          "className": "DependencyGraphBuilder",
          "signature": "for (const task of tasksData.tasks)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 77,
          "endLine": 120,
          "className": "DependencyGraphBuilder",
          "signature": "for (const task of tasksData.tasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 82,
          "endLine": 94,
          "className": "DependencyGraphBuilder",
          "signature": "if (task.subtasks && task.subtasks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 82,
          "endLine": 94,
          "className": "DependencyGraphBuilder",
          "signature": "if (task.subtasks && task.subtasks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 83,
          "endLine": 93,
          "className": "DependencyGraphBuilder",
          "signature": "for (const subtask of task.subtasks)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 83,
          "endLine": 93,
          "className": "DependencyGraphBuilder",
          "signature": "for (const subtask of task.subtasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 97,
          "endLine": 107,
          "className": "DependencyGraphBuilder",
          "signature": "if (task.dependencies && task.dependencies.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 97,
          "endLine": 107,
          "className": "DependencyGraphBuilder",
          "signature": "if (task.dependencies && task.dependencies.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 98,
          "endLine": 106,
          "className": "DependencyGraphBuilder",
          "signature": "for (const depId of task.dependencies)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 98,
          "endLine": 106,
          "className": "DependencyGraphBuilder",
          "signature": "for (const depId of task.dependencies)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 110,
          "endLine": 119,
          "className": "DependencyGraphBuilder",
          "signature": "if (task.blockers && task.blockers.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 110,
          "endLine": 119,
          "className": "DependencyGraphBuilder",
          "signature": "if (task.blockers && task.blockers.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 111,
          "endLine": 118,
          "className": "DependencyGraphBuilder",
          "signature": "for (const blockerId of task.blockers)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 111,
          "endLine": 118,
          "className": "DependencyGraphBuilder",
          "signature": "for (const blockerId of task.blockers)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "createTaskNode",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 135,
          "endLine": 153,
          "className": "DependencyGraphBuilder",
          "signature": "createTaskNode(task: any, isSubtask: boolean, parentId?: string): TaskNode"
        },
        {
          "name": "createTaskNode",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 135,
          "endLine": 153,
          "className": "DependencyGraphBuilder",
          "signature": "createTaskNode(task: any, isSubtask: boolean, parentId?: string): TaskNode"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateDependencyWeight",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 158,
          "endLine": 170,
          "className": "DependencyGraphBuilder",
          "signature": "calculateDependencyWeight(task: any, depId: string): number"
        },
        {
          "name": "calculateDependencyWeight",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 158,
          "endLine": 170,
          "className": "DependencyGraphBuilder",
          "signature": "calculateDependencyWeight(task: any, depId: string): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateGraphMetadata",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 175,
          "endLine": 199,
          "className": "DependencyGraphBuilder",
          "signature": "calculateGraphMetadata(nodes: TaskNode[], edges: DependencyEdge[]): DependencyGraph['metadata']"
        },
        {
          "name": "calculateGraphMetadata",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 175,
          "endLine": 199,
          "className": "DependencyGraphBuilder",
          "signature": "calculateGraphMetadata(nodes: TaskNode[], edges: DependencyEdge[]): DependencyGraph['metadata']"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "findCriticalPath",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 204,
          "endLine": 222,
          "className": "DependencyGraphBuilder",
          "signature": "findCriticalPath(nodes: TaskNode[], edges: DependencyEdge[]): string[]"
        },
        {
          "name": "findCriticalPath",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 204,
          "endLine": 222,
          "className": "DependencyGraphBuilder",
          "signature": "findCriticalPath(nodes: TaskNode[], edges: DependencyEdge[]): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 213,
          "endLine": 218,
          "className": "DependencyGraphBuilder",
          "signature": "for (const node of highPriorityNodes)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 213,
          "endLine": 218,
          "className": "DependencyGraphBuilder",
          "signature": "for (const node of highPriorityNodes)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 216,
          "endLine": 218,
          "className": "DependencyGraphBuilder",
          "signature": "if (path.length > longestPath.length)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 216,
          "endLine": 218,
          "className": "DependencyGraphBuilder",
          "signature": "if (path.length > longestPath.length)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "findLongestPathFrom",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 227,
          "endLine": 247,
          "className": "DependencyGraphBuilder",
          "signature": "findLongestPathFrom(nodeId: string, edges: DependencyEdge[], visited: string[]): string[]"
        },
        {
          "name": "findLongestPathFrom",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 227,
          "endLine": 247,
          "className": "DependencyGraphBuilder",
          "signature": "findLongestPathFrom(nodeId: string, edges: DependencyEdge[], visited: string[]): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 236,
          "endLine": 243,
          "className": "DependencyGraphBuilder",
          "signature": "for (const edge of outgoingEdges)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 236,
          "endLine": 243,
          "className": "DependencyGraphBuilder",
          "signature": "for (const edge of outgoingEdges)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 240,
          "endLine": 242,
          "className": "DependencyGraphBuilder",
          "signature": "if (fullPath.length > longestPath.length)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 240,
          "endLine": 242,
          "className": "DependencyGraphBuilder",
          "signature": "if (fullPath.length > longestPath.length)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "detectCycles",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 252,
          "endLine": 288,
          "className": "DependencyGraphBuilder",
          "signature": "detectCycles(nodes: TaskNode[], edges: DependencyEdge[]): string[][]"
        },
        {
          "name": "detectCycles",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 252,
          "endLine": 288,
          "className": "DependencyGraphBuilder",
          "signature": "detectCycles(nodes: TaskNode[], edges: DependencyEdge[]): string[][]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 262,
          "endLine": 264,
          "className": "DependencyGraphBuilder",
          "signature": "if (cycleStart !== -1)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 262,
          "endLine": 264,
          "className": "DependencyGraphBuilder",
          "signature": "if (cycleStart !== -1)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 274,
          "endLine": 276,
          "className": "DependencyGraphBuilder",
          "signature": "for (const edge of outgoingEdges)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 274,
          "endLine": 276,
          "className": "DependencyGraphBuilder",
          "signature": "for (const edge of outgoingEdges)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 280,
          "endLine": 284,
          "className": "DependencyGraphBuilder",
          "signature": "for (const node of nodes)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 280,
          "endLine": 284,
          "className": "DependencyGraphBuilder",
          "signature": "for (const node of nodes)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "findOrphanTasks",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 293,
          "endLine": 305,
          "className": "DependencyGraphBuilder",
          "signature": "findOrphanTasks(nodes: TaskNode[], edges: DependencyEdge[]): string[]"
        },
        {
          "name": "findOrphanTasks",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 293,
          "endLine": 305,
          "className": "DependencyGraphBuilder",
          "signature": "findOrphanTasks(nodes: TaskNode[], edges: DependencyEdge[]): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 296,
          "endLine": 299,
          "className": "DependencyGraphBuilder",
          "signature": "for (const edge of dependencyEdges)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 296,
          "endLine": 299,
          "className": "DependencyGraphBuilder",
          "signature": "for (const edge of dependencyEdges)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateGraphComplexity",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 310,
          "endLine": 317,
          "className": "DependencyGraphBuilder",
          "signature": "calculateGraphComplexity(nodes: TaskNode[], edges: DependencyEdge[]): number"
        },
        {
          "name": "calculateGraphComplexity",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 310,
          "endLine": 317,
          "className": "DependencyGraphBuilder",
          "signature": "calculateGraphComplexity(nodes: TaskNode[], edges: DependencyEdge[]): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "createEmptyGraph",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 318,
          "endLine": 331,
          "className": "DependencyGraphBuilder",
          "signature": "createEmptyGraph(): DependencyGraph"
        },
        {
          "name": "createEmptyGraph",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 318,
          "endLine": 331,
          "className": "DependencyGraphBuilder",
          "signature": "createEmptyGraph(): DependencyGraph"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "loadTasksData",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 333,
          "endLine": 351,
          "className": "DependencyGraphBuilder",
          "signature": "loadTasksData(): any"
        },
        {
          "name": "loadTasksData",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 641,
          "endLine": 659,
          "className": "StatusValidator",
          "signature": "loadTasksData(): any"
        },
        {
          "name": "loadTasksData",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 333,
          "endLine": 351,
          "className": "DependencyGraphBuilder",
          "signature": "loadTasksData(): any"
        },
        {
          "name": "loadTasksData",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 641,
          "endLine": 659,
          "className": "StatusValidator",
          "signature": "loadTasksData(): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateSVG",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 376,
          "endLine": 381,
          "className": "SVGVisualizationGenerator",
          "signature": "generateSVG(graph: DependencyGraph, width: number = 1200, height: number = 800): string"
        },
        {
          "name": "generateSVG",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 376,
          "endLine": 381,
          "className": "SVGVisualizationGenerator",
          "signature": "generateSVG(graph: DependencyGraph, width: number = 1200, height: number = 800): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "applyFilters",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 386,
          "endLine": 415,
          "className": "SVGVisualizationGenerator",
          "signature": "applyFilters(graph: DependencyGraph): DependencyGraph"
        },
        {
          "name": "applyFilters",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 386,
          "endLine": 415,
          "className": "SVGVisualizationGenerator",
          "signature": "applyFilters(graph: DependencyGraph): DependencyGraph"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 391,
          "endLine": 395,
          "className": "SVGVisualizationGenerator",
          "signature": "if (this.config.filterByStatus.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 391,
          "endLine": 395,
          "className": "SVGVisualizationGenerator",
          "signature": "if (this.config.filterByStatus.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 398,
          "endLine": 402,
          "className": "SVGVisualizationGenerator",
          "signature": "if (this.config.filterByPriority.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 398,
          "endLine": 402,
          "className": "SVGVisualizationGenerator",
          "signature": "if (this.config.filterByPriority.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 405,
          "endLine": 408,
          "className": "SVGVisualizationGenerator",
          "signature": "if (!this.config.showSubtasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 405,
          "endLine": 408,
          "className": "SVGVisualizationGenerator",
          "signature": "if (!this.config.showSubtasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "switch",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 422,
          "endLine": 433,
          "className": "SVGVisualizationGenerator",
          "signature": "switch (this.config.layout)"
        },
        {
          "name": "switch",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 422,
          "endLine": 433,
          "className": "SVGVisualizationGenerator",
          "signature": "switch (this.config.layout)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 450,
          "endLine": 455,
          "className": "SVGVisualizationGenerator",
          "signature": "for (const [nodeId, level] of levels)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 450,
          "endLine": 455,
          "className": "SVGVisualizationGenerator",
          "signature": "for (const [nodeId, level] of levels)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 459,
          "endLine": 469,
          "className": "SVGVisualizationGenerator",
          "signature": "for (let level = 0; level <= maxLevel; level++)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 459,
          "endLine": 469,
          "className": "SVGVisualizationGenerator",
          "signature": "for (let level = 0; level <= maxLevel; level++)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateNodeLevels",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 478,
          "endLine": 513,
          "className": "SVGVisualizationGenerator",
          "signature": "calculateNodeLevels(nodes: TaskNode[], edges: DependencyEdge[]): Map<string, number>"
        },
        {
          "name": "calculateNodeLevels",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 478,
          "endLine": 513,
          "className": "SVGVisualizationGenerator",
          "signature": "calculateNodeLevels(nodes: TaskNode[], edges: DependencyEdge[]): Map<string, number>"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "while",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 489,
          "endLine": 502,
          "className": "SVGVisualizationGenerator",
          "signature": "while (queue.length > 0)"
        },
        {
          "name": "while",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 489,
          "endLine": 502,
          "className": "SVGVisualizationGenerator",
          "signature": "while (queue.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 506,
          "endLine": 510,
          "className": "SVGVisualizationGenerator",
          "signature": "for (const node of nodes)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 506,
          "endLine": 510,
          "className": "SVGVisualizationGenerator",
          "signature": "for (const node of nodes)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 530,
          "endLine": 592,
          "className": "SVGVisualizationGenerator",
          "signature": "for (let iteration = 0; iteration < 50; iteration++)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 530,
          "endLine": 592,
          "className": "SVGVisualizationGenerator",
          "signature": "for (let iteration = 0; iteration < 50; iteration++)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 539,
          "endLine": 559,
          "className": "SVGVisualizationGenerator",
          "signature": "for (let i = 0; i < graph.nodes.length; i++)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 539,
          "endLine": 559,
          "className": "SVGVisualizationGenerator",
          "signature": "for (let i = 0; i < graph.nodes.length; i++)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 540,
          "endLine": 558,
          "className": "SVGVisualizationGenerator",
          "signature": "for (let j = i + 1; j < graph.nodes.length; j++)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 540,
          "endLine": 558,
          "className": "SVGVisualizationGenerator",
          "signature": "for (let j = i + 1; j < graph.nodes.length; j++)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "createSVGDocument",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 628,
          "endLine": 659,
          "className": "SVGVisualizationGenerator",
          "signature": "createSVGDocument(graph: DependencyGraph, layout: Map<string, { x: number; y: number }>, width: number, height: number): string"
        },
        {
          "name": "createSVGDocument",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 628,
          "endLine": 659,
          "className": "SVGVisualizationGenerator",
          "signature": "createSVGDocument(graph: DependencyGraph, layout: Map<string, { x: number; y: number }>, width: number, height: number): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 8,
      "methods": [
        {
          "name": "createArrowMarkers",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 664,
          "endLine": 673,
          "className": "SVGVisualizationGenerator",
          "signature": "createArrowMarkers(): string"
        },
        {
          "name": "createGradients",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 678,
          "endLine": 685,
          "className": "SVGVisualizationGenerator",
          "signature": "createGradients(): string"
        },
        {
          "name": "createArrowMarkers",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 664,
          "endLine": 673,
          "className": "SVGVisualizationGenerator",
          "signature": "createArrowMarkers(): string"
        },
        {
          "name": "createGradients",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 678,
          "endLine": 685,
          "className": "SVGVisualizationGenerator",
          "signature": "createGradients(): string"
        },
        {
          "name": "generateSignalId",
          "filePath": ".\\packages\\backend\\src\\bots\\signal-processor.ts",
          "startLine": 450,
          "endLine": 452,
          "className": "SignalProcessor",
          "signature": "generateSignalId(botId: string): string"
        },
        {
          "name": "getConnectionKey",
          "filePath": ".\\packages\\backend\\src\\exchanges\\exchange-manager.ts",
          "startLine": 500,
          "endLine": 502,
          "className": "ExchangeManager",
          "signature": "getConnectionKey(exchange: Exchange, apiKeyId: string): string"
        },
        {
          "name": "generateId",
          "filePath": ".\\packages\\backend\\src\\users\\user.repository.ts",
          "startLine": 162,
          "endLine": 164,
          "className": "InMemoryUserRepository",
          "signature": "generateId(): string"
        },
        {
          "name": "generateSessionId",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-server.ts",
          "startLine": 482,
          "endLine": 484,
          "className": "JabbrWebSocketServer",
          "signature": "generateSessionId(): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "drawEdges",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 690,
          "endLine": 729,
          "className": "SVGVisualizationGenerator",
          "signature": "drawEdges(edges: DependencyEdge[], layout: Map<string, { x: number; y: number }>): string"
        },
        {
          "name": "drawEdges",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 690,
          "endLine": 729,
          "className": "SVGVisualizationGenerator",
          "signature": "drawEdges(edges: DependencyEdge[], layout: Map<string, { x: number; y: number }>): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 692,
          "endLine": 725,
          "className": "SVGVisualizationGenerator",
          "signature": "for (const edge of edges)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 692,
          "endLine": 725,
          "className": "SVGVisualizationGenerator",
          "signature": "for (const edge of edges)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 714,
          "endLine": 725,
          "className": "SVGVisualizationGenerator",
          "signature": "if (this.config.showLabels && edge.label)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 714,
          "endLine": 725,
          "className": "SVGVisualizationGenerator",
          "signature": "if (this.config.showLabels && edge.label)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "drawNodes",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 734,
          "endLine": 784,
          "className": "SVGVisualizationGenerator",
          "signature": "drawNodes(nodes: TaskNode[], layout: Map<string, { x: number; y: number }>): string"
        },
        {
          "name": "drawNodes",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 734,
          "endLine": 784,
          "className": "SVGVisualizationGenerator",
          "signature": "drawNodes(nodes: TaskNode[], layout: Map<string, { x: number; y: number }>): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 736,
          "endLine": 780,
          "className": "SVGVisualizationGenerator",
          "signature": "for (const node of nodes)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 736,
          "endLine": 780,
          "className": "SVGVisualizationGenerator",
          "signature": "for (const node of nodes)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 755,
          "endLine": 761,
          "className": "SVGVisualizationGenerator",
          "signature": "if (this.config.showProgress && node.status !== 'pending')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 755,
          "endLine": 761,
          "className": "SVGVisualizationGenerator",
          "signature": "if (this.config.showProgress && node.status !== 'pending')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 764,
          "endLine": 780,
          "className": "SVGVisualizationGenerator",
          "signature": "if (this.config.showLabels)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 764,
          "endLine": 780,
          "className": "SVGVisualizationGenerator",
          "signature": "if (this.config.showLabels)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getNodeColor",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 789,
          "endLine": 800,
          "className": "SVGVisualizationGenerator",
          "signature": "getNodeColor(node: TaskNode): string"
        },
        {
          "name": "getNodeColor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 789,
          "endLine": 800,
          "className": "SVGVisualizationGenerator",
          "signature": "getNodeColor(node: TaskNode): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "switch",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 790,
          "endLine": 799,
          "className": "SVGVisualizationGenerator",
          "signature": "switch (this.config.colorScheme)"
        },
        {
          "name": "switch",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 790,
          "endLine": 799,
          "className": "SVGVisualizationGenerator",
          "signature": "switch (this.config.colorScheme)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getStatusColor",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 801,
          "endLine": 811,
          "className": "SVGVisualizationGenerator",
          "signature": "getStatusColor(status: string): string"
        },
        {
          "name": "getStatusColor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 801,
          "endLine": 811,
          "className": "SVGVisualizationGenerator",
          "signature": "getStatusColor(status: string): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getPriorityColor",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 813,
          "endLine": 821,
          "className": "SVGVisualizationGenerator",
          "signature": "getPriorityColor(priority: string): string"
        },
        {
          "name": "getPriorityColor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 813,
          "endLine": 821,
          "className": "SVGVisualizationGenerator",
          "signature": "getPriorityColor(priority: string): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getComplexityColor",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 823,
          "endLine": 828,
          "className": "SVGVisualizationGenerator",
          "signature": "getComplexityColor(complexity: number): string"
        },
        {
          "name": "getComplexityColor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 823,
          "endLine": 828,
          "className": "SVGVisualizationGenerator",
          "signature": "getComplexityColor(complexity: number): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getNodeStrokeColor",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 830,
          "endLine": 834,
          "className": "SVGVisualizationGenerator",
          "signature": "getNodeStrokeColor(node: TaskNode): string"
        },
        {
          "name": "getNodeStrokeColor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 830,
          "endLine": 834,
          "className": "SVGVisualizationGenerator",
          "signature": "getNodeStrokeColor(node: TaskNode): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getNodeRadius",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 836,
          "endLine": 841,
          "className": "SVGVisualizationGenerator",
          "signature": "getNodeRadius(node: TaskNode): number"
        },
        {
          "name": "getNodeRadius",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 836,
          "endLine": 841,
          "className": "SVGVisualizationGenerator",
          "signature": "getNodeRadius(node: TaskNode): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getEdgeColor",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 843,
          "endLine": 850,
          "className": "SVGVisualizationGenerator",
          "signature": "getEdgeColor(edge: DependencyEdge): string"
        },
        {
          "name": "getEdgeColor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 843,
          "endLine": 850,
          "className": "SVGVisualizationGenerator",
          "signature": "getEdgeColor(edge: DependencyEdge): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getEdgeWidth",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 852,
          "endLine": 856,
          "className": "SVGVisualizationGenerator",
          "signature": "getEdgeWidth(edge: DependencyEdge): number"
        },
        {
          "name": "getEdgeWidth",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 852,
          "endLine": 856,
          "className": "SVGVisualizationGenerator",
          "signature": "getEdgeWidth(edge: DependencyEdge): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getProgressAngle",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 858,
          "endLine": 863,
          "className": "SVGVisualizationGenerator",
          "signature": "getProgressAngle(node: TaskNode): number"
        },
        {
          "name": "getProgressAngle",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 858,
          "endLine": 863,
          "className": "SVGVisualizationGenerator",
          "signature": "getProgressAngle(node: TaskNode): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "drawLegend",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 869,
          "endLine": 892,
          "className": "SVGVisualizationGenerator",
          "signature": "drawLegend(width: number, height: number): string"
        },
        {
          "name": "drawLegend",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 869,
          "endLine": 892,
          "className": "SVGVisualizationGenerator",
          "signature": "drawLegend(width: number, height: number): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "drawStatistics",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 897,
          "endLine": 919,
          "className": "SVGVisualizationGenerator",
          "signature": "drawStatistics(graph: DependencyGraph, width: number): string"
        },
        {
          "name": "drawStatistics",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 897,
          "endLine": 919,
          "className": "SVGVisualizationGenerator",
          "signature": "drawStatistics(graph: DependencyGraph, width: number): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 925,
          "endLine": 928,
          "className": "DependencyVisualizer",
          "signature": "constructor(projectRoot: string)"
        },
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 925,
          "endLine": 928,
          "className": "DependencyVisualizer",
          "signature": "constructor(projectRoot: string)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateVisualization",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 934,
          "endLine": 945,
          "className": "DependencyVisualizer",
          "signature": "generateVisualization(config: Partial<VisualizationConfig> = {}): string"
        },
        {
          "name": "generateVisualization",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 934,
          "endLine": 945,
          "className": "DependencyVisualizer",
          "signature": "generateVisualization(config: Partial<VisualizationConfig> = {}): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateInteractiveVisualization",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 950,
          "endLine": 960,
          "className": "DependencyVisualizer",
          "signature": "generateInteractiveVisualization(config: Partial<VisualizationConfig> = {}): string"
        },
        {
          "name": "generateInteractiveVisualization",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 950,
          "endLine": 960,
          "className": "DependencyVisualizer",
          "signature": "generateInteractiveVisualization(config: Partial<VisualizationConfig> = {}): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getGraph",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 965,
          "endLine": 967,
          "className": "DependencyVisualizer",
          "signature": "getGraph(): DependencyGraph"
        },
        {
          "name": "getGraph",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 965,
          "endLine": 967,
          "className": "DependencyVisualizer",
          "signature": "getGraph(): DependencyGraph"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "analyzeDependencies",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 972,
          "endLine": 1002,
          "className": "DependencyVisualizer",
          "signature": "analyzeDependencies(): any"
        },
        {
          "name": "analyzeDependencies",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 972,
          "endLine": 1002,
          "className": "DependencyVisualizer",
          "signature": "analyzeDependencies(): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "createInteractiveHTML",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 1007,
          "endLine": 1176,
          "className": "DependencyVisualizer",
          "signature": "createInteractiveHTML(graph: DependencyGraph, config: Partial<VisualizationConfig>): string"
        },
        {
          "name": "createInteractiveHTML",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 1007,
          "endLine": 1176,
          "className": "DependencyVisualizer",
          "signature": "createInteractiveHTML(graph: DependencyGraph, config: Partial<VisualizationConfig>): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 1161,
          "endLine": 1165,
          "className": "DependencyVisualizer",
          "signature": "if (isPanning)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 1161,
          "endLine": 1165,
          "className": "DependencyVisualizer",
          "signature": "if (isPanning)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateRecommendations",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 1181,
          "endLine": 1208,
          "className": "DependencyVisualizer",
          "signature": "generateRecommendations(graph: DependencyGraph): string[]"
        },
        {
          "name": "generateRecommendations",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 1181,
          "endLine": 1208,
          "className": "DependencyVisualizer",
          "signature": "generateRecommendations(graph: DependencyGraph): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 1191,
          "endLine": 1193,
          "className": "DependencyVisualizer",
          "signature": "if (graph.metadata.complexity > 7)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 1191,
          "endLine": 1193,
          "className": "DependencyVisualizer",
          "signature": "if (graph.metadata.complexity > 7)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 1198,
          "endLine": 1200,
          "className": "DependencyVisualizer",
          "signature": "if (blockedHighPriority.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 1198,
          "endLine": 1200,
          "className": "DependencyVisualizer",
          "signature": "if (blockedHighPriority.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\bot-trading-cycle-integration.ts",
          "startLine": 552,
          "endLine": 554,
          "className": "BotTradingCycleIntegration",
          "signature": "if (this.errors.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\dependency-visualizer.ts",
          "startLine": 1202,
          "endLine": 1204,
          "className": "DependencyVisualizer",
          "signature": "if (graph.metadata.criticalPath.length > 5)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\dependency-visualizer.ts",
          "startLine": 1202,
          "endLine": 1204,
          "className": "DependencyVisualizer",
          "signature": "if (graph.metadata.criticalPath.length > 5)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster\\src\\index.ts",
          "startLine": 44,
          "endLine": 49,
          "className": "ProgressTrackingSystem",
          "signature": "constructor(projectRoot: string, config?: Partial<DashboardConfig>)"
        },
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\index.ts",
          "startLine": 44,
          "endLine": 49,
          "className": "ProgressTrackingSystem",
          "signature": "constructor(projectRoot: string, config?: Partial<DashboardConfig>)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "startMonitoring",
          "filePath": ".\\.taskmaster\\src\\index.ts",
          "startLine": 121,
          "endLine": 132,
          "className": "ProgressTrackingSystem",
          "signature": "startMonitoring(intervalMinutes: number = 30): NodeJS.Timeout"
        },
        {
          "name": "startMonitoring",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\index.ts",
          "startLine": 121,
          "endLine": 132,
          "className": "ProgressTrackingSystem",
          "signature": "startMonitoring(intervalMinutes: number = 30): NodeJS.Timeout"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "switch",
          "filePath": ".\\.taskmaster\\src\\index.ts",
          "startLine": 139,
          "endLine": 149,
          "className": "ProgressTrackingSystem",
          "signature": "switch (format)"
        },
        {
          "name": "switch",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\index.ts",
          "startLine": 139,
          "endLine": 149,
          "className": "ProgressTrackingSystem",
          "signature": "switch (format)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getProgressTracker",
          "filePath": ".\\.taskmaster\\src\\index.ts",
          "startLine": 154,
          "endLine": 156,
          "className": "ProgressTrackingSystem",
          "signature": "getProgressTracker(): ProgressTracker"
        },
        {
          "name": "getProgressTracker",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\index.ts",
          "startLine": 154,
          "endLine": 156,
          "className": "ProgressTrackingSystem",
          "signature": "getProgressTracker(): ProgressTracker"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getDashboardGenerator",
          "filePath": ".\\.taskmaster\\src\\index.ts",
          "startLine": 157,
          "endLine": 159,
          "className": "ProgressTrackingSystem",
          "signature": "getDashboardGenerator(): DashboardGenerator"
        },
        {
          "name": "getDashboardGenerator",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\index.ts",
          "startLine": 157,
          "endLine": 159,
          "className": "ProgressTrackingSystem",
          "signature": "getDashboardGenerator(): DashboardGenerator"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getMetricsCollector",
          "filePath": ".\\.taskmaster\\src\\index.ts",
          "startLine": 161,
          "endLine": 163,
          "className": "ProgressTrackingSystem",
          "signature": "getMetricsCollector(): MetricsCollector"
        },
        {
          "name": "getMetricsCollector",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\index.ts",
          "startLine": 161,
          "endLine": 163,
          "className": "ProgressTrackingSystem",
          "signature": "getMetricsCollector(): MetricsCollector"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "calculateProjectHealth",
          "filePath": ".\\.taskmaster\\src\\index.ts",
          "startLine": 165,
          "endLine": 197,
          "className": "ProgressTrackingSystem",
          "signature": "calculateProjectHealth(snapshot: MetricsSnapshot): 'excellent' | 'good' | 'warning' | 'critical'"
        },
        {
          "name": "calculateProjectHealth",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 391,
          "endLine": 423,
          "className": "MetricsCollector",
          "signature": "calculateProjectHealth(snapshot: MetricsSnapshot): 'excellent' | 'good' | 'warning' | 'critical'"
        },
        {
          "name": "calculateProjectHealth",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\index.ts",
          "startLine": 165,
          "endLine": 197,
          "className": "ProgressTrackingSystem",
          "signature": "calculateProjectHealth(snapshot: MetricsSnapshot): 'excellent' | 'good' | 'warning' | 'critical'"
        },
        {
          "name": "calculateProjectHealth",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 391,
          "endLine": 423,
          "className": "MetricsCollector",
          "signature": "calculateProjectHealth(snapshot: MetricsSnapshot): 'excellent' | 'good' | 'warning' | 'critical'"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 65,
          "endLine": 69,
          "className": "MetricsCollector",
          "signature": "constructor(projectRoot: string)"
        },
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 65,
          "endLine": 69,
          "className": "MetricsCollector",
          "signature": "constructor(projectRoot: string)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 150,
          "endLine": 157,
          "className": "MetricsCollector",
          "signature": "if (files.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 150,
          "endLine": 157,
          "className": "MetricsCollector",
          "signature": "if (files.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateTrendAnalysis",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 252,
          "endLine": 300,
          "className": "MetricsCollector",
          "signature": "generateTrendAnalysis(days: number = 30): any"
        },
        {
          "name": "generateTrendAnalysis",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 252,
          "endLine": 300,
          "className": "MetricsCollector",
          "signature": "generateTrendAnalysis(days: number = 30): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 260,
          "endLine": 262,
          "className": "MetricsCollector",
          "signature": "if (recentSnapshots.length < 2)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 260,
          "endLine": 262,
          "className": "MetricsCollector",
          "signature": "if (recentSnapshots.length < 2)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateExecutiveSummary",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 305,
          "endLine": 331,
          "className": "MetricsCollector",
          "signature": "generateExecutiveSummary(): any"
        },
        {
          "name": "generateExecutiveSummary",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 305,
          "endLine": 331,
          "className": "MetricsCollector",
          "signature": "generateExecutiveSummary(): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 308,
          "endLine": 310,
          "className": "MetricsCollector",
          "signature": "if (!latest)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 308,
          "endLine": 310,
          "className": "MetricsCollector",
          "signature": "if (!latest)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "exportForIntegration",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 336,
          "endLine": 349,
          "className": "MetricsCollector",
          "signature": "exportForIntegration(format: 'jira' | 'github' | 'azure' = 'github'): any"
        },
        {
          "name": "exportForIntegration",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 336,
          "endLine": 349,
          "className": "MetricsCollector",
          "signature": "exportForIntegration(format: 'jira' | 'github' | 'azure' = 'github'): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "switch",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 338,
          "endLine": 347,
          "className": "MetricsCollector",
          "signature": "switch (format)"
        },
        {
          "name": "switch",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 338,
          "endLine": 347,
          "className": "MetricsCollector",
          "signature": "switch (format)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "saveMetricsSnapshot",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 352,
          "endLine": 365,
          "className": "MetricsCollector",
          "signature": "saveMetricsSnapshot(snapshot: MetricsSnapshot): void"
        },
        {
          "name": "saveMetricsSnapshot",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 352,
          "endLine": 365,
          "className": "MetricsCollector",
          "signature": "saveMetricsSnapshot(snapshot: MetricsSnapshot): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "loadMetricsHistory",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 367,
          "endLine": 372,
          "className": "MetricsCollector",
          "signature": "loadMetricsHistory(): MetricsSnapshot[]"
        },
        {
          "name": "loadMetricsHistory",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 367,
          "endLine": 372,
          "className": "MetricsCollector",
          "signature": "loadMetricsHistory(): MetricsSnapshot[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getLatestMetrics",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 374,
          "endLine": 377,
          "className": "MetricsCollector",
          "signature": "getLatestMetrics(): MetricsSnapshot | null"
        },
        {
          "name": "getLatestMetrics",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 374,
          "endLine": 377,
          "className": "MetricsCollector",
          "signature": "getLatestMetrics(): MetricsSnapshot | null"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateTrend",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 379,
          "endLine": 389,
          "className": "MetricsCollector",
          "signature": "calculateTrend(values: number[]): 'improving' | 'declining' | 'stable'"
        },
        {
          "name": "calculateTrend",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 379,
          "endLine": 389,
          "className": "MetricsCollector",
          "signature": "calculateTrend(values: number[]): 'improving' | 'declining' | 'stable'"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateExecutiveRecommendations",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 425,
          "endLine": 445,
          "className": "MetricsCollector",
          "signature": "generateExecutiveRecommendations(latest: MetricsSnapshot, trends: any): string[]"
        },
        {
          "name": "generateExecutiveRecommendations",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 425,
          "endLine": 445,
          "className": "MetricsCollector",
          "signature": "generateExecutiveRecommendations(latest: MetricsSnapshot, trends: any): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 428,
          "endLine": 430,
          "className": "MetricsCollector",
          "signature": "if (latest.projectMetrics.blockedTasks > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 455,
          "endLine": 457,
          "className": "ProgressTracker",
          "signature": "if (projectMetrics.blockedTasks > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 428,
          "endLine": 430,
          "className": "MetricsCollector",
          "signature": "if (latest.projectMetrics.blockedTasks > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 455,
          "endLine": 457,
          "className": "ProgressTracker",
          "signature": "if (projectMetrics.blockedTasks > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 432,
          "endLine": 434,
          "className": "MetricsCollector",
          "signature": "if (trends.velocity?.trend === 'declining')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 432,
          "endLine": 434,
          "className": "MetricsCollector",
          "signature": "if (trends.velocity?.trend === 'declining')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 440,
          "endLine": 442,
          "className": "MetricsCollector",
          "signature": "if (latest.projectMetrics.overallProgress < 50 && latest.projectMetrics.velocityPerWeek < 3)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 440,
          "endLine": 442,
          "className": "MetricsCollector",
          "signature": "if (latest.projectMetrics.overallProgress < 50 && latest.projectMetrics.velocityPerWeek < 3)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "formatForGitHub",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 447,
          "endLine": 471,
          "className": "MetricsCollector",
          "signature": "formatForGitHub(summary: any): any"
        },
        {
          "name": "formatForGitHub",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 447,
          "endLine": 471,
          "className": "MetricsCollector",
          "signature": "formatForGitHub(summary: any): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "formatForJira",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 473,
          "endLine": 479,
          "className": "MetricsCollector",
          "signature": "formatForJira(summary: any): any"
        },
        {
          "name": "formatForJira",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 473,
          "endLine": 479,
          "className": "MetricsCollector",
          "signature": "formatForJira(summary: any): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "formatForAzure",
          "filePath": ".\\.taskmaster\\src\\metrics-collector.ts",
          "startLine": 481,
          "endLine": 488,
          "className": "MetricsCollector",
          "signature": "formatForAzure(summary: any): any"
        },
        {
          "name": "formatForAzure",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\metrics-collector.ts",
          "startLine": 481,
          "endLine": 488,
          "className": "MetricsCollector",
          "signature": "formatForAzure(summary: any): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 80,
          "endLine": 84,
          "className": "MilestoneTracker",
          "signature": "constructor(projectRoot: string)"
        },
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 80,
          "endLine": 84,
          "className": "MilestoneTracker",
          "signature": "constructor(projectRoot: string)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "loadMilestones",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 90,
          "endLine": 101,
          "className": "MilestoneTracker",
          "signature": "loadMilestones(): Milestone[]"
        },
        {
          "name": "loadMilestones",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 90,
          "endLine": 101,
          "className": "MilestoneTracker",
          "signature": "loadMilestones(): Milestone[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "saveMilestones",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 106,
          "endLine": 116,
          "className": "MilestoneTracker",
          "signature": "saveMilestones(milestones: Milestone[]): void"
        },
        {
          "name": "saveMilestones",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 106,
          "endLine": 116,
          "className": "MilestoneTracker",
          "signature": "saveMilestones(milestones: Milestone[]): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "loadTasks",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 121,
          "endLine": 145,
          "className": "MilestoneTracker",
          "signature": "loadTasks(): any"
        },
        {
          "name": "loadTasks",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 121,
          "endLine": 145,
          "className": "MilestoneTracker",
          "signature": "loadTasks(): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "createMilestone",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 150,
          "endLine": 172,
          "className": "MilestoneTracker",
          "signature": "createMilestone(\r\n    title: string,\r\n    description: string,\r\n    targetDate: string,\r\n    requirements: Omit<MilestoneRequirement, 'id' | 'status'>[],\r\n    tags: string[] = []\r\n  ): Milestone"
        },
        {
          "name": "createMilestone",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 150,
          "endLine": 172,
          "className": "MilestoneTracker",
          "signature": "createMilestone(\r\n    title: string,\r\n    description: string,\r\n    targetDate: string,\r\n    requirements: Omit<MilestoneRequirement, 'id' | 'status'>[],\r\n    tags: string[] = []\r\n  ): Milestone"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "updateMilestoneStatus",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 183,
          "endLine": 197,
          "className": "MilestoneTracker",
          "signature": "updateMilestoneStatus(milestoneId: string, status: Milestone['status']): void"
        },
        {
          "name": "updateMilestoneStatus",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 183,
          "endLine": 197,
          "className": "MilestoneTracker",
          "signature": "updateMilestoneStatus(milestoneId: string, status: Milestone['status']): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 6,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 186,
          "endLine": 188,
          "className": "MilestoneTracker",
          "signature": "if (!milestone)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 210,
          "endLine": 212,
          "className": "MilestoneTracker",
          "signature": "if (!milestone)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 265,
          "endLine": 267,
          "className": "MilestoneTracker",
          "signature": "if (!milestone)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 186,
          "endLine": 188,
          "className": "MilestoneTracker",
          "signature": "if (!milestone)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 210,
          "endLine": 212,
          "className": "MilestoneTracker",
          "signature": "if (!milestone)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 265,
          "endLine": 267,
          "className": "MilestoneTracker",
          "signature": "if (!milestone)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 192,
          "endLine": 194,
          "className": "MilestoneTracker",
          "signature": "if (status === 'completed')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 192,
          "endLine": 194,
          "className": "MilestoneTracker",
          "signature": "if (status === 'completed')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "updateRequirement",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 202,
          "endLine": 221,
          "className": "MilestoneTracker",
          "signature": "updateRequirement(\r\n    milestoneId: string,\r\n    requirementId: string,\r\n    status: MilestoneRequirement['status'],\r\n    evidence?: string\r\n  ): void"
        },
        {
          "name": "updateRequirement",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 202,
          "endLine": 221,
          "className": "MilestoneTracker",
          "signature": "updateRequirement(\r\n    milestoneId: string,\r\n    requirementId: string,\r\n    status: MilestoneRequirement['status'],\r\n    evidence?: string\r\n  ): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 216,
          "endLine": 218,
          "className": "MilestoneTracker",
          "signature": "if (!requirement)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 216,
          "endLine": 218,
          "className": "MilestoneTracker",
          "signature": "if (!requirement)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 221,
          "endLine": 223,
          "className": "MilestoneTracker",
          "signature": "if (evidence)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 221,
          "endLine": 223,
          "className": "MilestoneTracker",
          "signature": "if (evidence)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "initializeMetrics",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 231,
          "endLine": 257,
          "className": "MilestoneTracker",
          "signature": "initializeMetrics(targetDate: string): MilestoneMetrics"
        },
        {
          "name": "initializeMetrics",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 231,
          "endLine": 257,
          "className": "MilestoneTracker",
          "signature": "initializeMetrics(targetDate: string): MilestoneMetrics"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateMilestoneReport",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 262,
          "endLine": 287,
          "className": "MilestoneTracker",
          "signature": "generateMilestoneReport(milestoneId: string): MilestoneReport"
        },
        {
          "name": "generateMilestoneReport",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 262,
          "endLine": 287,
          "className": "MilestoneTracker",
          "signature": "generateMilestoneReport(milestoneId: string): MilestoneReport"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "updateMilestoneMetrics",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 292,
          "endLine": 317,
          "className": "MilestoneTracker",
          "signature": "updateMilestoneMetrics(milestone: Milestone): void"
        },
        {
          "name": "updateMilestoneMetrics",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 292,
          "endLine": 317,
          "className": "MilestoneTracker",
          "signature": "updateMilestoneMetrics(milestone: Milestone): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getMilestoneTasks",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 322,
          "endLine": 331,
          "className": "MilestoneTracker",
          "signature": "getMilestoneTasks(milestone: Milestone, tasks: any[]): any[]"
        },
        {
          "name": "getMilestoneTasks",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 322,
          "endLine": 331,
          "className": "MilestoneTracker",
          "signature": "getMilestoneTasks(milestone: Milestone, tasks: any[]): any[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "isTaskInMilestoneTimeframe",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 336,
          "endLine": 339,
          "className": "MilestoneTracker",
          "signature": "isTaskInMilestoneTimeframe(task: any, milestone: Milestone): boolean"
        },
        {
          "name": "isTaskInMilestoneTimeframe",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 336,
          "endLine": 339,
          "className": "MilestoneTracker",
          "signature": "isTaskInMilestoneTimeframe(task: any, milestone: Milestone): boolean"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateProgress",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 344,
          "endLine": 354,
          "className": "MilestoneTracker",
          "signature": "calculateProgress(milestone: Milestone): MilestoneReport['progress']"
        },
        {
          "name": "calculateProgress",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 344,
          "endLine": 354,
          "className": "MilestoneTracker",
          "signature": "calculateProgress(milestone: Milestone): MilestoneReport['progress']"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateQualityScore",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 359,
          "endLine": 367,
          "className": "MilestoneTracker",
          "signature": "calculateQualityScore(milestone: Milestone): number"
        },
        {
          "name": "calculateQualityScore",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 359,
          "endLine": 367,
          "className": "MilestoneTracker",
          "signature": "calculateQualityScore(milestone: Milestone): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "isOnTrack",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 372,
          "endLine": 378,
          "className": "MilestoneTracker",
          "signature": "isOnTrack(milestone: Milestone): boolean"
        },
        {
          "name": "isOnTrack",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 372,
          "endLine": 378,
          "className": "MilestoneTracker",
          "signature": "isOnTrack(milestone: Milestone): boolean"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getTimeProgress",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 383,
          "endLine": 392,
          "className": "MilestoneTracker",
          "signature": "getTimeProgress(milestone: Milestone): number"
        },
        {
          "name": "getTimeProgress",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 383,
          "endLine": 392,
          "className": "MilestoneTracker",
          "signature": "getTimeProgress(milestone: Milestone): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateInsights",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 397,
          "endLine": 428,
          "className": "MilestoneTracker",
          "signature": "generateInsights(milestone: Milestone, progress: MilestoneReport['progress']): string[]"
        },
        {
          "name": "generateInsights",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 397,
          "endLine": 428,
          "className": "MilestoneTracker",
          "signature": "generateInsights(milestone: Milestone, progress: MilestoneReport['progress']): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 399,
          "endLine": 401,
          "className": "MilestoneTracker",
          "signature": "if (progress.overall > 80)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 399,
          "endLine": 401,
          "className": "MilestoneTracker",
          "signature": "if (progress.overall > 80)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 409,
          "endLine": 411,
          "className": "MilestoneTracker",
          "signature": "if (milestone.metrics.timeline.daysRemaining < 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 409,
          "endLine": 411,
          "className": "MilestoneTracker",
          "signature": "if (milestone.metrics.timeline.daysRemaining < 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 415,
          "endLine": 417,
          "className": "MilestoneTracker",
          "signature": "if (progress.quality < 60)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 415,
          "endLine": 417,
          "className": "MilestoneTracker",
          "signature": "if (progress.quality < 60)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 421,
          "endLine": 423,
          "className": "MilestoneTracker",
          "signature": "if (completedReqs === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 421,
          "endLine": 423,
          "className": "MilestoneTracker",
          "signature": "if (completedReqs === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateRecommendations",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 433,
          "endLine": 460,
          "className": "MilestoneTracker",
          "signature": "generateRecommendations(milestone: Milestone, progress: MilestoneReport['progress']): string[]"
        },
        {
          "name": "generateRecommendations",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 433,
          "endLine": 460,
          "className": "MilestoneTracker",
          "signature": "generateRecommendations(milestone: Milestone, progress: MilestoneReport['progress']): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 435,
          "endLine": 438,
          "className": "MilestoneTracker",
          "signature": "if (progress.overall < 50 && milestone.metrics.timeline.daysRemaining < 14)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 435,
          "endLine": 438,
          "className": "MilestoneTracker",
          "signature": "if (progress.overall < 50 && milestone.metrics.timeline.daysRemaining < 14)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 440,
          "endLine": 442,
          "className": "MilestoneTracker",
          "signature": "if (milestone.metrics.taskCount.blocked > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 440,
          "endLine": 442,
          "className": "MilestoneTracker",
          "signature": "if (milestone.metrics.taskCount.blocked > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 444,
          "endLine": 447,
          "className": "MilestoneTracker",
          "signature": "if (progress.quality < 70)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 444,
          "endLine": 447,
          "className": "MilestoneTracker",
          "signature": "if (progress.quality < 70)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 451,
          "endLine": 453,
          "className": "MilestoneTracker",
          "signature": "if (pendingReqs > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 465,
          "endLine": 467,
          "className": "ProgressTracker",
          "signature": "if (highComplexityTasks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 451,
          "endLine": 453,
          "className": "MilestoneTracker",
          "signature": "if (pendingReqs > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 465,
          "endLine": 467,
          "className": "ProgressTracker",
          "signature": "if (highComplexityTasks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 454,
          "endLine": 456,
          "className": "MilestoneTracker",
          "signature": "if (milestone.metrics.taskCount.inProgress > milestone.metrics.taskCount.completed)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 454,
          "endLine": 456,
          "className": "MilestoneTracker",
          "signature": "if (milestone.metrics.taskCount.inProgress > milestone.metrics.taskCount.completed)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "identifyRisks",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 465,
          "endLine": 490,
          "className": "MilestoneTracker",
          "signature": "identifyRisks(milestone: Milestone, progress: MilestoneReport['progress']): string[]"
        },
        {
          "name": "identifyRisks",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 465,
          "endLine": 490,
          "className": "MilestoneTracker",
          "signature": "identifyRisks(milestone: Milestone, progress: MilestoneReport['progress']): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 467,
          "endLine": 469,
          "className": "MilestoneTracker",
          "signature": "if (!milestone.metrics.timeline.isOnTrack)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 467,
          "endLine": 469,
          "className": "MilestoneTracker",
          "signature": "if (!milestone.metrics.timeline.isOnTrack)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 471,
          "endLine": 473,
          "className": "MilestoneTracker",
          "signature": "if (milestone.metrics.taskCount.blocked > milestone.metrics.taskCount.completed / 2)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 471,
          "endLine": 473,
          "className": "MilestoneTracker",
          "signature": "if (milestone.metrics.taskCount.blocked > milestone.metrics.taskCount.completed / 2)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 475,
          "endLine": 477,
          "className": "MilestoneTracker",
          "signature": "if (progress.quality < 50)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 475,
          "endLine": 477,
          "className": "MilestoneTracker",
          "signature": "if (progress.quality < 50)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 481,
          "endLine": 483,
          "className": "MilestoneTracker",
          "signature": "if (failedReqs > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 481,
          "endLine": 483,
          "className": "MilestoneTracker",
          "signature": "if (failedReqs > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 484,
          "endLine": 486,
          "className": "MilestoneTracker",
          "signature": "if (milestone.metrics.timeline.daysRemaining < 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 484,
          "endLine": 486,
          "className": "MilestoneTracker",
          "signature": "if (milestone.metrics.timeline.daysRemaining < 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateNextSteps",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 495,
          "endLine": 525,
          "className": "MilestoneTracker",
          "signature": "generateNextSteps(milestone: Milestone, progress: MilestoneReport['progress']): string[]"
        },
        {
          "name": "generateNextSteps",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 495,
          "endLine": 525,
          "className": "MilestoneTracker",
          "signature": "generateNextSteps(milestone: Milestone, progress: MilestoneReport['progress']): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 499,
          "endLine": 501,
          "className": "MilestoneTracker",
          "signature": "if (milestone.metrics.taskCount.blocked > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 499,
          "endLine": 501,
          "className": "MilestoneTracker",
          "signature": "if (milestone.metrics.taskCount.blocked > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 504,
          "endLine": 506,
          "className": "MilestoneTracker",
          "signature": "if (pendingReqs.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 504,
          "endLine": 506,
          "className": "MilestoneTracker",
          "signature": "if (pendingReqs.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 507,
          "endLine": 509,
          "className": "MilestoneTracker",
          "signature": "if (progress.overall < 80)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 507,
          "endLine": 509,
          "className": "MilestoneTracker",
          "signature": "if (progress.overall < 80)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 511,
          "endLine": 513,
          "className": "MilestoneTracker",
          "signature": "if (progress.quality < 70)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 511,
          "endLine": 513,
          "className": "MilestoneTracker",
          "signature": "if (progress.quality < 70)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 515,
          "endLine": 517,
          "className": "MilestoneTracker",
          "signature": "if (milestone.status === 'planned')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 515,
          "endLine": 517,
          "className": "MilestoneTracker",
          "signature": "if (milestone.status === 'planned')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 519,
          "endLine": 521,
          "className": "MilestoneTracker",
          "signature": "if (progress.overall > 90 && progress.requirements > 90)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 519,
          "endLine": 521,
          "className": "MilestoneTracker",
          "signature": "if (progress.overall > 90 && progress.requirements > 90)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "listMilestones",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 530,
          "endLine": 532,
          "className": "MilestoneTracker",
          "signature": "listMilestones(): Milestone[]"
        },
        {
          "name": "listMilestones",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 530,
          "endLine": 532,
          "className": "MilestoneTracker",
          "signature": "listMilestones(): Milestone[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getMilestone",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 537,
          "endLine": 540,
          "className": "MilestoneTracker",
          "signature": "getMilestone(milestoneId: string): Milestone | undefined"
        },
        {
          "name": "getMilestone",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 537,
          "endLine": 540,
          "className": "MilestoneTracker",
          "signature": "getMilestone(milestoneId: string): Milestone | undefined"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "deleteMilestone",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 545,
          "endLine": 554,
          "className": "MilestoneTracker",
          "signature": "deleteMilestone(milestoneId: string): void"
        },
        {
          "name": "deleteMilestone",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 545,
          "endLine": 554,
          "className": "MilestoneTracker",
          "signature": "deleteMilestone(milestoneId: string): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\milestone-tracker.ts",
          "startLine": 548,
          "endLine": 550,
          "className": "MilestoneTracker",
          "signature": "if (filteredMilestones.length === milestones.length)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\milestone-tracker.ts",
          "startLine": 548,
          "endLine": 550,
          "className": "MilestoneTracker",
          "signature": "if (filteredMilestones.length === milestones.length)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 71,
          "endLine": 76,
          "className": "ProgressTracker",
          "signature": "constructor(projectRoot: string)"
        },
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 71,
          "endLine": 76,
          "className": "ProgressTracker",
          "signature": "constructor(projectRoot: string)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateTaskMetrics",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 82,
          "endLine": 111,
          "className": "ProgressTracker",
          "signature": "calculateTaskMetrics(tasksData: any): TaskMetrics[]"
        },
        {
          "name": "calculateTaskMetrics",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 82,
          "endLine": 111,
          "className": "ProgressTracker",
          "signature": "calculateTaskMetrics(tasksData: any): TaskMetrics[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 86,
          "endLine": 107,
          "className": "ProgressTracker",
          "signature": "for (const task of tasksData.tasks)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 86,
          "endLine": 107,
          "className": "ProgressTracker",
          "signature": "for (const task of tasksData.tasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateProjectMetrics",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 116,
          "endLine": 142,
          "className": "ProgressTracker",
          "signature": "calculateProjectMetrics(taskMetrics: TaskMetrics[]): ProjectMetrics"
        },
        {
          "name": "calculateProjectMetrics",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 116,
          "endLine": 142,
          "className": "ProgressTracker",
          "signature": "calculateProjectMetrics(taskMetrics: TaskMetrics[]): ProjectMetrics"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateDashboard",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 147,
          "endLine": 178,
          "className": "ProgressTracker",
          "signature": "generateDashboard(projectMetrics: ProjectMetrics, taskMetrics: TaskMetrics[]): any"
        },
        {
          "name": "generateDashboard",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 147,
          "endLine": 178,
          "className": "ProgressTracker",
          "signature": "generateDashboard(projectMetrics: ProjectMetrics, taskMetrics: TaskMetrics[]): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "startTimeTracking",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 183,
          "endLine": 194,
          "className": "ProgressTracker",
          "signature": "startTimeTracking(taskId: string, description: string, category: string): void"
        },
        {
          "name": "startTimeTracking",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 183,
          "endLine": 194,
          "className": "ProgressTracker",
          "signature": "startTimeTracking(taskId: string, description: string, category: string): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "stopTimeTracking",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 199,
          "endLine": 213,
          "className": "ProgressTracker",
          "signature": "stopTimeTracking(taskId: string): void"
        },
        {
          "name": "stopTimeTracking",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 199,
          "endLine": 213,
          "className": "ProgressTracker",
          "signature": "stopTimeTracking(taskId: string): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 204,
          "endLine": 211,
          "className": "ProgressTracker",
          "signature": "if (activeEntry)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 204,
          "endLine": 211,
          "className": "ProgressTracker",
          "signature": "if (activeEntry)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "exportMetrics",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 218,
          "endLine": 241,
          "className": "ProgressTracker",
          "signature": "exportMetrics(format: 'json' | 'csv' | 'xlsx' = 'json'): string"
        },
        {
          "name": "exportMetrics",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 218,
          "endLine": 241,
          "className": "ProgressTracker",
          "signature": "exportMetrics(format: 'json' | 'csv' | 'xlsx' = 'json'): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "switch",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 229,
          "endLine": 239,
          "className": "ProgressTracker",
          "signature": "switch (format)"
        },
        {
          "name": "switch",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 229,
          "endLine": 239,
          "className": "ProgressTracker",
          "signature": "switch (format)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateCompletionPercentage",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 244,
          "endLine": 255,
          "className": "ProgressTracker",
          "signature": "calculateCompletionPercentage(task: any): number"
        },
        {
          "name": "calculateCompletionPercentage",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 244,
          "endLine": 255,
          "className": "ProgressTracker",
          "signature": "calculateCompletionPercentage(task: any): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 248,
          "endLine": 251,
          "className": "ProgressTracker",
          "signature": "if (task.subtasks && task.subtasks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 248,
          "endLine": 251,
          "className": "ProgressTracker",
          "signature": "if (task.subtasks && task.subtasks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateSubtaskProgress",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 257,
          "endLine": 264,
          "className": "ProgressTracker",
          "signature": "calculateSubtaskProgress(subtasks: any[]): any"
        },
        {
          "name": "calculateSubtaskProgress",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 257,
          "endLine": 264,
          "className": "ProgressTracker",
          "signature": "calculateSubtaskProgress(subtasks: any[]): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getActualHours",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 266,
          "endLine": 270,
          "className": "ProgressTracker",
          "signature": "getActualHours(taskId: string): number"
        },
        {
          "name": "getActualHours",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 266,
          "endLine": 270,
          "className": "ProgressTracker",
          "signature": "getActualHours(taskId: string): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateEstimatedCompletion",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 272,
          "endLine": 284,
          "className": "ProgressTracker",
          "signature": "calculateEstimatedCompletion(taskMetrics: TaskMetrics[]): string"
        },
        {
          "name": "calculateEstimatedCompletion",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 272,
          "endLine": 284,
          "className": "ProgressTracker",
          "signature": "calculateEstimatedCompletion(taskMetrics: TaskMetrics[]): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateVelocity",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 286,
          "endLine": 299,
          "className": "ProgressTracker",
          "signature": "calculateVelocity(taskMetrics: TaskMetrics[]): number"
        },
        {
          "name": "calculateVelocity",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 286,
          "endLine": 299,
          "className": "ProgressTracker",
          "signature": "calculateVelocity(taskMetrics: TaskMetrics[]): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 306,
          "endLine": 320,
          "className": "ProgressTracker",
          "signature": "for (let i = 29; i >= 0; i--)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 306,
          "endLine": 320,
          "className": "ProgressTracker",
          "signature": "for (let i = 29; i >= 0; i--)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateCriticalPath",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 325,
          "endLine": 335,
          "className": "ProgressTracker",
          "signature": "calculateCriticalPath(taskMetrics: TaskMetrics[]): string[]"
        },
        {
          "name": "calculateCriticalPath",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 325,
          "endLine": 335,
          "className": "ProgressTracker",
          "signature": "calculateCriticalPath(taskMetrics: TaskMetrics[]): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "identifyRiskFactors",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 337,
          "endLine": 374,
          "className": "ProgressTracker",
          "signature": "identifyRiskFactors(taskMetrics: TaskMetrics[]): ProjectMetrics['riskFactors']"
        },
        {
          "name": "identifyRiskFactors",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 337,
          "endLine": 374,
          "className": "ProgressTracker",
          "signature": "identifyRiskFactors(taskMetrics: TaskMetrics[]): ProjectMetrics['riskFactors']"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 343,
          "endLine": 350,
          "className": "ProgressTracker",
          "signature": "if (tasksWithManyDeps.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 343,
          "endLine": 350,
          "className": "ProgressTracker",
          "signature": "if (tasksWithManyDeps.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 354,
          "endLine": 361,
          "className": "ProgressTracker",
          "signature": "if (overdueTasks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 354,
          "endLine": 361,
          "className": "ProgressTracker",
          "signature": "if (overdueTasks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 365,
          "endLine": 372,
          "className": "ProgressTracker",
          "signature": "if (blockedTasks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 365,
          "endLine": 372,
          "className": "ProgressTracker",
          "signature": "if (blockedTasks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculatePriorityBreakdown",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 376,
          "endLine": 382,
          "className": "ProgressTracker",
          "signature": "calculatePriorityBreakdown(taskMetrics: TaskMetrics[]): any"
        },
        {
          "name": "calculatePriorityBreakdown",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 376,
          "endLine": 382,
          "className": "ProgressTracker",
          "signature": "calculatePriorityBreakdown(taskMetrics: TaskMetrics[]): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateComplexityDistribution",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 384,
          "endLine": 392,
          "className": "ProgressTracker",
          "signature": "calculateComplexityDistribution(taskMetrics: TaskMetrics[]): any"
        },
        {
          "name": "calculateComplexityDistribution",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 384,
          "endLine": 392,
          "className": "ProgressTracker",
          "signature": "calculateComplexityDistribution(taskMetrics: TaskMetrics[]): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 399,
          "endLine": 415,
          "className": "ProgressTracker",
          "signature": "for (let i = 7; i >= 0; i--)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 399,
          "endLine": 415,
          "className": "ProgressTracker",
          "signature": "for (let i = 7; i >= 0; i--)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getOverdueTasks",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 420,
          "endLine": 425,
          "className": "ProgressTracker",
          "signature": "getOverdueTasks(taskMetrics: TaskMetrics[]): TaskMetrics[]"
        },
        {
          "name": "getOverdueTasks",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 420,
          "endLine": 425,
          "className": "ProgressTracker",
          "signature": "getOverdueTasks(taskMetrics: TaskMetrics[]): TaskMetrics[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 434,
          "endLine": 440,
          "className": "ProgressTracker",
          "signature": "if (!dependency)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 434,
          "endLine": 440,
          "className": "ProgressTracker",
          "signature": "if (!dependency)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateRecommendations",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 452,
          "endLine": 473,
          "className": "ProgressTracker",
          "signature": "generateRecommendations(projectMetrics: ProjectMetrics, taskMetrics: TaskMetrics[]): string[]"
        },
        {
          "name": "generateRecommendations",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 452,
          "endLine": 473,
          "className": "ProgressTracker",
          "signature": "generateRecommendations(projectMetrics: ProjectMetrics, taskMetrics: TaskMetrics[]): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 459,
          "endLine": 461,
          "className": "ProgressTracker",
          "signature": "if (projectMetrics.velocityPerWeek < 2)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 459,
          "endLine": 461,
          "className": "ProgressTracker",
          "signature": "if (projectMetrics.velocityPerWeek < 2)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 468,
          "endLine": 470,
          "className": "ProgressTracker",
          "signature": "if (projectMetrics.overallProgress < 20)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 468,
          "endLine": 470,
          "className": "ProgressTracker",
          "signature": "if (projectMetrics.overallProgress < 20)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "loadTasksData",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 479,
          "endLine": 497,
          "className": "ProgressTracker",
          "signature": "loadTasksData(): any"
        },
        {
          "name": "loadTasksData",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 479,
          "endLine": 497,
          "className": "ProgressTracker",
          "signature": "loadTasksData(): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "loadTimeTrackingData",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 498,
          "endLine": 503,
          "className": "ProgressTracker",
          "signature": "loadTimeTrackingData(): TimeTrackingEntry[]"
        },
        {
          "name": "loadTimeTrackingData",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 498,
          "endLine": 503,
          "className": "ProgressTracker",
          "signature": "loadTimeTrackingData(): TimeTrackingEntry[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "saveTimeTrackingData",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 505,
          "endLine": 507,
          "className": "ProgressTracker",
          "signature": "saveTimeTrackingData(data: TimeTrackingEntry[]): void"
        },
        {
          "name": "saveTimeTrackingData",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 505,
          "endLine": 507,
          "className": "ProgressTracker",
          "signature": "saveTimeTrackingData(data: TimeTrackingEntry[]): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "convertToCSV",
          "filePath": ".\\.taskmaster\\src\\progress-tracker.ts",
          "startLine": 509,
          "endLine": 523,
          "className": "ProgressTracker",
          "signature": "convertToCSV(taskMetrics: TaskMetrics[]): string"
        },
        {
          "name": "convertToCSV",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\progress-tracker.ts",
          "startLine": 509,
          "endLine": 523,
          "className": "ProgressTracker",
          "signature": "convertToCSV(taskMetrics: TaskMetrics[]): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 76,
          "endLine": 108,
          "className": "StatusValidator",
          "signature": "constructor(projectRoot: string, config?: Partial<ValidationConfig>)"
        },
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 76,
          "endLine": 108,
          "className": "StatusValidator",
          "signature": "constructor(projectRoot: string, config?: Partial<ValidationConfig>)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "validateAllTasks",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 114,
          "endLine": 253,
          "className": "StatusValidator",
          "signature": "validateAllTasks(): ValidationReport"
        },
        {
          "name": "validateAllTasks",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 114,
          "endLine": 253,
          "className": "StatusValidator",
          "signature": "validateAllTasks(): ValidationReport"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 135,
          "endLine": 137,
          "className": "StatusValidator",
          "signature": "if (!tasksData.tasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 135,
          "endLine": 137,
          "className": "StatusValidator",
          "signature": "if (!tasksData.tasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 141,
          "endLine": 244,
          "className": "StatusValidator",
          "signature": "for (const task of tasksData.tasks)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 141,
          "endLine": 244,
          "className": "StatusValidator",
          "signature": "for (const task of tasksData.tasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 146,
          "endLine": 193,
          "className": "StatusValidator",
          "signature": "for (const rule of this.rules)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 146,
          "endLine": 193,
          "className": "StatusValidator",
          "signature": "for (const rule of this.rules)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 151,
          "endLine": 191,
          "className": "StatusValidator",
          "signature": "if (!result.isValid)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 151,
          "endLine": 191,
          "className": "StatusValidator",
          "signature": "if (!result.isValid)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 167,
          "endLine": 183,
          "className": "StatusValidator",
          "signature": "if (this.config.autoFix.enabled && result.autoFix)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 167,
          "endLine": 183,
          "className": "StatusValidator",
          "signature": "if (this.config.autoFix.enabled && result.autoFix)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 169,
          "endLine": 171,
          "className": "StatusValidator",
          "signature": "if (this.config.autoFix.backupBeforeFix)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 169,
          "endLine": 171,
          "className": "StatusValidator",
          "signature": "if (this.config.autoFix.backupBeforeFix)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 176,
          "endLine": 178,
          "className": "StatusValidator",
          "signature": "if (this.config.notifications.onAutoFix)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 176,
          "endLine": 178,
          "className": "StatusValidator",
          "signature": "if (this.config.notifications.onAutoFix)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 186,
          "endLine": 188,
          "className": "StatusValidator",
          "signature": "if (rule.severity === 'error')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 186,
          "endLine": 188,
          "className": "StatusValidator",
          "signature": "if (rule.severity === 'error')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 194,
          "endLine": 196,
          "className": "StatusValidator",
          "signature": "if (taskValid)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 194,
          "endLine": 196,
          "className": "StatusValidator",
          "signature": "if (taskValid)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 202,
          "endLine": 243,
          "className": "StatusValidator",
          "signature": "if (task.subtasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 202,
          "endLine": 243,
          "className": "StatusValidator",
          "signature": "if (task.subtasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 203,
          "endLine": 242,
          "className": "StatusValidator",
          "signature": "for (const subtask of task.subtasks)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 203,
          "endLine": 242,
          "className": "StatusValidator",
          "signature": "for (const subtask of task.subtasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 206,
          "endLine": 234,
          "className": "StatusValidator",
          "signature": "for (const rule of this.rules)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 206,
          "endLine": 234,
          "className": "StatusValidator",
          "signature": "for (const rule of this.rules)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 212,
          "endLine": 233,
          "className": "StatusValidator",
          "signature": "if (!result.isValid)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 212,
          "endLine": 233,
          "className": "StatusValidator",
          "signature": "if (!result.isValid)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 228,
          "endLine": 230,
          "className": "StatusValidator",
          "signature": "if (rule.severity === 'error')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 228,
          "endLine": 230,
          "className": "StatusValidator",
          "signature": "if (rule.severity === 'error')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 236,
          "endLine": 238,
          "className": "StatusValidator",
          "signature": "if (subtaskValid)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 236,
          "endLine": 238,
          "className": "StatusValidator",
          "signature": "if (subtaskValid)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "validateTask",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 258,
          "endLine": 287,
          "className": "StatusValidator",
          "signature": "validateTask(taskId: string): ValidationResult[]"
        },
        {
          "name": "validateTask",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 258,
          "endLine": 287,
          "className": "StatusValidator",
          "signature": "validateTask(taskId: string): ValidationResult[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 267,
          "endLine": 272,
          "className": "StatusValidator",
          "signature": "if (!task)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 267,
          "endLine": 272,
          "className": "StatusValidator",
          "signature": "if (!task)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 275,
          "endLine": 283,
          "className": "StatusValidator",
          "signature": "for (const rule of this.rules)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 275,
          "endLine": 283,
          "className": "StatusValidator",
          "signature": "for (const rule of this.rules)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 281,
          "endLine": 283,
          "className": "StatusValidator",
          "signature": "if (!result.isValid)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 281,
          "endLine": 283,
          "className": "StatusValidator",
          "signature": "if (!result.isValid)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "initializeValidationRules",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 292,
          "endLine": 601,
          "className": "StatusValidator",
          "signature": "initializeValidationRules(): ValidationRule[]"
        },
        {
          "name": "initializeValidationRules",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 292,
          "endLine": 601,
          "className": "StatusValidator",
          "signature": "initializeValidationRules(): ValidationRule[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 300,
          "endLine": 302,
          "className": "StatusValidator",
          "signature": "if (task.status !== 'done')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 429,
          "endLine": 431,
          "className": "StatusValidator",
          "signature": "if (task.status !== 'done')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 300,
          "endLine": 302,
          "className": "StatusValidator",
          "signature": "if (task.status !== 'done')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 429,
          "endLine": 431,
          "className": "StatusValidator",
          "signature": "if (task.status !== 'done')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 303,
          "endLine": 305,
          "className": "StatusValidator",
          "signature": "if (!task.dependencies || task.dependencies.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 303,
          "endLine": 305,
          "className": "StatusValidator",
          "signature": "if (!task.dependencies || task.dependencies.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 312,
          "endLine": 322,
          "className": "StatusValidator",
          "signature": "if (incompleteDeps.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 406,
          "endLine": 416,
          "className": "StatusValidator",
          "signature": "if (dependentTasks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 312,
          "endLine": 322,
          "className": "StatusValidator",
          "signature": "if (incompleteDeps.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 406,
          "endLine": 416,
          "className": "StatusValidator",
          "signature": "if (dependentTasks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 336,
          "endLine": 373,
          "className": "StatusValidator",
          "signature": "if (task.subtasks && task.subtasks.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 336,
          "endLine": 373,
          "className": "StatusValidator",
          "signature": "if (task.subtasks && task.subtasks.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 342,
          "endLine": 352,
          "className": "StatusValidator",
          "signature": "if (completionRate === 1 && task.status !== 'done')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 342,
          "endLine": 352,
          "className": "StatusValidator",
          "signature": "if (completionRate === 1 && task.status !== 'done')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 353,
          "endLine": 359,
          "className": "StatusValidator",
          "signature": "if (completionRate === 0 && task.status === 'done')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 353,
          "endLine": 359,
          "className": "StatusValidator",
          "signature": "if (completionRate === 0 && task.status === 'done')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 361,
          "endLine": 371,
          "className": "StatusValidator",
          "signature": "if (completionRate > 0 && completionRate < 1 && task.status === 'pending')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 361,
          "endLine": 371,
          "className": "StatusValidator",
          "signature": "if (completionRate > 0 && completionRate < 1 && task.status === 'pending')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 385,
          "endLine": 387,
          "className": "StatusValidator",
          "signature": "if (task.status !== 'blocked')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 385,
          "endLine": 387,
          "className": "StatusValidator",
          "signature": "if (task.status !== 'blocked')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 390,
          "endLine": 400,
          "className": "StatusValidator",
          "signature": "if (!task.blockers || task.blockers.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 390,
          "endLine": 400,
          "className": "StatusValidator",
          "signature": "if (!task.blockers || task.blockers.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 447,
          "endLine": 457,
          "className": "StatusValidator",
          "signature": "if (!task.testStrategy)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 447,
          "endLine": 457,
          "className": "StatusValidator",
          "signature": "if (!task.testStrategy)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 469,
          "endLine": 471,
          "className": "StatusValidator",
          "signature": "if (!task.subtasks || task.subtasks.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 469,
          "endLine": 471,
          "className": "StatusValidator",
          "signature": "if (!task.subtasks || task.subtasks.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 477,
          "endLine": 489,
          "className": "StatusValidator",
          "signature": "if (uniqueStatuses.length === 1 && uniqueStatuses[0] === 'done')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 477,
          "endLine": 489,
          "className": "StatusValidator",
          "signature": "if (uniqueStatuses.length === 1 && uniqueStatuses[0] === 'done')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 478,
          "endLine": 488,
          "className": "StatusValidator",
          "signature": "if (task.status !== 'done' && task.status !== 'review')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 478,
          "endLine": 488,
          "className": "StatusValidator",
          "signature": "if (task.status !== 'done' && task.status !== 'review')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 492,
          "endLine": 504,
          "className": "StatusValidator",
          "signature": "if (uniqueStatuses.length === 1 && uniqueStatuses[0] === 'pending')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 492,
          "endLine": 504,
          "className": "StatusValidator",
          "signature": "if (uniqueStatuses.length === 1 && uniqueStatuses[0] === 'pending')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 493,
          "endLine": 503,
          "className": "StatusValidator",
          "signature": "if (task.status !== 'pending')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 493,
          "endLine": 503,
          "className": "StatusValidator",
          "signature": "if (task.status !== 'pending')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 516,
          "endLine": 518,
          "className": "StatusValidator",
          "signature": "if (!task.endDate)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 516,
          "endLine": 518,
          "className": "StatusValidator",
          "signature": "if (!task.endDate)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 522,
          "endLine": 533,
          "className": "StatusValidator",
          "signature": "if (deadline < now && task.status !== 'done' && task.status !== 'cancelled')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 522,
          "endLine": 533,
          "className": "StatusValidator",
          "signature": "if (deadline < now && task.status !== 'done' && task.status !== 'cancelled')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 537,
          "endLine": 547,
          "className": "StatusValidator",
          "signature": "if (deadline < now && task.status === 'pending')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 537,
          "endLine": 547,
          "className": "StatusValidator",
          "signature": "if (deadline < now && task.status === 'pending')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 560,
          "endLine": 576,
          "className": "StatusValidator",
          "signature": "if (task.priority === 'high' && task.status === 'pending')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 560,
          "endLine": 576,
          "className": "StatusValidator",
          "signature": "if (task.priority === 'high' && task.status === 'pending')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 563,
          "endLine": 574,
          "className": "StatusValidator",
          "signature": "if (daysSinceUpdate > 3)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 563,
          "endLine": 574,
          "className": "StatusValidator",
          "signature": "if (daysSinceUpdate > 3)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 579,
          "endLine": 595,
          "className": "StatusValidator",
          "signature": "if (task.priority === 'critical')"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 579,
          "endLine": 595,
          "className": "StatusValidator",
          "signature": "if (task.priority === 'critical')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 583,
          "endLine": 593,
          "className": "StatusValidator",
          "signature": "if (dependentTasks.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 583,
          "endLine": 593,
          "className": "StatusValidator",
          "signature": "if (dependentTasks.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "findTask",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 602,
          "endLine": 616,
          "className": "StatusValidator",
          "signature": "findTask(tasks: any[], taskId: string): any"
        },
        {
          "name": "findTask",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 602,
          "endLine": 616,
          "className": "StatusValidator",
          "signature": "findTask(tasks: any[], taskId: string): any"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 604,
          "endLine": 615,
          "className": "StatusValidator",
          "signature": "for (const task of tasks)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 604,
          "endLine": 615,
          "className": "StatusValidator",
          "signature": "for (const task of tasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 608,
          "endLine": 614,
          "className": "StatusValidator",
          "signature": "if (task.subtasks)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 608,
          "endLine": 614,
          "className": "StatusValidator",
          "signature": "if (task.subtasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 609,
          "endLine": 613,
          "className": "StatusValidator",
          "signature": "for (const subtask of task.subtasks)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 609,
          "endLine": 613,
          "className": "StatusValidator",
          "signature": "for (const subtask of task.subtasks)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 610,
          "endLine": 612,
          "className": "StatusValidator",
          "signature": "if (`${task.id}.${subtask.id}` === taskId)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 610,
          "endLine": 612,
          "className": "StatusValidator",
          "signature": "if (`${task.id}.${subtask.id}` === taskId)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateRecommendations",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 618,
          "endLine": 639,
          "className": "StatusValidator",
          "signature": "generateRecommendations(report: ValidationReport): string[]"
        },
        {
          "name": "generateRecommendations",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 618,
          "endLine": 639,
          "className": "StatusValidator",
          "signature": "generateRecommendations(report: ValidationReport): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 621,
          "endLine": 623,
          "className": "StatusValidator",
          "signature": "if (report.summary.errors > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 621,
          "endLine": 623,
          "className": "StatusValidator",
          "signature": "if (report.summary.errors > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 625,
          "endLine": 627,
          "className": "StatusValidator",
          "signature": "if (report.summary.warnings > 5)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 625,
          "endLine": 627,
          "className": "StatusValidator",
          "signature": "if (report.summary.warnings > 5)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 629,
          "endLine": 631,
          "className": "StatusValidator",
          "signature": "if (report.summary.autoFixed > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 629,
          "endLine": 631,
          "className": "StatusValidator",
          "signature": "if (report.summary.autoFixed > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 635,
          "endLine": 637,
          "className": "StatusValidator",
          "signature": "if (errorRate > 0.1)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 635,
          "endLine": 637,
          "className": "StatusValidator",
          "signature": "if (errorRate > 0.1)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "saveTasksData",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 661,
          "endLine": 664,
          "className": "StatusValidator",
          "signature": "saveTasksData(data: any): void"
        },
        {
          "name": "saveTasksData",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 661,
          "endLine": 664,
          "className": "StatusValidator",
          "signature": "saveTasksData(data: any): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "saveValidationReport",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 666,
          "endLine": 670,
          "className": "StatusValidator",
          "signature": "saveValidationReport(report: ValidationReport): void"
        },
        {
          "name": "saveValidationReport",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 666,
          "endLine": 670,
          "className": "StatusValidator",
          "signature": "saveValidationReport(report: ValidationReport): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "createBackup",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 672,
          "endLine": 680,
          "className": "StatusValidator",
          "signature": "createBackup(): void"
        },
        {
          "name": "createBackup",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 672,
          "endLine": 680,
          "className": "StatusValidator",
          "signature": "createBackup(): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "validator",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 299,
          "endLine": 326,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        },
        {
          "name": "validator",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 299,
          "endLine": 326,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "validator",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 334,
          "endLine": 376,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        },
        {
          "name": "validator",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 334,
          "endLine": 376,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 8,
      "methods": [
        {
          "name": "autoFix",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 347,
          "endLine": 350,
          "className": "StatusValidator",
          "signature": "autoFix: () => {"
        },
        {
          "name": "autoFix",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 367,
          "endLine": 370,
          "className": "StatusValidator",
          "signature": "autoFix: () => {"
        },
        {
          "name": "autoFix",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 483,
          "endLine": 486,
          "className": "StatusValidator",
          "signature": "autoFix: () => {"
        },
        {
          "name": "autoFix",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 498,
          "endLine": 501,
          "className": "StatusValidator",
          "signature": "autoFix: () => {"
        },
        {
          "name": "autoFix",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 347,
          "endLine": 350,
          "className": "StatusValidator",
          "signature": "autoFix: () => {"
        },
        {
          "name": "autoFix",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 367,
          "endLine": 370,
          "className": "StatusValidator",
          "signature": "autoFix: () => {"
        },
        {
          "name": "autoFix",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 483,
          "endLine": 486,
          "className": "StatusValidator",
          "signature": "autoFix: () => {"
        },
        {
          "name": "autoFix",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 498,
          "endLine": 501,
          "className": "StatusValidator",
          "signature": "autoFix: () => {"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "validator",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 384,
          "endLine": 420,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        },
        {
          "name": "validator",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 384,
          "endLine": 420,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "validator",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 428,
          "endLine": 460,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        },
        {
          "name": "validator",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 428,
          "endLine": 460,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "validator",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 468,
          "endLine": 507,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        },
        {
          "name": "validator",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 468,
          "endLine": 507,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "validator",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 515,
          "endLine": 550,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        },
        {
          "name": "validator",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 515,
          "endLine": 550,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "validator",
          "filePath": ".\\.taskmaster\\src\\status-validator.ts",
          "startLine": 558,
          "endLine": 598,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        },
        {
          "name": "validator",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\src\\status-validator.ts",
          "startLine": 558,
          "endLine": 598,
          "className": "StatusValidator",
          "signature": "validator: (task, allTasks, context) => {"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 379,
          "endLine": 397,
          "className": "UnifiedProjectAnalyzer",
          "signature": "constructor(projectRoot: string, config?: any)"
        },
        {
          "name": "constructor",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 379,
          "endLine": 397,
          "className": "UnifiedProjectAnalyzer",
          "signature": "constructor(projectRoot: string, config?: any)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateProjectId",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 479,
          "endLine": 483,
          "className": "UnifiedProjectAnalyzer",
          "signature": "generateProjectId(): string"
        },
        {
          "name": "generateProjectId",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 479,
          "endLine": 483,
          "className": "UnifiedProjectAnalyzer",
          "signature": "generateProjectId(): string"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "initializePhases",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 484,
          "endLine": 502,
          "className": "UnifiedProjectAnalyzer",
          "signature": "initializePhases()"
        },
        {
          "name": "initializePhases",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 484,
          "endLine": 502,
          "className": "UnifiedProjectAnalyzer",
          "signature": "initializePhases()"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "initializeMetrics",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 504,
          "endLine": 512,
          "className": "UnifiedProjectAnalyzer",
          "signature": "initializeMetrics(): UnifiedMetrics"
        },
        {
          "name": "initializeMetrics",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 504,
          "endLine": 512,
          "className": "UnifiedProjectAnalyzer",
          "signature": "initializeMetrics(): UnifiedMetrics"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "initializeScores",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 514,
          "endLine": 525,
          "className": "UnifiedProjectAnalyzer",
          "signature": "initializeScores(): QualityScores"
        },
        {
          "name": "initializeScores",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 514,
          "endLine": 525,
          "className": "UnifiedProjectAnalyzer",
          "signature": "initializeScores(): QualityScores"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateFinalScores",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 719,
          "endLine": 743,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateFinalScores(result: UnifiedAnalysisResult): void"
        },
        {
          "name": "calculateFinalScores",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 719,
          "endLine": 743,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateFinalScores(result: UnifiedAnalysisResult): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateConsolidationPlan",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 748,
          "endLine": 757,
          "className": "UnifiedProjectAnalyzer",
          "signature": "generateConsolidationPlan(result: UnifiedAnalysisResult): void"
        },
        {
          "name": "generateConsolidationPlan",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 748,
          "endLine": 757,
          "className": "UnifiedProjectAnalyzer",
          "signature": "generateConsolidationPlan(result: UnifiedAnalysisResult): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 765,
          "endLine": 774,
          "className": "UnifiedProjectAnalyzer",
          "signature": "for (const item of items)"
        },
        {
          "name": "for",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 765,
          "endLine": 774,
          "className": "UnifiedProjectAnalyzer",
          "signature": "for (const item of items)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateArchitectureScore",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 912,
          "endLine": 914,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateArchitectureScore(findings: ArchitecturalFindings): number"
        },
        {
          "name": "calculateArchitectureScore",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 912,
          "endLine": 914,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateArchitectureScore(findings: ArchitecturalFindings): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateCodeQualityScore",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 915,
          "endLine": 917,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateCodeQualityScore(findings: QualityFindings): number"
        },
        {
          "name": "calculateCodeQualityScore",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 915,
          "endLine": 917,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateCodeQualityScore(findings: QualityFindings): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculatePerformanceScore",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 919,
          "endLine": 921,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculatePerformanceScore(findings: PerformanceFindings): number"
        },
        {
          "name": "calculatePerformanceScore",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 919,
          "endLine": 921,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculatePerformanceScore(findings: PerformanceFindings): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateMaintainabilityScore",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 923,
          "endLine": 925,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateMaintainabilityScore(result: UnifiedAnalysisResult): number"
        },
        {
          "name": "calculateMaintainabilityScore",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 923,
          "endLine": 925,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateMaintainabilityScore(result: UnifiedAnalysisResult): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateCompleteness",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 927,
          "endLine": 930,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateCompleteness(result: UnifiedAnalysisResult): number"
        },
        {
          "name": "calculateCompleteness",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 927,
          "endLine": 930,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateCompleteness(result: UnifiedAnalysisResult): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateClarity",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 932,
          "endLine": 935,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateClarity(result: UnifiedAnalysisResult): number"
        },
        {
          "name": "calculateClarity",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 932,
          "endLine": 935,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateClarity(result: UnifiedAnalysisResult): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculateDocumentationScore",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 937,
          "endLine": 939,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateDocumentationScore(result: UnifiedAnalysisResult): number"
        },
        {
          "name": "calculateDocumentationScore",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 937,
          "endLine": 939,
          "className": "UnifiedProjectAnalyzer",
          "signature": "calculateDocumentationScore(result: UnifiedAnalysisResult): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "identifyConsolidationOpportunities",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 943,
          "endLine": 959,
          "className": "UnifiedProjectAnalyzer",
          "signature": "identifyConsolidationOpportunities(duplications: DuplicationFindings): ConsolidationOpportunity[]"
        },
        {
          "name": "identifyConsolidationOpportunities",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 943,
          "endLine": 959,
          "className": "UnifiedProjectAnalyzer",
          "signature": "identifyConsolidationOpportunities(duplications: DuplicationFindings): ConsolidationOpportunity[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "createIntegrationPlan",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 960,
          "endLine": 984,
          "className": "UnifiedProjectAnalyzer",
          "signature": "createIntegrationPlan(result: UnifiedAnalysisResult): IntegrationStep[]"
        },
        {
          "name": "createIntegrationPlan",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 960,
          "endLine": 984,
          "className": "UnifiedProjectAnalyzer",
          "signature": "createIntegrationPlan(result: UnifiedAnalysisResult): IntegrationStep[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateRecommendations",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 986,
          "endLine": 1020,
          "className": "UnifiedProjectAnalyzer",
          "signature": "generateRecommendations(result: UnifiedAnalysisResult): Recommendation[]"
        },
        {
          "name": "generateRecommendations",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 986,
          "endLine": 1020,
          "className": "UnifiedProjectAnalyzer",
          "signature": "generateRecommendations(result: UnifiedAnalysisResult): Recommendation[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 991,
          "endLine": 1003,
          "className": "UnifiedProjectAnalyzer",
          "signature": "if (result.findings.duplications.exactFileDuplicates.count > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 991,
          "endLine": 1003,
          "className": "UnifiedProjectAnalyzer",
          "signature": "if (result.findings.duplications.exactFileDuplicates.count > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 1006,
          "endLine": 1018,
          "className": "UnifiedProjectAnalyzer",
          "signature": "if (result.findings.architectural.violations.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 1006,
          "endLine": 1018,
          "className": "UnifiedProjectAnalyzer",
          "signature": "if (result.findings.architectural.violations.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "generateAIRecommendations",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 1022,
          "endLine": 1038,
          "className": "UnifiedProjectAnalyzer",
          "signature": "generateAIRecommendations(result: UnifiedAnalysisResult): string[]"
        },
        {
          "name": "generateAIRecommendations",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 1022,
          "endLine": 1038,
          "className": "UnifiedProjectAnalyzer",
          "signature": "generateAIRecommendations(result: UnifiedAnalysisResult): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 1025,
          "endLine": 1027,
          "className": "UnifiedProjectAnalyzer",
          "signature": "if (result.scores.documentation < 70)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 1025,
          "endLine": 1027,
          "className": "UnifiedProjectAnalyzer",
          "signature": "if (result.scores.documentation < 70)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 1029,
          "endLine": 1031,
          "className": "UnifiedProjectAnalyzer",
          "signature": "if (result.findings.duplications.exactFileDuplicates.count > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 1029,
          "endLine": 1031,
          "className": "UnifiedProjectAnalyzer",
          "signature": "if (result.findings.duplications.exactFileDuplicates.count > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\unified-analyzer.ts",
          "startLine": 1033,
          "endLine": 1035,
          "className": "UnifiedProjectAnalyzer",
          "signature": "if (result.scores.architecture < 80)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\unified-analyzer.ts",
          "startLine": 1033,
          "endLine": 1035,
          "className": "UnifiedProjectAnalyzer",
          "signature": "if (result.scores.architecture < 80)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\integration-phase.ts",
          "startLine": 254,
          "endLine": 256,
          "className": "IntegrationPhase",
          "signature": "if (understanding.architecturalAnalysis?.components?.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\integration-phase.ts",
          "startLine": 257,
          "endLine": 259,
          "className": "IntegrationPhase",
          "signature": "if (understanding.fileStructure?.keyDirectories?.length > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\docs\\examples\\example-sma-strategy.ts",
          "startLine": 121,
          "endLine": 128,
          "className": "ExampleSMAStrategy",
          "signature": "if (!candles || candles.length < this.config.slowPeriod)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-crossover-strategy.ts",
          "startLine": 93,
          "endLine": 100,
          "className": "SMACrossoverStrategy",
          "signature": "if (!candles || candles.length < this.config.slowPeriod)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\docs\\examples\\example-sma-strategy.ts",
          "startLine": 135,
          "endLine": 142,
          "className": "ExampleSMAStrategy",
          "signature": "if (!signal || signal.signal === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-crossover-strategy.ts",
          "startLine": 107,
          "endLine": 114,
          "className": "SMACrossoverStrategy",
          "signature": "if (!signal || signal.signal === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "cleanup",
          "filePath": ".\\docs\\examples\\example-sma-strategy.ts",
          "startLine": 248,
          "endLine": 251,
          "className": "ExampleSMAStrategy",
          "signature": "cleanup(context: StrategyContext): Promise<void>"
        },
        {
          "name": "cleanup",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-crossover-strategy.ts",
          "startLine": 217,
          "endLine": 221,
          "className": "SMACrossoverStrategy",
          "signature": "cleanup(context: StrategyContext): Promise<void>"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\docs\\examples\\example-sma-strategy.ts",
          "startLine": 265,
          "endLine": 277,
          "className": "ExampleSMAStrategy",
          "signature": "if (data.fastPeriod >= data.slowPeriod)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-crossover-strategy.ts",
          "startLine": 235,
          "endLine": 247,
          "className": "SMACrossoverStrategy",
          "signature": "if (data.fastPeriod >= data.slowPeriod)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getState",
          "filePath": ".\\docs\\examples\\example-sma-strategy.ts",
          "startLine": 341,
          "endLine": 343,
          "className": "ExampleSMAStrategy",
          "signature": "getState(): StrategyState"
        },
        {
          "name": "getState",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-crossover-strategy.ts",
          "startLine": 336,
          "endLine": 338,
          "className": "SMACrossoverStrategy",
          "signature": "getState(): StrategyState"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "setState",
          "filePath": ".\\docs\\examples\\example-sma-strategy.ts",
          "startLine": 348,
          "endLine": 354,
          "className": "ExampleSMAStrategy",
          "signature": "setState(state: Partial<StrategyState>): void"
        },
        {
          "name": "setState",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-crossover-strategy.ts",
          "startLine": 343,
          "endLine": 349,
          "className": "SMACrossoverStrategy",
          "signature": "setState(state: Partial<StrategyState>): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.controller.ts",
          "startLine": 9,
          "endLine": 11,
          "className": "AuthController",
          "signature": "constructor()"
        },
        {
          "name": "constructor",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.middleware.ts",
          "startLine": 19,
          "endLine": 21,
          "className": "AuthMiddleware",
          "signature": "constructor()"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.controller.ts",
          "startLine": 124,
          "endLine": 135,
          "className": "AuthController",
          "signature": "if (error instanceof Error && error.name === 'ZodError')"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.controller.ts",
          "startLine": 221,
          "endLine": 232,
          "className": "AuthController",
          "signature": "if (error instanceof Error && error.name === 'ZodError')"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.controller.ts",
          "startLine": 254,
          "endLine": 265,
          "className": "AuthController",
          "signature": "if (!userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.controller.ts",
          "startLine": 315,
          "endLine": 326,
          "className": "AuthController",
          "signature": "if (!userId)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.middleware.ts",
          "startLine": 46,
          "endLine": 56,
          "className": "AuthMiddleware",
          "signature": "if (!decoded)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.middleware.ts",
          "startLine": 241,
          "endLine": 251,
          "className": "AuthMiddleware",
          "signature": "if (!decoded)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 255,
          "endLine": 257,
          "className": "BotManager",
          "signature": "if (!runtime)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 284,
          "endLine": 286,
          "className": "BotManager",
          "signature": "if (!runtime)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 410,
          "endLine": 412,
          "className": "BotManager",
          "signature": "if (!loadResult.success || !loadResult.strategy)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\strategy-execution-integration.ts",
          "startLine": 161,
          "endLine": 163,
          "className": "StrategyExecutionIntegration",
          "signature": "if (!loadResult.success || !loadResult.strategy)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 689,
          "endLine": 694,
          "className": "BotManager",
          "signature": "if (!runtime)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 766,
          "endLine": 771,
          "className": "BotManager",
          "signature": "if (!runtime)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 698,
          "endLine": 703,
          "className": "BotManager",
          "signature": "if (!bot)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 775,
          "endLine": 780,
          "className": "BotManager",
          "signature": "if (!bot)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 712,
          "endLine": 717,
          "className": "BotManager",
          "signature": "if (!switchSuccess)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 784,
          "endLine": 789,
          "className": "BotManager",
          "signature": "if (!rollbackSuccess)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getAvailableStrategies",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 819,
          "endLine": 825,
          "className": "BotManager",
          "signature": "getAvailableStrategies(): Array<"
        },
        {
          "name": "getAvailableStrategies",
          "filePath": ".\\packages\\backend\\src\\bots\\dynamic-strategy-loader.ts",
          "startLine": 418,
          "endLine": 424,
          "className": "DynamicStrategyLoader",
          "signature": "getAvailableStrategies(): Array<"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "info",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 497,
          "endLine": 499,
          "className": "BotManager",
          "signature": "info: (message: string, data?: any) => {"
        },
        {
          "name": "warn",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 500,
          "endLine": 502,
          "className": "BotManager",
          "signature": "warn: (message: string, data?: any) => {"
        },
        {
          "name": "error",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 503,
          "endLine": 505,
          "className": "BotManager",
          "signature": "error: (message: string, data?: any) => {"
        },
        {
          "name": "debug",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 506,
          "endLine": 508,
          "className": "BotManager",
          "signature": "debug: (message: string, data?: any) => {"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 10,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-reliability-system.ts",
          "startLine": 229,
          "endLine": 232,
          "className": "BotReliabilitySystem",
          "signature": "if (this.running)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-reliability-system.ts",
          "startLine": 261,
          "endLine": 264,
          "className": "BotReliabilitySystem",
          "signature": "if (!this.running)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-watchdog.ts",
          "startLine": 86,
          "endLine": 89,
          "className": "BotWatchdog",
          "signature": "if (this.running)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-watchdog.ts",
          "startLine": 107,
          "endLine": 110,
          "className": "BotWatchdog",
          "signature": "if (!this.running)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\application-monitor.service.ts",
          "startLine": 204,
          "endLine": 207,
          "className": "ApplicationMonitorService",
          "signature": "if (this.isRunning)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\database-monitor.service.ts",
          "startLine": 145,
          "endLine": 148,
          "className": "DatabaseMonitorService",
          "signature": "if (this.isMonitoring)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\health-check.service.ts",
          "startLine": 82,
          "endLine": 85,
          "className": "HealthCheckService",
          "signature": "if (this.isRunning)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\metrics-collector.service.ts",
          "startLine": 140,
          "endLine": 143,
          "className": "MetricsCollectorService",
          "signature": "if (this.isRunning)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 94,
          "endLine": 97,
          "className": "MonitoringService",
          "signature": "if (this.isRunning)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 103,
          "endLine": 106,
          "className": "SystemMonitorService",
          "signature": "if (this.isRunning)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "isRunning",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-reliability-system.ts",
          "startLine": 569,
          "endLine": 571,
          "className": "BotReliabilitySystem",
          "signature": "isRunning(): boolean"
        },
        {
          "name": "isRunning",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-watchdog.ts",
          "startLine": 522,
          "endLine": 524,
          "className": "BotWatchdog",
          "signature": "isRunning(): boolean"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 17,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 30,
          "endLine": 37,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 76,
          "endLine": 83,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 152,
          "endLine": 159,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 203,
          "endLine": 210,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 271,
          "endLine": 278,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 332,
          "endLine": 339,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 375,
          "endLine": 382,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 418,
          "endLine": 425,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 461,
          "endLine": 468,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 504,
          "endLine": 511,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 557,
          "endLine": 564,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 595,
          "endLine": 602,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 627,
          "endLine": 634,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 697,
          "endLine": 704,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 790,
          "endLine": 797,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 851,
          "endLine": 858,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 887,
          "endLine": 894,
          "className": "BotController",
          "signature": "if (!req.user?.userId)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 11,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 162,
          "endLine": 169,
          "className": "BotController",
          "signature": "if (!botId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 213,
          "endLine": 220,
          "className": "BotController",
          "signature": "if (!botId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 281,
          "endLine": 288,
          "className": "BotController",
          "signature": "if (!botId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 342,
          "endLine": 349,
          "className": "BotController",
          "signature": "if (!botId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 385,
          "endLine": 392,
          "className": "BotController",
          "signature": "if (!botId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 428,
          "endLine": 435,
          "className": "BotController",
          "signature": "if (!botId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 471,
          "endLine": 478,
          "className": "BotController",
          "signature": "if (!botId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 514,
          "endLine": 521,
          "className": "BotController",
          "signature": "if (!botId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 707,
          "endLine": 714,
          "className": "BotController",
          "signature": "if (!botId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 800,
          "endLine": 807,
          "className": "BotController",
          "signature": "if (!botId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 897,
          "endLine": 904,
          "className": "BotController",
          "signature": "if (!botId)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 172,
          "endLine": 179,
          "className": "BotController",
          "signature": "if (!bot)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 230,
          "endLine": 237,
          "className": "BotController",
          "signature": "if (!bot)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 524,
          "endLine": 531,
          "className": "BotController",
          "signature": "if (!bot)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 753,
          "endLine": 760,
          "className": "BotController",
          "signature": "if (!result.success)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 815,
          "endLine": 822,
          "className": "BotController",
          "signature": "if (!result.success)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 194,
          "endLine": 196,
          "className": "BotService",
          "signature": "if (result.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 432,
          "endLine": 434,
          "className": "BotService",
          "signature": "if (result.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\graceful-shutdown-manager.ts",
          "startLine": 329,
          "endLine": 332,
          "className": "GracefulShutdownManager",
          "signature": "if (pendingOrders.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\graceful-shutdown-manager.ts",
          "startLine": 371,
          "endLine": 374,
          "className": "GracefulShutdownManager",
          "signature": "if (openPositions.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 237,
          "endLine": 239,
          "className": "StateManager",
          "signature": "if (result.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\exchanges\\exchange-manager.ts",
          "startLine": 325,
          "endLine": 327,
          "className": "ExchangeManager",
          "signature": "if (result.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 261,
          "endLine": 263,
          "className": "StateManager",
          "signature": "if (calculatedChecksum !== snapshot.checksum)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 422,
          "endLine": 424,
          "className": "StateManager",
          "signature": "if (calculatedChecksum !== backup.snapshot.checksum)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 397,
          "endLine": 399,
          "className": "StateManager",
          "signature": "if (result.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 411,
          "endLine": 413,
          "className": "StateManager",
          "signature": "if (result.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\strategy-execution-integration.ts",
          "startLine": 254,
          "endLine": 257,
          "className": "StrategyExecutionIntegration",
          "signature": "if (this.executionTimeoutId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\strategy-execution-integration.ts",
          "startLine": 305,
          "endLine": 308,
          "className": "StrategyExecutionIntegration",
          "signature": "if (this.executionTimeoutId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\strategy-execution-integration.ts",
          "startLine": 585,
          "endLine": 588,
          "className": "StrategyExecutionIntegration",
          "signature": "if (this.executionTimeoutId)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\strategy-execution-integration.ts",
          "startLine": 345,
          "endLine": 347,
          "className": "StrategyExecutionIntegration",
          "signature": "if (!this.currentStrategy)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\strategy-execution-integration.ts",
          "startLine": 483,
          "endLine": 485,
          "className": "StrategyExecutionIntegration",
          "signature": "if (!this.currentStrategy)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 280,
          "endLine": 285,
          "className": "TradeDecisionEngine",
          "signature": "if (this.config.enablePositionManagement)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 343,
          "endLine": 348,
          "className": "TradeDecisionEngine",
          "signature": "if (this.config.enablePositionManagement)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 282,
          "endLine": 284,
          "className": "TradeDecisionEngine",
          "signature": "if (position)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 345,
          "endLine": 347,
          "className": "TradeDecisionEngine",
          "signature": "if (position)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-executor.ts",
          "startLine": 410,
          "endLine": 412,
          "className": "TradeExecutor",
          "signature": "if (!request.bot.exchangeApiKeyId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-executor.ts",
          "startLine": 458,
          "endLine": 460,
          "className": "TradeExecutor",
          "signature": "if (!bot.exchange || !bot.exchangeApiKeyId)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 5,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-executor.ts",
          "startLine": 415,
          "endLine": 417,
          "className": "TradeExecutor",
          "signature": "if (!request.amount || request.amount <= 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\ema-indicator.ts",
          "startLine": 70,
          "endLine": 72,
          "className": "EMAIndicator",
          "signature": "if (smoothing <= 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\ema-indicator.ts",
          "startLine": 175,
          "endLine": 177,
          "className": "EMAIndicator",
          "signature": "if (smoothing <= 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\scripts\\signal-processing-validation.ts",
          "startLine": 77,
          "endLine": 79,
          "signature": "if (sma20.length === 0 || ema20.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\scripts\\signal-processing-validation.ts",
          "startLine": 83,
          "endLine": 85,
          "signature": "if (rsi14.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "getConfig",
          "filePath": ".\\packages\\backend\\src\\config\\config-manager.ts",
          "startLine": 221,
          "endLine": 223,
          "className": "ConfigManager",
          "signature": "getConfig(): Config"
        },
        {
          "name": "getConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 65,
          "endLine": 67,
          "className": "ImprovedSMASignalProcessor",
          "signature": "getConfig(): SMASignalConfig"
        },
        {
          "name": "getConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 65,
          "endLine": 67,
          "className": "SMASignalProcessor",
          "signature": "getConfig(): SMASignalConfig"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\config\\config-manager.ts",
          "startLine": 327,
          "endLine": 329,
          "className": "ConfigManager",
          "signature": "if (this.config.ENABLE_DEBUG_ROUTES)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\config\\config-manager.ts",
          "startLine": 330,
          "endLine": 332,
          "className": "ConfigManager",
          "signature": "if (this.config.ENABLE_TEST_ROUTES)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\exchanges\\exchange-manager.ts",
          "startLine": 286,
          "endLine": 289,
          "className": "ExchangeManager",
          "signature": "if (this.healthCheckInterval)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\exchange-monitor.service.ts",
          "startLine": 809,
          "endLine": 812,
          "className": "ExchangeMonitorService",
          "signature": "if (this.healthCheckInterval)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "start",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\bot-cycle\\bot-cycle-stable.ts",
          "startLine": 26,
          "endLine": 28,
          "className": "StableBotCycle",
          "signature": "start(): Promise<void>"
        },
        {
          "name": "stop",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\bot-cycle\\bot-cycle-stable.ts",
          "startLine": 30,
          "endLine": 32,
          "className": "StableBotCycle",
          "signature": "stop(): Promise<void>"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\bot-trading-cycle-integration.ts",
          "startLine": 348,
          "endLine": 351,
          "className": "BotTradingCycleIntegration",
          "signature": "if (!this.isRunning)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\bot-trading-cycle-integration.ts",
          "startLine": 412,
          "endLine": 415,
          "className": "BotTradingCycleIntegration",
          "signature": "if (!this.isRunning)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 8,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 51,
          "endLine": 53,
          "className": "ATRIndicator",
          "signature": "if (period < 1)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 166,
          "endLine": 168,
          "className": "ATRIndicator",
          "signature": "if (period < 1)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\ema-indicator.ts",
          "startLine": 67,
          "endLine": 69,
          "className": "EMAIndicator",
          "signature": "if (period < 1)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\ema-indicator.ts",
          "startLine": 155,
          "endLine": 157,
          "className": "EMAIndicator",
          "signature": "if (period < 1)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
          "startLine": 51,
          "endLine": 53,
          "className": "RSIIndicator",
          "signature": "if (period < 1)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
          "startLine": 131,
          "endLine": 133,
          "className": "RSIIndicator",
          "signature": "if (period < 1)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\sma-indicator.ts",
          "startLine": 56,
          "endLine": 58,
          "className": "SMAIndicator",
          "signature": "if (period < 1)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\sma-indicator.ts",
          "startLine": 116,
          "endLine": 118,
          "className": "SMAIndicator",
          "signature": "if (period < 1)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 62,
          "endLine": 67,
          "className": "ATRIndicator",
          "signature": "if ('period' in parameters)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\ema-indicator.ts",
          "startLine": 81,
          "endLine": 86,
          "className": "EMAIndicator",
          "signature": "if ('period' in parameters)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
          "startLine": 62,
          "endLine": 67,
          "className": "RSIIndicator",
          "signature": "if ('period' in parameters)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\sma-indicator.ts",
          "startLine": 67,
          "endLine": 72,
          "className": "SMAIndicator",
          "signature": "if ('period' in parameters)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 118,
          "endLine": 120,
          "className": "ATRIndicator",
          "signature": "if (highs.length < period + 1)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
          "startLine": 83,
          "endLine": 85,
          "className": "RSIIndicator",
          "signature": "if (prices.length < period + 1)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "setPeriod",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 165,
          "endLine": 170,
          "className": "ATRIndicator",
          "signature": "setPeriod(period: number): void"
        },
        {
          "name": "setPeriod",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\ema-indicator.ts",
          "startLine": 154,
          "endLine": 159,
          "className": "EMAIndicator",
          "signature": "setPeriod(period: number): void"
        },
        {
          "name": "setPeriod",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
          "startLine": 130,
          "endLine": 135,
          "className": "RSIIndicator",
          "signature": "setPeriod(period: number): void"
        },
        {
          "name": "setPeriod",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\sma-indicator.ts",
          "startLine": 115,
          "endLine": 120,
          "className": "SMAIndicator",
          "signature": "setPeriod(period: number): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "getPeriod",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 176,
          "endLine": 178,
          "className": "ATRIndicator",
          "signature": "getPeriod(): number"
        },
        {
          "name": "getPeriod",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\ema-indicator.ts",
          "startLine": 165,
          "endLine": 167,
          "className": "EMAIndicator",
          "signature": "getPeriod(): number"
        },
        {
          "name": "getPeriod",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
          "startLine": 141,
          "endLine": 143,
          "className": "RSIIndicator",
          "signature": "getPeriod(): number"
        },
        {
          "name": "getPeriod",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\sma-indicator.ts",
          "startLine": 126,
          "endLine": 128,
          "className": "SMAIndicator",
          "signature": "getPeriod(): number"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 207,
          "endLine": 209,
          "className": "instead",
          "signature": "if (highs.length !== lows.length || highs.length !== closes.length)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 234,
          "endLine": 236,
          "className": "instead",
          "signature": "if (closes.length < atrValues.length)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 9,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 242,
          "endLine": 244,
          "className": "instead",
          "signature": "if (close === undefined || atr === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands.ts",
          "startLine": 48,
          "endLine": 50,
          "signature": "if (middle === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands.ts",
          "startLine": 60,
          "endLine": 62,
          "signature": "if (price === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\macd.ts",
          "startLine": 46,
          "endLine": 48,
          "signature": "if (fast === undefined || slow === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\macd.ts",
          "startLine": 60,
          "endLine": 62,
          "signature": "if (macdVal === undefined || signalVal === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\macd.ts",
          "startLine": 89,
          "endLine": 91,
          "signature": "if (m === undefined || mPrev === undefined || s === undefined || sPrev === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\moving-averages.ts",
          "startLine": 53,
          "endLine": 55,
          "signature": "if (price === undefined || prevEma === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\moving-averages.ts",
          "startLine": 82,
          "endLine": 84,
          "signature": "if (f === undefined || fPrev === undefined || s === undefined || sPrev === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
          "startLine": 166,
          "endLine": 168,
          "className": "instead",
          "signature": "if (rsi === undefined || rsiPrev === undefined)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands-indicator.ts",
          "startLine": 98,
          "endLine": 100,
          "className": "BollingerBandsIndicator",
          "signature": "if (data.length < 2 || upper.length < 2 || lower.length < 2)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\macd-indicator.ts",
          "startLine": 100,
          "endLine": 102,
          "className": "MACDIndicator",
          "signature": "if (macd.length < 2 || signal.length < 2)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands-indicator.ts",
          "startLine": 109,
          "endLine": 111,
          "className": "BollingerBandsIndicator",
          "signature": "if (currentPrice === undefined || prevPrice === undefined ||\r\n        currentUpper === undefined || prevUpper === undefined ||\r\n        currentLower === undefined || prevLower === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands-indicator.ts",
          "startLine": 146,
          "endLine": 148,
          "className": "BollingerBandsIndicator",
          "signature": "if (currentPrice === undefined || currentUpper === undefined || currentLower === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\macd-indicator.ts",
          "startLine": 109,
          "endLine": 111,
          "className": "MACDIndicator",
          "signature": "if (latestMacd === undefined || prevMacd === undefined || \r\n        latestSignal === undefined || prevSignal === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\macd-indicator.ts",
          "startLine": 167,
          "endLine": 169,
          "className": "MACDIndicator",
          "signature": "if (latestHistogram === undefined)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands-indicator.ts",
          "startLine": 138,
          "endLine": 140,
          "className": "BollingerBandsIndicator",
          "signature": "if (data.length === 0 || upper.length === 0 || lower.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\macd-indicator.ts",
          "startLine": 161,
          "endLine": 163,
          "className": "MACDIndicator",
          "signature": "if (histogram.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands.ts",
          "startLine": 27,
          "endLine": 29,
          "signature": "if (prices.length < period)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\moving-averages.ts",
          "startLine": 15,
          "endLine": 17,
          "signature": "if (prices.length < period)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\moving-averages.ts",
          "startLine": 38,
          "endLine": 40,
          "signature": "if (prices.length < period)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\standard-deviation.ts",
          "startLine": 37,
          "endLine": 39,
          "signature": "if (values.length < period)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "calculate",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\indicator-interface.ts",
          "startLine": 130,
          "endLine": 132,
          "className": "BaseIndicator",
          "signature": "calculate(data: number[]): T;\r\n  \r\n  getMetadata(): IndicatorMetadata"
        },
        {
          "name": "getMetadata",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\indicator-interface.ts",
          "startLine": 132,
          "endLine": 134,
          "className": "BaseIndicator",
          "signature": "getMetadata(): IndicatorMetadata"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\indicator-interface.ts",
          "startLine": 258,
          "endLine": 260,
          "className": "BaseIndicator",
          "signature": "if (data.length < requiredLength)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\indicator-interface.ts",
          "startLine": 318,
          "endLine": 320,
          "className": "BaseIndicator",
          "signature": "if (validData.length !== data.length)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\indicator-interface.ts",
          "startLine": 271,
          "endLine": 273,
          "className": "BaseIndicator",
          "signature": "if (typeof key !== 'string' || !key)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\indicator-interface.ts",
          "startLine": 295,
          "endLine": 297,
          "className": "BaseIndicator",
          "signature": "if (typeof key !== 'string' || !key)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\indicator-interface.ts",
          "startLine": 275,
          "endLine": 277,
          "className": "BaseIndicator",
          "signature": "if (value === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\indicator-interface.ts",
          "startLine": 299,
          "endLine": 301,
          "className": "BaseIndicator",
          "signature": "if (value === undefined)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\macd.ts",
          "startLine": 92,
          "endLine": 95,
          "signature": "if (m > s && mPrev <= sPrev)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\moving-averages.ts",
          "startLine": 85,
          "endLine": 88,
          "signature": "if (f > s && fPrev <= sPrev)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
          "startLine": 92,
          "endLine": 94,
          "className": "RSIIndicator",
          "signature": "if (price === undefined || prevPrice === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
          "startLine": 106,
          "endLine": 108,
          "className": "RSIIndicator",
          "signature": "if (gain === undefined || loss === undefined)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-translator.ts",
          "startLine": 199,
          "endLine": 201,
          "className": "SignalTranslator",
          "signature": "if (strength > 0.8)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-translator.ts",
          "startLine": 306,
          "endLine": 308,
          "className": "SignalTranslator",
          "signature": "if (strategyResult.action === 'close' || confidence > 0.8)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-translator.ts",
          "startLine": 360,
          "endLine": 362,
          "className": "SignalTranslator",
          "signature": "if (signal.confidence < 0 || signal.confidence > 1)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-translator.ts",
          "startLine": 363,
          "endLine": 365,
          "className": "SignalTranslator",
          "signature": "if (signal.strength < 0 || signal.strength > 1)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 14,
          "endLine": 28,
          "className": "ImprovedSMASignalProcessor",
          "signature": "constructor(config?: Partial<SMASignalConfig>)"
        },
        {
          "name": "constructor",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 14,
          "endLine": 28,
          "className": "SMASignalProcessor",
          "signature": "constructor(config?: Partial<SMASignalConfig>)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "validateConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 34,
          "endLine": 48,
          "className": "ImprovedSMASignalProcessor",
          "signature": "validateConfig()"
        },
        {
          "name": "validateConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 34,
          "endLine": 48,
          "className": "SMASignalProcessor",
          "signature": "validateConfig()"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 36,
          "endLine": 38,
          "className": "ImprovedSMASignalProcessor",
          "signature": "if (fastPeriod >= slowPeriod)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 36,
          "endLine": 38,
          "className": "SMASignalProcessor",
          "signature": "if (fastPeriod >= slowPeriod)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 40,
          "endLine": 42,
          "className": "ImprovedSMASignalProcessor",
          "signature": "if (fastPeriod < 2)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 40,
          "endLine": 42,
          "className": "SMASignalProcessor",
          "signature": "if (fastPeriod < 2)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 44,
          "endLine": 46,
          "className": "ImprovedSMASignalProcessor",
          "signature": "if (slowPeriod < 3)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 44,
          "endLine": 46,
          "className": "SMASignalProcessor",
          "signature": "if (slowPeriod < 3)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "updateConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 53,
          "endLine": 60,
          "className": "ImprovedSMASignalProcessor",
          "signature": "updateConfig(newConfig: Partial<SMASignalConfig>): void"
        },
        {
          "name": "updateConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 53,
          "endLine": 60,
          "className": "SMASignalProcessor",
          "signature": "updateConfig(newConfig: Partial<SMASignalConfig>): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "process",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 75,
          "endLine": 116,
          "className": "ImprovedSMASignalProcessor",
          "signature": "process(candles: Candle[]): SMASignalOutput | null"
        },
        {
          "name": "process",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 75,
          "endLine": 116,
          "className": "SMASignalProcessor",
          "signature": "process(candles: Candle[]): SMASignalOutput | null"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 76,
          "endLine": 79,
          "className": "ImprovedSMASignalProcessor",
          "signature": "if (candles.length < this.config.slowPeriod + 1)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 76,
          "endLine": 79,
          "className": "SMASignalProcessor",
          "signature": "if (candles.length < this.config.slowPeriod + 1)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 98,
          "endLine": 100,
          "className": "ImprovedSMASignalProcessor",
          "signature": "if (fastMA.length === 0 || slowMA.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 98,
          "endLine": 100,
          "className": "SMASignalProcessor",
          "signature": "if (fastMA.length === 0 || slowMA.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 123,
          "endLine": 125,
          "className": "ImprovedSMASignalProcessor",
          "signature": "if (!prices.length || !fastMA.length || !slowMA.length)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 123,
          "endLine": 125,
          "className": "SMASignalProcessor",
          "signature": "if (!prices.length || !fastMA.length || !slowMA.length)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 128,
          "endLine": 131,
          "className": "ImprovedSMASignalProcessor",
          "signature": "if (fastMA.length !== slowMA.length || !fastMA.length)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 128,
          "endLine": 131,
          "className": "SMASignalProcessor",
          "signature": "if (fastMA.length !== slowMA.length || !fastMA.length)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 141,
          "endLine": 143,
          "className": "ImprovedSMASignalProcessor",
          "signature": "if (lastPrice === undefined || lastFastMA === undefined || lastSlowMA === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 140,
          "endLine": 142,
          "className": "SMASignalProcessor",
          "signature": "if (lastPrice === undefined || lastFastMA === undefined || lastSlowMA === undefined)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 164,
          "endLine": 166,
          "className": "ImprovedSMASignalProcessor",
          "signature": "if (signal > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 169,
          "endLine": 171,
          "className": "SMASignalProcessor",
          "signature": "if (signal > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "createTradeSignal",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 220,
          "endLine": 231,
          "className": "ImprovedSMASignalProcessor",
          "signature": "createTradeSignal(output: SMASignalOutput, botId: string, symbol: string): TradeSignal"
        },
        {
          "name": "createTradeSignal",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 254,
          "endLine": 265,
          "className": "SMASignalProcessor",
          "signature": "createTradeSignal(output: SMASignalOutput, botId: string, symbol: string): TradeSignal"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getDefaultConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\improved-sma-signal-processor.ts",
          "startLine": 236,
          "endLine": 246,
          "className": "ImprovedSMASignalProcessor",
          "signature": "getDefaultConfig(): SMASignalConfig"
        },
        {
          "name": "getDefaultConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-signal-processor.ts",
          "startLine": 270,
          "endLine": 280,
          "className": "SMASignalProcessor",
          "signature": "getDefaultConfig(): SMASignalConfig"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\config-validator.ts",
          "startLine": 75,
          "endLine": 78,
          "className": "ConfigValidator",
          "signature": "if (options.minLength !== undefined && value.length < options.minLength)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\config-validator.ts",
          "startLine": 79,
          "endLine": 82,
          "className": "ConfigValidator",
          "signature": "if (options.maxLength !== undefined && value.length > options.maxLength)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\config-validator.ts",
          "startLine": 118,
          "endLine": 121,
          "className": "ConfigValidator",
          "signature": "if (options.minLength !== undefined && value.length < options.minLength)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\config-validator.ts",
          "startLine": 122,
          "endLine": 125,
          "className": "ConfigValidator",
          "signature": "if (options.maxLength !== undefined && value.length > options.maxLength)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "initialize",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 25,
          "endLine": 27,
          "className": "ModularTargetReacherStrategy",
          "signature": "initialize(): Promise<void>"
        },
        {
          "name": "cleanup",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 61,
          "endLine": 63,
          "className": "ModularTargetReacherStrategy",
          "signature": "cleanup(): Promise<void>"
        },
        {
          "name": "initialize",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 118,
          "endLine": 120,
          "className": "TargetReacherStrategy",
          "signature": "initialize(): Promise<void>"
        },
        {
          "name": "cleanup",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 154,
          "endLine": 156,
          "className": "TargetReacherStrategy",
          "signature": "cleanup(): Promise<void>"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "setState",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 104,
          "endLine": 106,
          "className": "ModularTargetReacherStrategy",
          "signature": "setState(_state: Partial<StrategyState>): void"
        },
        {
          "name": "setState",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 197,
          "endLine": 199,
          "className": "TargetReacherStrategy",
          "signature": "setState(_state: Partial<StrategyState>): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\unified-signals.ts",
          "startLine": 143,
          "endLine": 145,
          "className": "SignalExecutionAdapter",
          "signature": "if (!order)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\unified-signals.ts",
          "startLine": 180,
          "endLine": 182,
          "className": "SignalExecutionAdapter",
          "signature": "if (!order)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\unified-signals.ts",
          "startLine": 331,
          "endLine": 333,
          "className": "SignalExecutionAdapter",
          "signature": "if (!botId || !orderId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\unified-signals.ts",
          "startLine": 402,
          "endLine": 404,
          "className": "SignalExecutionAdapter",
          "signature": "if (!botId || !orderId)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 7,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\alerts.routes.ts",
          "startLine": 23,
          "endLine": 32,
          "signature": "if (!alertManager)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\alerts.routes.ts",
          "startLine": 99,
          "endLine": 108,
          "signature": "if (!alertManager)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\alerts.routes.ts",
          "startLine": 154,
          "endLine": 163,
          "signature": "if (!alertManager)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\alerts.routes.ts",
          "startLine": 210,
          "endLine": 219,
          "signature": "if (!alertManager)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\alerts.routes.ts",
          "startLine": 287,
          "endLine": 296,
          "signature": "if (!alertManager)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\alerts.routes.ts",
          "startLine": 364,
          "endLine": 373,
          "signature": "if (!alertManager)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\alerts.routes.ts",
          "startLine": 439,
          "endLine": 448,
          "signature": "if (!alertManager)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\alerts.routes.ts",
          "startLine": 223,
          "endLine": 232,
          "signature": "if (!alertId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\alerts.routes.ts",
          "startLine": 299,
          "endLine": 308,
          "signature": "if (!alertId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\alerts.routes.ts",
          "startLine": 376,
          "endLine": 385,
          "signature": "if (!alertId)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\plugins.ts",
          "startLine": 107,
          "endLine": 113,
          "signature": "if (!plugin)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\plugins.ts",
          "startLine": 326,
          "endLine": 332,
          "signature": "if (!plugin)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 163,
          "endLine": 165,
          "className": "AlertManagerService",
          "signature": "if (!alert)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 184,
          "endLine": 186,
          "className": "AlertManagerService",
          "signature": "if (!alert)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 215,
          "endLine": 217,
          "className": "AlertManagerService",
          "signature": "if (!alert)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 245,
          "endLine": 247,
          "className": "AlertManagerService",
          "signature": "if (!alert)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "processSystemAlert",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 372,
          "endLine": 384,
          "className": "AlertManagerService",
          "signature": "processSystemAlert(alertData: {\r\n    category: string;\r\n    message: string;\r\n    value?: number;\r\n    threshold?: number;\r\n    level: Alert['level'];\r\n    source: string;\r\n    metadata?: any;\r\n  }): Alert"
        },
        {
          "name": "processApplicationAlert",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 397,
          "endLine": 409,
          "className": "AlertManagerService",
          "signature": "processApplicationAlert(alertData: {\r\n    category: string;\r\n    message: string;\r\n    value?: number;\r\n    threshold?: number;\r\n    level: Alert['level'];\r\n    source: string;\r\n    metadata?: any;\r\n  }): Alert"
        },
        {
          "name": "processTradingAlert",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 422,
          "endLine": 434,
          "className": "AlertManagerService",
          "signature": "processTradingAlert(alertData: {\r\n    category: string;\r\n    message: string;\r\n    value?: number;\r\n    threshold?: number;\r\n    level: Alert['level'];\r\n    source: string;\r\n    metadata?: any;\r\n  }): Alert"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 695,
          "endLine": 697,
          "className": "AlertManagerService",
          "signature": "if (removed > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 455,
          "endLine": 457,
          "className": "SystemMonitorService",
          "signature": "if (removed > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "stop",
          "filePath": ".\\packages\\backend\\src\\services\\application-monitor.service.ts",
          "startLine": 228,
          "endLine": 242,
          "className": "ApplicationMonitorService",
          "signature": "stop(): void"
        },
        {
          "name": "stop",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 135,
          "endLine": 149,
          "className": "SystemMonitorService",
          "signature": "stop(): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 7,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\application-monitor.service.ts",
          "startLine": 229,
          "endLine": 231,
          "className": "ApplicationMonitorService",
          "signature": "if (!this.isRunning)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\database-monitor.service.ts",
          "startLine": 171,
          "endLine": 173,
          "className": "DatabaseMonitorService",
          "signature": "if (!this.isMonitoring)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\database-monitor.service.ts",
          "startLine": 240,
          "endLine": 242,
          "className": "DatabaseMonitorService",
          "signature": "if (!this.isMonitoring || !this.config.enableQueryLogging)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\health-check.service.ts",
          "startLine": 108,
          "endLine": 110,
          "className": "HealthCheckService",
          "signature": "if (!this.isRunning)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\metrics-collector.service.ts",
          "startLine": 172,
          "endLine": 174,
          "className": "MetricsCollectorService",
          "signature": "if (!this.isRunning)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 126,
          "endLine": 128,
          "className": "MonitoringService",
          "signature": "if (!this.isRunning)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 136,
          "endLine": 138,
          "className": "SystemMonitorService",
          "signature": "if (!this.isRunning)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\application-monitor.service.ts",
          "startLine": 234,
          "endLine": 237,
          "className": "ApplicationMonitorService",
          "signature": "if (this.monitorInterval)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 141,
          "endLine": 144,
          "className": "SystemMonitorService",
          "signature": "if (this.monitorInterval)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\src\\services\\application-monitor.service.ts",
          "startLine": 661,
          "endLine": 664,
          "className": "ApplicationMonitorService",
          "signature": "for (const alert of alerts)"
        },
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 439,
          "endLine": 442,
          "className": "SystemMonitorService",
          "signature": "for (const alert of alerts)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getBotById",
          "filePath": ".\\packages\\backend\\src\\services\\bot.service.ts",
          "startLine": 20,
          "endLine": 23,
          "className": "BotService",
          "signature": "getBotById(): Promise<BotConfig | null>"
        },
        {
          "name": "updateBot",
          "filePath": ".\\packages\\backend\\src\\services\\bot.service.ts",
          "startLine": 30,
          "endLine": 33,
          "className": "BotService",
          "signature": "updateBot(): Promise<BotConfig | null>"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\database-monitor.service.ts",
          "startLine": 648,
          "endLine": 650,
          "className": "DatabaseMonitorService",
          "signature": "if (this.cleanupInterval)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-server.ts",
          "startLine": 558,
          "endLine": 560,
          "className": "JabbrWebSocketServer",
          "signature": "if (this.cleanupInterval)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\health-check.service.ts",
          "startLine": 183,
          "endLine": 185,
          "className": "HealthCheckService",
          "signature": "if (typeof name !== 'string' || !name)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\health-check.service.ts",
          "startLine": 188,
          "endLine": 190,
          "className": "HealthCheckService",
          "signature": "if (typeof name !== 'string' || !name)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\health-check.service.ts",
          "startLine": 321,
          "endLine": 328,
          "className": "HealthCheckService",
          "signature": "if (!this.systemMonitor)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\health-check.service.ts",
          "startLine": 360,
          "endLine": 367,
          "className": "HealthCheckService",
          "signature": "if (!this.applicationMonitor)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-health.service.ts",
          "startLine": 283,
          "endLine": 290,
          "className": "SystemHealthService",
          "signature": "if (!systemMetrics)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-health.service.ts",
          "startLine": 353,
          "endLine": 360,
          "className": "SystemHealthService",
          "signature": "if (!systemMetrics)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-health.service.ts",
          "startLine": 315,
          "endLine": 318,
          "className": "SystemHealthService",
          "signature": "if (systemMemoryPercentage > this.config.memoryThreshold)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-health.service.ts",
          "startLine": 383,
          "endLine": 386,
          "className": "SystemHealthService",
          "signature": "if (systemCpuPercentage > this.config.cpuThreshold)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 194,
          "endLine": 197,
          "className": "SystemMonitorService",
          "signature": "if (current.cpu.usage >= this.config.alertThresholds.cpu.critical)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 203,
          "endLine": 206,
          "className": "SystemMonitorService",
          "signature": "if (current.memory.percentage >= this.config.alertThresholds.memory.critical)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 212,
          "endLine": 215,
          "className": "SystemMonitorService",
          "signature": "if (current.disk.percentage >= this.config.alertThresholds.disk.critical)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\time-sync.service.ts",
          "startLine": 90,
          "endLine": 93,
          "className": "TimeSyncService",
          "signature": "if (this.isRunning)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\time-sync.service.ts",
          "startLine": 128,
          "endLine": 131,
          "className": "TimeSyncService",
          "signature": "if (!this.isRunning)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-time-sync.ts",
          "startLine": 45,
          "endLine": 48,
          "className": "BybitTimeSync",
          "signature": "if (this.isRunning)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-time-sync.ts",
          "startLine": 82,
          "endLine": 85,
          "className": "BybitTimeSync",
          "signature": "if (!this.isRunning)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getState",
          "filePath": ".\\packages\\backend\\src\\strategies\\aether-signal-strategy.ts",
          "startLine": 256,
          "endLine": 258,
          "className": "AetherSignalStrategy",
          "signature": "getState(): StrategyState"
        },
        {
          "name": "getState",
          "filePath": ".\\packages\\backend\\src\\strategies\\target-reacher-strategy.ts",
          "startLine": 323,
          "endLine": 325,
          "className": "TargetReacherStrategy",
          "signature": "getState(): StrategyState"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "setState",
          "filePath": ".\\packages\\backend\\src\\strategies\\aether-signal-strategy.ts",
          "startLine": 263,
          "endLine": 265,
          "className": "AetherSignalStrategy",
          "signature": "setState(state: Partial<StrategyState>): void"
        },
        {
          "name": "setState",
          "filePath": ".\\packages\\backend\\src\\strategies\\target-reacher-strategy.ts",
          "startLine": 330,
          "endLine": 332,
          "className": "TargetReacherStrategy",
          "signature": "setState(state: Partial<StrategyState>): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\strategies\\strategy-factory.ts",
          "startLine": 121,
          "endLine": 123,
          "className": "StrategyFactory",
          "signature": "if (!factory)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\strategies\\strategy-factory.ts",
          "startLine": 189,
          "endLine": 191,
          "className": "StrategyFactory",
          "signature": "if (!factory)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "findById",
          "filePath": ".\\packages\\backend\\src\\users\\user.repository.ts",
          "startLine": 202,
          "endLine": 205,
          "className": "DatabaseUserRepository",
          "signature": "findById(): Promise<InternalUser | null>"
        },
        {
          "name": "findByEmail",
          "filePath": ".\\packages\\backend\\src\\users\\user.repository.ts",
          "startLine": 207,
          "endLine": 210,
          "className": "DatabaseUserRepository",
          "signature": "findByEmail(): Promise<InternalUser | null>"
        },
        {
          "name": "update",
          "filePath": ".\\packages\\backend\\src\\users\\user.repository.ts",
          "startLine": 217,
          "endLine": 220,
          "className": "DatabaseUserRepository",
          "signature": "update(): Promise<InternalUser | null>"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "delete",
          "filePath": ".\\packages\\backend\\src\\users\\user.repository.ts",
          "startLine": 222,
          "endLine": 225,
          "className": "DatabaseUserRepository",
          "signature": "delete(): Promise<boolean>"
        },
        {
          "name": "updatePassword",
          "filePath": ".\\packages\\backend\\src\\users\\user.repository.ts",
          "startLine": 232,
          "endLine": 235,
          "className": "DatabaseUserRepository",
          "signature": "updatePassword(): Promise<boolean>"
        },
        {
          "name": "emailExists",
          "filePath": ".\\packages\\backend\\src\\users\\user.repository.ts",
          "startLine": 237,
          "endLine": 240,
          "className": "DatabaseUserRepository",
          "signature": "emailExists(): Promise<boolean>"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-time-sync.ts",
          "startLine": 35,
          "endLine": 38,
          "className": "BybitTimeSync",
          "signature": "constructor(isTestnet = true)"
        },
        {
          "name": "constructor",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 50,
          "endLine": 53,
          "className": "BybitWebSocketClient",
          "signature": "constructor(isTestnet = true)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-time-sync.ts",
          "startLine": 123,
          "endLine": 125,
          "className": "BybitTimeSync",
          "signature": "if (!response.ok)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\app\\bots\\page.tsx",
          "startLine": 124,
          "endLine": 126,
          "signature": "if (!response.ok)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\app\\bots\\page.tsx",
          "startLine": 149,
          "endLine": 151,
          "signature": "if (!response.ok)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\app\\bots\\[id]\\edit\\page.tsx",
          "startLine": 130,
          "endLine": 132,
          "signature": "if (!response.ok)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 129,
          "endLine": 132,
          "className": "BybitWebSocketClient",
          "signature": "if (this.heartbeatInterval)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 431,
          "endLine": 434,
          "className": "BybitWebSocketClient",
          "signature": "if (this.heartbeatInterval)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 167,
          "endLine": 170,
          "className": "BybitWebSocketClient",
          "signature": "if (!this.ws || this.ws.readyState !== WebSocket.OPEN)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 196,
          "endLine": 199,
          "className": "BybitWebSocketClient",
          "signature": "if (!this.ws || this.ws.readyState !== WebSocket.OPEN)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "subscribeToTicker",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 220,
          "endLine": 222,
          "className": "BybitWebSocketClient",
          "signature": "subscribeToTicker(symbol: string): void"
        },
        {
          "name": "subscribeToTrades",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 234,
          "endLine": 236,
          "className": "BybitWebSocketClient",
          "signature": "subscribeToTrades(symbol: string): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "subscribeToOrderbook",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 227,
          "endLine": 229,
          "className": "BybitWebSocketClient",
          "signature": "subscribeToOrderbook(symbol: string, depth = 50): void"
        },
        {
          "name": "subscribeToKline",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 241,
          "endLine": 243,
          "className": "BybitWebSocketClient",
          "signature": "subscribeToKline(symbol: string, interval = '1m'): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "handleOpen",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 287,
          "endLine": 289,
          "className": "BybitWebSocketClient",
          "signature": "handleOpen(): void"
        },
        {
          "name": "handlePong",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 473,
          "endLine": 475,
          "className": "BybitWebSocketClient",
          "signature": "handlePong(): void"
        },
        {
          "name": "setupInternalServerHandlers",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-bridge.ts",
          "startLine": 91,
          "endLine": 95,
          "className": "WebSocketBridge",
          "signature": "setupInternalServerHandlers(): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "handleOrderbookData",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-bridge.ts",
          "startLine": 203,
          "endLine": 213,
          "className": "WebSocketBridge",
          "signature": "handleOrderbookData(exchange: string, data: unknown): void"
        },
        {
          "name": "handleKlineData",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-bridge.ts",
          "startLine": 218,
          "endLine": 228,
          "className": "WebSocketBridge",
          "signature": "handleKlineData(exchange: string, data: unknown): void"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 5,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\bots\\create\\page.ts",
          "startLine": 30,
          "endLine": 33,
          "signature": "if ('generateMetadata' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\bots\\page.ts",
          "startLine": 30,
          "endLine": 33,
          "signature": "if ('generateMetadata' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\bots\\[id]\\edit\\page.ts",
          "startLine": 30,
          "endLine": 33,
          "signature": "if ('generateMetadata' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\logs\\page.ts",
          "startLine": 30,
          "endLine": 33,
          "signature": "if ('generateMetadata' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\page.ts",
          "startLine": 30,
          "endLine": 33,
          "signature": "if ('generateMetadata' in entry)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 5,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\bots\\create\\page.ts",
          "startLine": 36,
          "endLine": 39,
          "signature": "if ('generateViewport' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\bots\\page.ts",
          "startLine": 36,
          "endLine": 39,
          "signature": "if ('generateViewport' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\bots\\[id]\\edit\\page.ts",
          "startLine": 36,
          "endLine": 39,
          "signature": "if ('generateViewport' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\logs\\page.ts",
          "startLine": 36,
          "endLine": 39,
          "signature": "if ('generateViewport' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\page.ts",
          "startLine": 36,
          "endLine": 39,
          "signature": "if ('generateViewport' in entry)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 6,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\bots\\create\\page.ts",
          "startLine": 42,
          "endLine": 45,
          "signature": "if ('generateStaticParams' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\bots\\page.ts",
          "startLine": 42,
          "endLine": 45,
          "signature": "if ('generateStaticParams' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\bots\\[id]\\edit\\page.ts",
          "startLine": 42,
          "endLine": 45,
          "signature": "if ('generateStaticParams' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\layout.ts",
          "startLine": 42,
          "endLine": 45,
          "signature": "if ('generateStaticParams' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\logs\\page.ts",
          "startLine": 42,
          "endLine": 45,
          "signature": "if ('generateStaticParams' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\page.ts",
          "startLine": 42,
          "endLine": 45,
          "signature": "if ('generateStaticParams' in entry)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "switch",
          "filePath": ".\\packages\\frontend\\src\\app\\bots\\page.tsx",
          "startLine": 162,
          "endLine": 169,
          "signature": "switch (status)"
        },
        {
          "name": "switch",
          "filePath": ".\\packages\\frontend\\src\\app\\bots\\page.tsx",
          "startLine": 173,
          "endLine": 180,
          "signature": "switch (status)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\StrategyMonitor.tsx",
          "startLine": 76,
          "endLine": 81,
          "signature": "if (data.metrics)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\StrategyMonitor.tsx",
          "startLine": 95,
          "endLine": 100,
          "signature": "if (data.metrics)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\StrategyMonitor.tsx",
          "startLine": 104,
          "endLine": 109,
          "signature": "if (data.metrics)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\TradingActivityMonitor.tsx",
          "startLine": 182,
          "endLine": 184,
          "signature": "if (timeDiff > 60 * 60 * 1000)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\TradingActivityMonitor.tsx",
          "startLine": 187,
          "endLine": 189,
          "signature": "if (timeDiff > 24 * 60 * 60 * 1000)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\TradingActivityMonitor.tsx",
          "startLine": 192,
          "endLine": 194,
          "signature": "if (timeDiff > 7 * 24 * 60 * 60 * 1000)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\TradingActivityMonitor.tsx",
          "startLine": 197,
          "endLine": 199,
          "signature": "if (timeDiff > 30 * 24 * 60 * 60 * 1000)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\services\\api.ts",
          "startLine": 185,
          "endLine": 187,
          "className": "ApiService",
          "signature": "if (params?.symbol)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\services\\api.ts",
          "startLine": 224,
          "endLine": 226,
          "className": "ApiService",
          "signature": "if (params?.symbol)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\services\\api.ts",
          "startLine": 191,
          "endLine": 193,
          "className": "ApiService",
          "signature": "if (params?.timeframe)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\services\\api.ts",
          "startLine": 221,
          "endLine": 223,
          "className": "ApiService",
          "signature": "if (params?.timeframe)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getPositions",
          "filePath": ".\\packages\\frontend\\src\\services\\api.ts",
          "startLine": 198,
          "endLine": 200,
          "className": "ApiService",
          "signature": "getPositions(): Promise<ApiResponse<Position[]>>"
        },
        {
          "name": "getBotStatus",
          "filePath": ".\\packages\\frontend\\src\\services\\api.ts",
          "startLine": 202,
          "endLine": 204,
          "className": "ApiService",
          "signature": "getBotStatus(): Promise<ApiResponse<BotStatus[]>>"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\utils\\errorHandler.ts",
          "startLine": 67,
          "endLine": 69,
          "className": "ErrorHandler",
          "signature": "if (error instanceof ApiError)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\utils\\errorHandler.ts",
          "startLine": 87,
          "endLine": 90,
          "className": "ErrorHandler",
          "signature": "if (error instanceof ApiError)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\utils\\theme.ts",
          "startLine": 138,
          "endLine": 140,
          "signature": "if (value > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\utils\\theme.ts",
          "startLine": 141,
          "endLine": 143,
          "signature": "if (value < 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\scripts\\analysis\\analyze.ts",
          "startLine": 44,
          "endLine": 53,
          "className": "QualityAnalyzer",
          "signature": "constructor()"
        },
        {
          "name": "constructor",
          "filePath": ".\\scripts\\analysis\\duplication-analyzer.ts",
          "startLine": 70,
          "endLine": 79,
          "className": "DuplicationAnalyzer",
          "signature": "constructor()"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\architectural-analyzer.ts",
          "startLine": 711,
          "endLine": 713,
          "className": "ArchitecturalAnalyzer",
          "signature": "if (require.main === module)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\utilities\\naming-validator.ts",
          "startLine": 497,
          "endLine": 499,
          "className": "definition",
          "signature": "if (require.main === module || process.argv[1] === __filename)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplicate-method-detector.ts",
          "startLine": 359,
          "endLine": 362,
          "className": "class",
          "signature": "if (stats.size > this.options.maxFileSize)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 733,
          "endLine": 736,
          "className": "class",
          "signature": "if (stats.size > this.options.maxFileSize)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 3,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplicate-method-detector.ts",
          "startLine": 566,
          "endLine": 569,
          "className": "class",
          "signature": "if (groups.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 837,
          "endLine": 840,
          "className": "DocumentationReporter",
          "signature": "if (report.results.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 658,
          "endLine": 661,
          "className": "OrchestratorCLI",
          "signature": "if (options.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplicate-method-detector.ts",
          "startLine": 606,
          "endLine": 610,
          "className": "class",
          "signature": "if (result.exactDuplicates > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplicate-method-detector.ts",
          "startLine": 612,
          "endLine": 616,
          "className": "class",
          "signature": "if (result.similarDuplicates > 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplicate-method-detector.ts",
          "startLine": 666,
          "endLine": 669,
          "className": "class",
          "signature": "if (helpFlag)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 915,
          "endLine": 918,
          "className": "DocumentationReporter",
          "signature": "if (helpFlag)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplicate-method-detector.ts",
          "startLine": 774,
          "endLine": 776,
          "className": "class",
          "signature": "if (require.main === module)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 1032,
          "endLine": 1034,
          "className": "DocumentationReporter",
          "signature": "if (require.main === module)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 4,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\scripts\\analysis\\duplication-analyzer.ts",
          "startLine": 92,
          "endLine": 107,
          "className": "DuplicationAnalyzer",
          "signature": "for (const entry of entries)"
        },
        {
          "name": "for",
          "filePath": ".\\scripts\\analysis\\manual-duplication-reviewer.ts",
          "startLine": 88,
          "endLine": 102,
          "className": "ManualDuplicationReviewer",
          "signature": "for (const entry of entries)"
        },
        {
          "name": "for",
          "filePath": ".\\scripts\\monitoring\\post-implementation-validator.ts",
          "startLine": 384,
          "endLine": 399,
          "className": "PostImplementationValidator",
          "signature": "for (const entry of entries)"
        },
        {
          "name": "for",
          "filePath": ".\\scripts\\utilities\\naming-validator.ts",
          "startLine": 306,
          "endLine": 321,
          "className": "definition",
          "signature": "for (const entry of entries)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\post-implementation-validator.ts",
          "startLine": 135,
          "endLine": 141,
          "className": "PostImplementationValidator",
          "signature": "if (errors.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\post-implementation-validator.ts",
          "startLine": 277,
          "endLine": 283,
          "className": "PostImplementationValidator",
          "signature": "if (unresolvedImports.length === 0)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "getSourceFiles",
          "filePath": ".\\scripts\\monitoring\\post-implementation-validator.ts",
          "startLine": 377,
          "endLine": 407,
          "className": "PostImplementationValidator",
          "signature": "getSourceFiles(dirs: string[], extensions: string[] = ['.ts', '.tsx', '.js', '.jsx']): string[]"
        },
        {
          "name": "getSourceFiles",
          "filePath": ".\\scripts\\utilities\\naming-validator.ts",
          "startLine": 299,
          "endLine": 329,
          "className": "definition",
          "signature": "getSourceFiles(dirs: string[], extensions: string[] = ['.ts', '.tsx']): string[]"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\scripts\\monitoring\\post-implementation-validator.ts",
          "startLine": 402,
          "endLine": 404,
          "className": "PostImplementationValidator",
          "signature": "for (const dir of dirs)"
        },
        {
          "name": "for",
          "filePath": ".\\scripts\\utilities\\naming-validator.ts",
          "startLine": 324,
          "endLine": 326,
          "className": "definition",
          "signature": "for (const dir of dirs)"
        }
      ]
    },
    {
      "type": "exact",
      "methodCount": 2,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 381,
          "endLine": 383,
          "className": "ScriptExecutor",
          "signature": "if (args.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 667,
          "endLine": 669,
          "className": "OrchestratorCLI",
          "signature": "if (scriptArgs.length > 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8787878787878788,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 335,
          "endLine": 337,
          "className": "AIProjectAnalyzer",
          "signature": "if (subFiles.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 646,
          "endLine": 648,
          "className": "OrchestratorCLI",
          "signature": "if (script.dependencies && script.dependencies.length > 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9655172413793104,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 458,
          "endLine": 460,
          "className": "AIProjectAnalyzer",
          "signature": "if (largeFiles <= 3)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 802,
          "endLine": 804,
          "className": "AIProjectAnalyzer",
          "signature": "if (largeFiles <= 5)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8846083788706739,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 541,
          "endLine": 545,
          "className": "AIProjectAnalyzer",
          "signature": "if (jsFiles.length > tsFiles.length)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 546,
          "endLine": 550,
          "className": "AIProjectAnalyzer",
          "signature": "if (actualTestFiles.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 577,
          "endLine": 581,
          "className": "AIProjectAnalyzer",
          "signature": "if (understanding.codebase.totalFiles > 1000)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9425287356321839,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 613,
          "endLine": 615,
          "className": "AIProjectAnalyzer",
          "signature": "if (actualLargeFiles > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 616,
          "endLine": 618,
          "className": "AIProjectAnalyzer",
          "signature": "if (actualAvgLines > 200)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 619,
          "endLine": 621,
          "className": "AIProjectAnalyzer",
          "signature": "if (codebase.totalFiles > 500)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.865979381443299,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 656,
          "endLine": 660,
          "className": "AIProjectAnalyzer",
          "signature": "if (actualTestFiles > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 665,
          "endLine": 669,
          "className": "AIProjectAnalyzer",
          "signature": "if (actualDocFiles > 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.95,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 681,
          "endLine": 684,
          "className": "AIProjectAnalyzer",
          "signature": "if (configCount > 15)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 690,
          "endLine": 693,
          "className": "AIProjectAnalyzer",
          "signature": "if (avgFilesPerDir > 50)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9234587251828632,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 854,
          "endLine": 869,
          "className": "AIProjectAnalyzer",
          "signature": "if (totalDeps > 100)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 877,
          "endLine": 892,
          "className": "AIProjectAnalyzer",
          "signature": "if (configFiles.length > 25)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 895,
          "endLine": 910,
          "className": "AIProjectAnalyzer",
          "signature": "if (codeFiles.length > 1000)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 4,
      "similarityScore": 0.964417631206761,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 999,
          "endLine": 1019,
          "className": "AIProjectAnalyzer",
          "signature": "if (jsFiles.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 1043,
          "endLine": 1064,
          "className": "AIProjectAnalyzer",
          "signature": "if (testFiles.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 1085,
          "endLine": 1105,
          "className": "AIProjectAnalyzer",
          "signature": "if (isLargeProject)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\ai-project-analyzer.ts",
          "startLine": 1109,
          "endLine": 1129,
          "className": "AIProjectAnalyzer",
          "signature": "if (docFiles.length < 3)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8702431289640592,
      "methods": [
        {
          "name": "switch",
          "filePath": ".\\.taskmaster\\src\\ai-report-generator.ts",
          "startLine": 243,
          "endLine": 248,
          "className": "AIReportGenerator",
          "signature": "switch (priority)"
        },
        {
          "name": "switch",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-reliability-system.ts",
          "startLine": 510,
          "endLine": 519,
          "className": "BotReliabilitySystem",
          "signature": "switch (eventType)"
        },
        {
          "name": "switch",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-reliability-system.ts",
          "startLine": 523,
          "endLine": 532,
          "className": "BotReliabilitySystem",
          "signature": "switch (eventType)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9148936170212766,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\project-understanding.ts",
          "startLine": 389,
          "endLine": 392,
          "className": "ProjectUnderstandingService",
          "signature": "if (parts.length > 1)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster\\src\\project-understanding.ts",
          "startLine": 468,
          "endLine": 471,
          "className": "ProjectUnderstandingService",
          "signature": "if (parts.length > 1)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9775280898876404,
      "methods": [
        {
          "name": "formatAsMarkdown",
          "filePath": ".\\.taskmaster\\src\\project-understanding.ts",
          "startLine": 665,
          "endLine": 713,
          "className": "ProjectUnderstandingService",
          "signature": "formatAsMarkdown(understanding: ProjectUnderstanding): string"
        },
        {
          "name": "formatAsText",
          "filePath": ".\\.taskmaster\\src\\project-understanding.ts",
          "startLine": 718,
          "endLine": 765,
          "className": "ProjectUnderstandingService",
          "signature": "formatAsText(understanding: ProjectUnderstanding): string"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 4,
      "similarityScore": 0.9607217128212246,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\architecture-phase.ts",
          "startLine": 191,
          "endLine": 198,
          "className": "ArchitecturePhase",
          "signature": "if (allDeps?.['pg'] || allDeps?.['postgresql'])"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\architecture-phase.ts",
          "startLine": 200,
          "endLine": 207,
          "className": "ArchitecturePhase",
          "signature": "if (allDeps?.['redis'])"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\architecture-phase.ts",
          "startLine": 209,
          "endLine": 216,
          "className": "ArchitecturePhase",
          "signature": "if (allDeps?.['ws'] || allDeps?.['socket.io'])"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\architecture-phase.ts",
          "startLine": 218,
          "endLine": 225,
          "className": "ArchitecturePhase",
          "signature": "if (allDeps?.['ccxt'])"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8823529411764706,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\codebase-phase.ts",
          "startLine": 145,
          "endLine": 147,
          "className": "CodebasePhase",
          "signature": "if (maxComplexity > 20 || avgComplexity > 15)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-watchdog.ts",
          "startLine": 321,
          "endLine": 323,
          "className": "BotWatchdog",
          "signature": "if (recentErrors.length >= this.config.maxErrorRate * 0.5)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 5,
      "similarityScore": 0.888888888888889,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\codebase-phase.ts",
          "startLine": 193,
          "endLine": 199,
          "className": "CodebasePhase",
          "signature": "if (hasAsyncAwait)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\codebase-phase.ts",
          "startLine": 201,
          "endLine": 207,
          "className": "CodebasePhase",
          "signature": "if (hasPromises)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\codebase-phase.ts",
          "startLine": 209,
          "endLine": 215,
          "className": "CodebasePhase",
          "signature": "if (hasClasses)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\codebase-phase.ts",
          "startLine": 217,
          "endLine": 223,
          "className": "CodebasePhase",
          "signature": "if (hasFunctionalComponents)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\codebase-phase.ts",
          "startLine": 225,
          "endLine": 231,
          "className": "CodebasePhase",
          "signature": "if (hasHooks)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8688524590163934,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\integration-phase.ts",
          "startLine": 139,
          "endLine": 144,
          "className": "IntegrationPhase",
          "signature": "if (qualityMetrics.testCoverage < 80)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\integration-phase.ts",
          "startLine": 145,
          "endLine": 150,
          "className": "IntegrationPhase",
          "signature": "if (dependencyAnalysis.conflicts?.length > 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9636363636363636,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\integration-phase.ts",
          "startLine": 187,
          "endLine": 199,
          "className": "IntegrationPhase",
          "signature": "if (qualityMetrics.testCoverage < 80)"
        },
        {
          "name": "if",
          "filePath": ".\\.taskmaster.backup.20250705-082510\\understanding\\integration-phase.ts",
          "startLine": 203,
          "endLine": 215,
          "className": "IntegrationPhase",
          "signature": "if (dependencyAnalysis.conflicts?.length > 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8761609907120743,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\docs\\examples\\example-sma-strategy.ts",
          "startLine": 181,
          "endLine": 196,
          "className": "ExampleSMAStrategy",
          "signature": "if (position)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-crossover-strategy.ts",
          "startLine": 136,
          "endLine": 151,
          "className": "SMACrossoverStrategy",
          "signature": "if (position)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9556313993174061,
      "methods": [
        {
          "name": "getDefaultConfig",
          "filePath": ".\\docs\\examples\\example-sma-strategy.ts",
          "startLine": 315,
          "endLine": 336,
          "className": "ExampleSMAStrategy",
          "signature": "getDefaultConfig(): StrategyConfig"
        },
        {
          "name": "getDefaultConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-crossover-strategy.ts",
          "startLine": 310,
          "endLine": 331,
          "className": "SMACrossoverStrategy",
          "signature": "getDefaultConfig(): StrategyConfig"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8836996336996337,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\scripts\\debug\\compare-sma-processors.ts",
          "startLine": 86,
          "endLine": 145,
          "signature": "for (let i = config.slowPeriod; i < candles.length; i++)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\scripts\\debug\\compare-sma-processors.ts",
          "startLine": 89,
          "endLine": 143,
          "signature": "if (output && output.signal !== 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9827586206896551,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\scripts\\debug\\debug-sma-processor.ts",
          "startLine": 21,
          "endLine": 30,
          "signature": "for (let i = 0; i < 20; i++)"
        },
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\scripts\\debug\\simple-sma-debug.ts",
          "startLine": 13,
          "endLine": 22,
          "signature": "for (let i = 0; i < 30; i++)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 4,
      "similarityScore": 0.9009744678534487,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\scripts\\debug\\debug-sma-processor.ts",
          "startLine": 33,
          "endLine": 42,
          "signature": "for (let i = 0; i < 10; i++)"
        },
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\scripts\\debug\\debug-sma-processor.ts",
          "startLine": 45,
          "endLine": 54,
          "signature": "for (let i = 0; i < 10; i++)"
        },
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\scripts\\debug\\simple-sma-debug.ts",
          "startLine": 25,
          "endLine": 34,
          "signature": "for (let i = 0; i < 15; i++)"
        },
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\scripts\\debug\\simple-sma-debug.ts",
          "startLine": 37,
          "endLine": 46,
          "signature": "for (let i = 0; i < 15; i++)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.88,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\scripts\\debug\\debug-sma-signals.ts",
          "startLine": 138,
          "endLine": 140,
          "signature": "if (result)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 321,
          "endLine": 323,
          "className": "BybitWebSocketClient",
          "signature": "if (message.success)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8814814814814815,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\scripts\\debug\\debug-sma-signals.ts",
          "startLine": 153,
          "endLine": 162,
          "signature": "for (let i = 0; i < 30; i++)"
        },
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\scripts\\debug\\debug-sma-signals.ts",
          "startLine": 165,
          "endLine": 174,
          "signature": "for (let i = 0; i < 10; i++)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8936170212765957,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\scripts\\debug\\debug-sma-signals.ts",
          "startLine": 201,
          "endLine": 204,
          "signature": "if (result)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\scripts\\debug\\simple-sma-debug.ts",
          "startLine": 82,
          "endLine": 85,
          "signature": "if (result)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8574969021065675,
      "methods": [
        {
          "name": "createIndicatorTests",
          "filePath": ".\\packages\\backend\\scripts\\performance\\performance-analyzer.ts",
          "startLine": 165,
          "endLine": 196,
          "className": "PerformanceAnalyzer",
          "signature": "createIndicatorTests(): PerformanceTestSuite"
        },
        {
          "name": "testFunction",
          "filePath": ".\\packages\\backend\\scripts\\performance\\performance-analyzer.ts",
          "startLine": 173,
          "endLine": 191,
          "className": "PerformanceAnalyzer",
          "signature": "async ()"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 6,
      "similarityScore": 0.9107189458137969,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.controller.ts",
          "startLine": 23,
          "endLine": 34,
          "className": "AuthController",
          "signature": "if (registerData.password !== registerData.confirmPassword)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.controller.ts",
          "startLine": 53,
          "endLine": 64,
          "className": "AuthController",
          "signature": "if (existingUser)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.controller.ts",
          "startLine": 160,
          "endLine": 171,
          "className": "AuthController",
          "signature": "if (!user)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.controller.ts",
          "startLine": 178,
          "endLine": 189,
          "className": "AuthController",
          "signature": "if (!isPasswordValid)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.controller.ts",
          "startLine": 269,
          "endLine": 280,
          "className": "AuthController",
          "signature": "if (!user)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.controller.ts",
          "startLine": 329,
          "endLine": 340,
          "className": "AuthController",
          "signature": "if (!user)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 5,
      "similarityScore": 0.9170759060765132,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.middleware.ts",
          "startLine": 32,
          "endLine": 42,
          "className": "AuthMiddleware",
          "signature": "if (!token)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.middleware.ts",
          "startLine": 112,
          "endLine": 122,
          "className": "AuthMiddleware",
          "signature": "if (!req.user)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.middleware.ts",
          "startLine": 141,
          "endLine": 151,
          "className": "AuthMiddleware",
          "signature": "if (!resourceUserId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.middleware.ts",
          "startLine": 153,
          "endLine": 163,
          "className": "AuthMiddleware",
          "signature": "if (req.user.userId !== resourceUserId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.middleware.ts",
          "startLine": 227,
          "endLine": 237,
          "className": "AuthMiddleware",
          "signature": "if (!refreshToken)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9421915444348576,
      "methods": [
        {
          "name": "return",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.middleware.ts",
          "startLine": 111,
          "endLine": 167,
          "className": "AuthMiddleware",
          "signature": "return (req: Request, res: Response, next: NextFunction): void =>"
        },
        {
          "name": "requireOwnership",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.middleware.ts",
          "startLine": 110,
          "endLine": 168,
          "className": "AuthMiddleware",
          "signature": "requireOwnership = (resourceUserIdField = 'userId') => {"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9230769230769231,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.middleware.ts",
          "startLine": 189,
          "endLine": 193,
          "className": "AuthMiddleware",
          "signature": "if (!clientAttempts)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.middleware.ts",
          "startLine": 195,
          "endLine": 200,
          "className": "AuthMiddleware",
          "signature": "if (now > clientAttempts.resetTime)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8888888888888888,
      "methods": [
        {
          "name": "generateAccessToken",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.service.ts",
          "startLine": 54,
          "endLine": 68,
          "className": "AuthService",
          "signature": "generateAccessToken(userId: string, email: string): string"
        },
        {
          "name": "generateRefreshToken",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.service.ts",
          "startLine": 73,
          "endLine": 86,
          "className": "AuthService",
          "signature": "generateRefreshToken(userId: string): string"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8695652173913043,
      "methods": [
        {
          "name": "validateLoginRequest",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.service.ts",
          "startLine": 151,
          "endLine": 153,
          "className": "AuthService",
          "signature": "validateLoginRequest(data: unknown): LoginRequest"
        },
        {
          "name": "validateRegisterRequest",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.service.ts",
          "startLine": 158,
          "endLine": 160,
          "className": "AuthService",
          "signature": "validateRegisterRequest(data: unknown): RegisterRequest"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.88,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.service.ts",
          "startLine": 180,
          "endLine": 182,
          "className": "AuthService",
          "signature": "if (password.length < 8)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\auth\\auth.service.ts",
          "startLine": 184,
          "endLine": 186,
          "className": "AuthService",
          "signature": "if (password.length > 128)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 9,
      "similarityScore": 0.880232723144601,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 171,
          "endLine": 173,
          "className": "BotManager",
          "signature": "if (!bot)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\dynamic-strategy-loader.ts",
          "startLine": 346,
          "endLine": 348,
          "className": "DynamicStrategyLoader",
          "signature": "if (!previousVersion)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 495,
          "endLine": 497,
          "className": "StateManager",
          "signature": "if (!currentSnapshot)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-executor.ts",
          "startLine": 405,
          "endLine": 407,
          "className": "TradeExecutor",
          "signature": "if (!request.bot.configuration)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\exchanges\\base-exchange.ts",
          "startLine": 328,
          "endLine": 330,
          "className": "BaseExchange",
          "signature": "if (!orderRequest.symbol)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\exchanges\\base-exchange.ts",
          "startLine": 351,
          "endLine": 353,
          "className": "BaseExchange",
          "signature": "if (orderRequest.marketType === MarketType.SPOT && !capabilities.spot)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\unified-signals.ts",
          "startLine": 236,
          "endLine": 238,
          "className": "SignalExecutionAdapter",
          "signature": "if (!signal.symbol || !signal.action)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 131,
          "endLine": 133,
          "className": "DatabaseUserRepository",
          "signature": "if (!result)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\contexts\\WebSocketContext.tsx",
          "startLine": 234,
          "endLine": 236,
          "signature": "if (!context)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9787234042553191,
      "methods": [
        {
          "name": "pauseBot",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 252,
          "endLine": 276,
          "className": "BotManager",
          "signature": "pauseBot(userId: string, botId: string): Promise<void>"
        },
        {
          "name": "resumeBot",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 281,
          "endLine": 305,
          "className": "BotManager",
          "signature": "resumeBot(userId: string, botId: string): Promise<void>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8653465346534653,
      "methods": [
        {
          "name": "performHealthCheck",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 596,
          "endLine": 640,
          "className": "BotManager",
          "signature": "performHealthCheck(): void"
        },
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 598,
          "endLine": 630,
          "className": "BotManager",
          "signature": "for (const [botId, runtime] of this.activeBots)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8969072164948454,
      "methods": [
        {
          "name": "broadcastBotStatusUpdate",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 645,
          "endLine": 651,
          "className": "BotManager",
          "signature": "broadcastBotStatusUpdate(botId: string, status: string): void"
        },
        {
          "name": "broadcastBotPerformanceUpdate",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 656,
          "endLine": 662,
          "className": "BotManager",
          "signature": "broadcastBotPerformanceUpdate(botId: string, performance: any): void"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8947368421052632,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 834,
          "endLine": 836,
          "className": "BotManager",
          "signature": "if (!runtime)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\Loading.tsx",
          "startLine": 73,
          "endLine": 75,
          "signature": "if (!isVisible)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9448818897637795,
      "methods": [
        {
          "name": "broadcastStrategyUpdate",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 881,
          "endLine": 896,
          "className": "BotManager",
          "signature": "broadcastStrategyUpdate(botId: string, action: string, data: any): void"
        },
        {
          "name": "broadcastStrategyAlert",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-manager.ts",
          "startLine": 901,
          "endLine": 916,
          "className": "BotManager",
          "signature": "broadcastStrategyAlert(botId: string, alertType: string, data: any): void"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8715596330275229,
      "methods": [
        {
          "name": "getAlertLevelForRecoveryEvent",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-reliability-system.ts",
          "startLine": 509,
          "endLine": 520,
          "className": "BotReliabilitySystem",
          "signature": "getAlertLevelForRecoveryEvent(eventType: string): SystemAlert['level'] | null"
        },
        {
          "name": "getMessageForRecoveryEvent",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-reliability-system.ts",
          "startLine": 521,
          "endLine": 532,
          "className": "BotReliabilitySystem",
          "signature": "getMessageForRecoveryEvent(eventType: string, errorRecord: any): string"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.88,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-watchdog.ts",
          "startLine": 337,
          "endLine": 339,
          "className": "BotWatchdog",
          "signature": "if (metrics.errorRate >= this.config.maxErrorRate)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bot-watchdog.ts",
          "startLine": 341,
          "endLine": 343,
          "className": "BotWatchdog",
          "signature": "if (metrics.memoryUsage >= this.config.maxMemoryUsage)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9351851851851852,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 87,
          "endLine": 94,
          "className": "BotController",
          "signature": "if (!name || !strategy || !exchange || !exchangeApiKeyId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 291,
          "endLine": 298,
          "className": "BotController",
          "signature": "if (!deleted)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 717,
          "endLine": 724,
          "className": "BotController",
          "signature": "if (!strategyType || !config)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9821428571428571,
      "methods": [
        {
          "name": "getBotById",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 150,
          "endLine": 195,
          "className": "BotController",
          "signature": "getBotById(req: AuthenticatedRequest, res: Response): Promise<void>"
        },
        {
          "name": "getBotPerformance",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 502,
          "endLine": 549,
          "className": "BotController",
          "signature": "getBotPerformance(req: AuthenticatedRequest, res: Response): Promise<void>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 4,
      "similarityScore": 0.9922420734729677,
      "methods": [
        {
          "name": "startBot",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 330,
          "endLine": 367,
          "className": "BotController",
          "signature": "startBot(req: AuthenticatedRequest, res: Response): Promise<void>"
        },
        {
          "name": "stopBot",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 373,
          "endLine": 410,
          "className": "BotController",
          "signature": "stopBot(req: AuthenticatedRequest, res: Response): Promise<void>"
        },
        {
          "name": "pauseBot",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 416,
          "endLine": 453,
          "className": "BotController",
          "signature": "pauseBot(req: AuthenticatedRequest, res: Response): Promise<void>"
        },
        {
          "name": "resumeBot",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.controller.ts",
          "startLine": 459,
          "endLine": 496,
          "className": "BotController",
          "signature": "resumeBot(req: AuthenticatedRequest, res: Response): Promise<void>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8684210526315789,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 107,
          "endLine": 111,
          "className": "BotService",
          "signature": "if (status)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 113,
          "endLine": 117,
          "className": "BotService",
          "signature": "if (strategy)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 119,
          "endLine": 123,
          "className": "BotService",
          "signature": "if (exchange)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9532163742690059,
      "methods": [
        {
          "name": "getBotById",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 172,
          "endLine": 200,
          "className": "BotService",
          "signature": "getBotById(userId: string, botId: string): Promise<Bot | null>"
        },
        {
          "name": "updateBotStatus",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 406,
          "endLine": 438,
          "className": "BotService",
          "signature": "updateBotStatus(userId: string, botId: string, status: Bot['status']): Promise<Bot | null>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 5,
      "similarityScore": 0.8883203559510567,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 213,
          "endLine": 215,
          "className": "BotService",
          "signature": "if (existingBot.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 223,
          "endLine": 225,
          "className": "BotService",
          "signature": "if (apiKeyCheck.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 306,
          "endLine": 308,
          "className": "BotService",
          "signature": "if (nameCheck.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\dynamic-strategy-loader.ts",
          "startLine": 332,
          "endLine": 334,
          "className": "DynamicStrategyLoader",
          "signature": "if (!versions || versions.length < 2)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\dynamic-strategy-loader.ts",
          "startLine": 340,
          "endLine": 342,
          "className": "DynamicStrategyLoader",
          "signature": "if (sortedVersions.length === 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8705882352941177,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 315,
          "endLine": 319,
          "className": "BotService",
          "signature": "if (updates.name !== undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 321,
          "endLine": 325,
          "className": "BotService",
          "signature": "if (updates.description !== undefined)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.875,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 327,
          "endLine": 331,
          "className": "BotService",
          "signature": "if (updates.configuration !== undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 333,
          "endLine": 337,
          "className": "BotService",
          "signature": "if (updates.riskManagement !== undefined)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 8,
      "similarityScore": 0.830844155844156,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\bots.service.ts",
          "startLine": 386,
          "endLine": 388,
          "className": "BotService",
          "signature": "if (!bot)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\error-recovery-manager.ts",
          "startLine": 375,
          "endLine": 377,
          "className": "ErrorRecoveryManager",
          "signature": "if (attempt.attemptNumber > this.config.maxRetries)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\error-recovery-manager.ts",
          "startLine": 403,
          "endLine": 405,
          "className": "ErrorRecoveryManager",
          "signature": "if (!this.config.enableFallbackMode)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\error-recovery-manager.ts",
          "startLine": 608,
          "endLine": 610,
          "className": "CircuitBreaker",
          "signature": "if (this.state === 'CLOSED')"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands-indicator.ts",
          "startLine": 179,
          "endLine": 181,
          "className": "BollingerBandsIndicator",
          "signature": "if (currentBandwidth === undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\risk-management.service.ts",
          "startLine": 12,
          "endLine": 14,
          "className": "RiskManagementService",
          "signature": "if (order.amount > config.maxPositionSize)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\TradingActivityMonitor.tsx",
          "startLine": 150,
          "endLine": 152,
          "signature": "if (filters.botId && trade.botId !== filters.botId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\TradingActivityMonitor.tsx",
          "startLine": 155,
          "endLine": 157,
          "signature": "if (filters.symbol && trade.symbol !== filters.symbol)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9393939393939394,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\dynamic-strategy-loader.ts",
          "startLine": 114,
          "endLine": 116,
          "className": "DynamicStrategyLoader",
          "signature": "if (!this.initialized)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\strategies\\strategy-factory.ts",
          "startLine": 113,
          "endLine": 115,
          "className": "StrategyFactory",
          "signature": "if (!this.initialized)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8888888888888888,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\dynamic-strategy-loader.ts",
          "startLine": 126,
          "endLine": 131,
          "className": "DynamicStrategyLoader",
          "signature": "if (!validationResult.valid)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\dynamic-strategy-loader.ts",
          "startLine": 228,
          "endLine": 233,
          "className": "DynamicStrategyLoader",
          "signature": "if (!validationResult.valid)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-translator.ts",
          "startLine": 260,
          "endLine": 265,
          "className": "SignalTranslator",
          "signature": "if (!strategyResult.success)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8629441624365483,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\dynamic-strategy-loader.ts",
          "startLine": 238,
          "endLine": 248,
          "className": "DynamicStrategyLoader",
          "signature": "if (options.preserveState && currentStrategy)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\dynamic-strategy-loader.ts",
          "startLine": 258,
          "endLine": 268,
          "className": "DynamicStrategyLoader",
          "signature": "if (currentStrategy)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8620689655172413,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\dynamic-strategy-loader.ts",
          "startLine": 649,
          "endLine": 652,
          "className": "DynamicStrategyLoader",
          "signature": "if (this.performanceInterval)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\metrics-collector.service.ts",
          "startLine": 182,
          "endLine": 185,
          "className": "MetricsCollectorService",
          "signature": "if (this.persistenceInterval)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8651340996168582,
      "methods": [
        {
          "name": "info",
          "filePath": ".\\packages\\backend\\src\\bots\\error-recovery-manager.ts",
          "startLine": 20,
          "endLine": 22,
          "className": "LoggerWrapper",
          "signature": "info(message: string, meta?: any): void"
        },
        {
          "name": "warn",
          "filePath": ".\\packages\\backend\\src\\bots\\error-recovery-manager.ts",
          "startLine": 24,
          "endLine": 26,
          "className": "LoggerWrapper",
          "signature": "warn(message: string, meta?: any): void"
        },
        {
          "name": "error",
          "filePath": ".\\packages\\backend\\src\\bots\\error-recovery-manager.ts",
          "startLine": 28,
          "endLine": 30,
          "className": "LoggerWrapper",
          "signature": "error(message: string, meta?: any): void"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8685714285714285,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\graceful-shutdown-manager.ts",
          "startLine": 247,
          "endLine": 257,
          "className": "GracefulShutdownManager",
          "signature": "if (this.config.enableOrderCancellation)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\graceful-shutdown-manager.ts",
          "startLine": 260,
          "endLine": 270,
          "className": "GracefulShutdownManager",
          "signature": "if (this.config.enablePositionClosure)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9130434782608695,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\health-check.service.ts",
          "startLine": 288,
          "endLine": 291,
          "className": "HealthCheckService",
          "signature": "if (metrics.memory.percentage > 90)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\health-check.service.ts",
          "startLine": 296,
          "endLine": 299,
          "className": "HealthCheckService",
          "signature": "if (metrics.cpu.usage > 90)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\health-check.service.ts",
          "startLine": 304,
          "endLine": 307,
          "className": "HealthCheckService",
          "signature": "if (metrics.disk.percentage > 95)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9444444444444444,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\health-check.service.ts",
          "startLine": 494,
          "endLine": 496,
          "className": "HealthCheckService",
          "signature": "if (metrics.memory.percentage > 95 || metrics.cpu.usage > 95)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\exchange-monitor.service.ts",
          "startLine": 711,
          "endLine": 713,
          "className": "ExchangeMonitorService",
          "signature": "if (score >= 90)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8604651162790697,
      "methods": [
        {
          "name": "getHttpStatusCode",
          "filePath": ".\\packages\\backend\\src\\bots\\health-check.service.ts",
          "startLine": 579,
          "endLine": 592,
          "className": "HealthCheckService",
          "signature": "getHttpStatusCode(status: HealthStatus['status']): number"
        },
        {
          "name": "switch",
          "filePath": ".\\packages\\backend\\src\\bots\\health-check.service.ts",
          "startLine": 580,
          "endLine": 591,
          "className": "HealthCheckService",
          "signature": "switch (status)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8745098039215686,
      "methods": [
        {
          "name": "livenessHandler",
          "filePath": ".\\packages\\backend\\src\\bots\\health-check.service.ts",
          "startLine": 548,
          "endLine": 559,
          "className": "HealthCheckService",
          "signature": "async (req: Request, res: Response): Promise<void> =>"
        },
        {
          "name": "readinessHandler",
          "filePath": ".\\packages\\backend\\src\\bots\\health-check.service.ts",
          "startLine": 561,
          "endLine": 573,
          "className": "HealthCheckService",
          "signature": "async (req: Request, res: Response): Promise<void> =>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8721804511278195,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\signal-processor.ts",
          "startLine": 107,
          "endLine": 115,
          "className": "SignalProcessor",
          "signature": "if (!basicValidation.valid)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\signal-processor.ts",
          "startLine": 119,
          "endLine": 127,
          "className": "SignalProcessor",
          "signature": "if (!rateLimitCheck.allowed)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 6,
      "similarityScore": 0.9069767441860465,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\signal-processor.ts",
          "startLine": 229,
          "endLine": 231,
          "className": "SignalProcessor",
          "signature": "if (!result.success)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\signal-processor.ts",
          "startLine": 240,
          "endLine": 245,
          "className": "SignalProcessor",
          "signature": "if (confidence < this.config.minConfidenceThreshold)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\signal-processor.ts",
          "startLine": 248,
          "endLine": 250,
          "className": "SignalProcessor",
          "signature": "if (!bot.configuration)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 431,
          "endLine": 436,
          "className": "TradeDecisionEngine",
          "signature": "if (!marketContext.marketHours)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 439,
          "endLine": 444,
          "className": "TradeDecisionEngine",
          "signature": "if (marketContext.spread > this.config.slippageTolerance)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 447,
          "endLine": 452,
          "className": "TradeDecisionEngine",
          "signature": "if (marketContext.liquidityScore < 0.3)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9078014184397163,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\signal-processor.ts",
          "startLine": 264,
          "endLine": 269,
          "className": "SignalProcessor",
          "signature": "if (signalsInLastMinute.length >= this.config.maxSignalsPerMinute)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 402,
          "endLine": 407,
          "className": "TradeDecisionEngine",
          "signature": "if (botPositions.length >= this.config.maxPositionsPerBot)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 412,
          "endLine": 417,
          "className": "TradeDecisionEngine",
          "signature": "if (existingPosition)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9049919484702094,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\signal-processor.ts",
          "startLine": 358,
          "endLine": 361,
          "className": "SignalProcessor",
          "signature": "if (marketContext.spread > 0.1)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\signal-processor.ts",
          "startLine": 364,
          "endLine": 367,
          "className": "SignalProcessor",
          "signature": "if (marketContext.liquidityScore < 0.5)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\signal-processor.ts",
          "startLine": 370,
          "endLine": 373,
          "className": "SignalProcessor",
          "signature": "if (marketContext.volatility > 0.05)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8793103448275862,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 188,
          "endLine": 190,
          "className": "StateManager",
          "signature": "if (this.config.enableCompression && stateData.length > 1024)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 246,
          "endLine": 248,
          "className": "StateManager",
          "signature": "if (row.compressed)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9090909090909091,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 259,
          "endLine": 264,
          "className": "StateManager",
          "signature": "if (this.config.enableIntegrityChecks)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 420,
          "endLine": 425,
          "className": "StateManager",
          "signature": "if (options.validateIntegrity && this.config.enableIntegrityChecks)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8571428571428572,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 489,
          "endLine": 491,
          "className": "StateManager",
          "signature": "if (!this.config.enableIncrementalUpdates)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\strategies\\strategy-factory.ts",
          "startLine": 89,
          "endLine": 91,
          "className": "StrategyFactory",
          "signature": "if (this.initialized)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8809523809523809,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 598,
          "endLine": 600,
          "className": "StateManager",
          "signature": "if (this.backupInterval)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-health.service.ts",
          "startLine": 640,
          "endLine": 642,
          "className": "SystemHealthService",
          "signature": "if (this.checkInterval)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8571428571428572,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\state-manager.ts",
          "startLine": 673,
          "endLine": 676,
          "className": "StateManager",
          "signature": "if (this.backupInterval)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-health.service.ts",
          "startLine": 688,
          "endLine": 691,
          "className": "SystemHealthService",
          "signature": "if (this.checkInterval)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9120879120879121,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\strategy-execution-integration.ts",
          "startLine": 218,
          "endLine": 225,
          "className": "StrategyExecutionIntegration",
          "signature": "if (this.isExecuting)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\strategy-execution-integration.ts",
          "startLine": 227,
          "endLine": 234,
          "className": "StrategyExecutionIntegration",
          "signature": "if (!this.currentStrategy)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9024390243902439,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\strategy-execution-integration.ts",
          "startLine": 493,
          "endLine": 495,
          "className": "StrategyExecutionIntegration",
          "signature": "if (!validation.valid)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\strategies\\plugin-manager.ts",
          "startLine": 171,
          "endLine": 173,
          "className": "StrategyPluginManager",
          "signature": "if (!configValidation.valid)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 4,
      "similarityScore": 0.8713591233057308,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 229,
          "endLine": 231,
          "className": "TradeDecisionEngine",
          "signature": "if (!decision.approved || !decision.modifiedSignal)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 114,
          "endLine": 116,
          "className": "ATRIndicator",
          "signature": "if (highs.length !== lows.length || highs.length !== closes.length)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\unified-signals.ts",
          "startLine": 70,
          "endLine": 72,
          "className": "SignalExecutionAdapter",
          "signature": "if (!signal)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\metrics-collector.service.ts",
          "startLine": 206,
          "endLine": 208,
          "className": "MetricsCollectorService",
          "signature": "if (!this.isRunning)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9347826086956522,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 532,
          "endLine": 537,
          "className": "TradeDecisionEngine",
          "signature": "if (estimatedCost > maxCost)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 540,
          "endLine": 545,
          "className": "TradeDecisionEngine",
          "signature": "if (processedSignal.riskAssessment.riskScore > 0.8)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8518518518518519,
      "methods": [
        {
          "name": "getActivePositions",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-decision-engine.ts",
          "startLine": 687,
          "endLine": 689,
          "className": "TradeDecisionEngine",
          "signature": "getActivePositions(): Position[]"
        },
        {
          "name": "getActiveOrders",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-executor.ts",
          "startLine": 648,
          "endLine": 650,
          "className": "TradeExecutor",
          "signature": "getActiveOrders(): OrderTracking[]"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 5,
      "similarityScore": 0.8544061302681991,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\bots\\trade-executor.ts",
          "startLine": 446,
          "endLine": 448,
          "className": "TradeExecutor",
          "signature": "if (request.amount > maxPositionSize)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\exchanges\\exchange-manager.ts",
          "startLine": 84,
          "endLine": 86,
          "className": "ExchangeManager",
          "signature": "if (!apiKey)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\indicator-interface.ts",
          "startLine": 222,
          "endLine": 224,
          "className": "BaseIndicator",
          "signature": "if (!validation.valid)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\strategies\\plugin-manager.ts",
          "startLine": 161,
          "endLine": 163,
          "className": "StrategyPluginManager",
          "signature": "if (!pluginInfo)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 369,
          "endLine": 371,
          "className": "ScriptExecutor",
          "signature": "if (!script)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 4,
      "similarityScore": 0.9086021505376345,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\database\\database.config.ts",
          "startLine": 70,
          "endLine": 73,
          "className": "DatabaseManager",
          "signature": "if (this.isConnected && this.pool)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\server.ts",
          "startLine": 430,
          "endLine": 433,
          "className": "JabbrServer",
          "signature": "if (this.isShuttingDown)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 60,
          "endLine": 63,
          "className": "BybitWebSocketClient",
          "signature": "if (this.ws && this.ws.readyState === WebSocket.OPEN)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-bridge.ts",
          "startLine": 39,
          "endLine": 42,
          "className": "WebSocketBridge",
          "signature": "if (this.isInitialized)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 6,
      "similarityScore": 0.8655598126862494,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\database\\database.config.ts",
          "startLine": 123,
          "endLine": 125,
          "className": "DatabaseManager",
          "signature": "if (!this.pool || !this.isConnected)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\exchanges\\exchange-manager.ts",
          "startLine": 96,
          "endLine": 98,
          "className": "ExchangeManager",
          "signature": "if (!isConnected)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\bot-trading-cycle-integration.ts",
          "startLine": 311,
          "endLine": 313,
          "className": "BotTradingCycleIntegration",
          "signature": "if (!this.isInitialized)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\unified-signals.ts",
          "startLine": 232,
          "endLine": 234,
          "className": "SignalExecutionAdapter",
          "signature": "if (!signal || typeof signal !== 'object')"
        },
        {
          "name": "create",
          "filePath": ".\\packages\\backend\\src\\users\\user.repository.ts",
          "startLine": 212,
          "endLine": 215,
          "className": "DatabaseUserRepository",
          "signature": "create(): Promise<InternalUser>"
        },
        {
          "name": "updateLastLogin",
          "filePath": ".\\packages\\backend\\src\\users\\user.repository.ts",
          "startLine": 227,
          "endLine": 230,
          "className": "DatabaseUserRepository",
          "signature": "updateLastLogin(): Promise<void>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8943977591036414,
      "methods": [
        {
          "name": "getConfig",
          "filePath": ".\\packages\\backend\\src\\database\\database.config.ts",
          "startLine": 226,
          "endLine": 230,
          "className": "DatabaseManager",
          "signature": "getConfig(): Omit<DatabaseConfig, 'DB_PASSWORD'>"
        },
        {
          "name": "getConfig",
          "filePath": ".\\packages\\backend\\src\\services\\encryption.service.ts",
          "startLine": 208,
          "endLine": 212,
          "className": "EncryptionService",
          "signature": "getConfig(): Omit<EncryptionConfig, 'ENCRYPTION_KEY'>"
        },
        {
          "name": "getConfig",
          "filePath": ".\\packages\\backend\\src\\services\\time-sync.service.ts",
          "startLine": 408,
          "endLine": 412,
          "className": "TimeSyncService",
          "signature": "getConfig(): Omit<TimeSyncConfig, 'NTP_SERVER'>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.868421052631579,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\database\\migration-runner.ts",
          "startLine": 172,
          "endLine": 175,
          "className": "MigrationRunner",
          "signature": "if (pendingMigrations.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\validate-documentation.ts",
          "startLine": 128,
          "endLine": 131,
          "className": "DocumentationValidator",
          "signature": "if (this.issues.length === 0 && this.warnings.length === 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9016393442622951,
      "methods": [
        {
          "name": "calculateChecksum",
          "filePath": ".\\packages\\backend\\src\\database\\migration-runner.ts",
          "startLine": 311,
          "endLine": 313,
          "className": "MigrationRunner",
          "signature": "calculateChecksum(content: string): string"
        },
        {
          "name": "hash",
          "filePath": ".\\packages\\backend\\src\\services\\encryption.service.ts",
          "startLine": 163,
          "endLine": 165,
          "className": "EncryptionService",
          "signature": "hash(data: string): string"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9090909090909091,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\exchanges\\base-exchange.ts",
          "startLine": 331,
          "endLine": 333,
          "className": "BaseExchange",
          "signature": "if (!orderRequest.side)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\exchanges\\base-exchange.ts",
          "startLine": 335,
          "endLine": 337,
          "className": "BaseExchange",
          "signature": "if (!orderRequest.type)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8571428571428572,
      "methods": [
        {
          "name": "createExchangeInstance",
          "filePath": ".\\packages\\backend\\src\\exchanges\\exchange-manager.ts",
          "startLine": 297,
          "endLine": 310,
          "className": "ExchangeManager",
          "signature": "createExchangeInstance(\r\n    exchange: Exchange,\r\n    apiKey: ExchangeApiKey,\r\n    isTestnet: boolean\r\n  ): BaseExchange"
        },
        {
          "name": "switch",
          "filePath": ".\\packages\\backend\\src\\exchanges\\exchange-manager.ts",
          "startLine": 302,
          "endLine": 313,
          "className": "ExchangeManager",
          "signature": "switch (exchange)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.96,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\exchanges\\exchange-manager.ts",
          "startLine": 411,
          "endLine": 413,
          "className": "ExchangeManager",
          "signature": "if (this.config.autoReconnect)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\exchanges\\exchange-manager.ts",
          "startLine": 426,
          "endLine": 428,
          "className": "ExchangeManager",
          "signature": "if (this.config.autoReconnect)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.868421052631579,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\bot-trading-cycle-integration.ts",
          "startLine": 556,
          "endLine": 558,
          "className": "BotTradingCycleIntegration",
          "signature": "if (strategyMetrics.errorCount > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 286,
          "endLine": 288,
          "className": "MonitoringService",
          "signature": "if (criticalExchanges > 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.85,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\bot-trading-cycle-integration.ts",
          "startLine": 566,
          "endLine": 568,
          "className": "BotTradingCycleIntegration",
          "signature": "if (!this.isRunning || strategyMetrics.errorCount > 0 || !signalHealth.healthy)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\scripts\\production-readiness-validation.ts",
          "startLine": 441,
          "endLine": 443,
          "className": "ProductionReadinessValidator",
          "signature": "if (failed === 0 && warnings <= 2)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9763779527559056,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 48,
          "endLine": 54,
          "className": "ATRIndicator",
          "signature": "constructor(parameters?: Record<string, unknown>)"
        },
        {
          "name": "constructor",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
          "startLine": 48,
          "endLine": 54,
          "className": "RSIIndicator",
          "signature": "constructor(parameters?: Record<string, unknown>)"
        },
        {
          "name": "constructor",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\sma-indicator.ts",
          "startLine": 52,
          "endLine": 59,
          "className": "SMAIndicator",
          "signature": "constructor(parameters?: Record<string, unknown>)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.889344262295082,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 88,
          "endLine": 100,
          "className": "ATRIndicator",
          "signature": "for (let i = 0; i < data.length; i += 3)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 90,
          "endLine": 99,
          "className": "ATRIndicator",
          "signature": "if (i + 2 < data.length)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 4,
      "similarityScore": 0.9477124183006537,
      "methods": [
        {
          "name": "clone",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\atr.ts",
          "startLine": 156,
          "endLine": 158,
          "className": "ATRIndicator",
          "signature": "clone(): IIndicator<number[]>"
        },
        {
          "name": "clone",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\ema-indicator.ts",
          "startLine": 145,
          "endLine": 147,
          "className": "EMAIndicator",
          "signature": "clone(): IIndicator<number[]>"
        },
        {
          "name": "clone",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
          "startLine": 121,
          "endLine": 123,
          "className": "RSIIndicator",
          "signature": "clone(): IIndicator<number[]>"
        },
        {
          "name": "clone",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\sma-indicator.ts",
          "startLine": 106,
          "endLine": 108,
          "className": "SMAIndicator",
          "signature": "clone(): IIndicator<number[]>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.862453531598513,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands-indicator.ts",
          "startLine": 15,
          "endLine": 69,
          "className": "BollingerBandsIndicator",
          "signature": "constructor(parameters: Record<string, unknown> = {})"
        },
        {
          "name": "constructor",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\macd-indicator.ts",
          "startLine": 15,
          "endLine": 68,
          "className": "MACDIndicator",
          "signature": "constructor(parameters: Record<string, unknown> = {})"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8823529411764706,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands-indicator.ts",
          "startLine": 117,
          "endLine": 119,
          "className": "BollingerBandsIndicator",
          "signature": "if (currentPrice < currentLower && prevPrice >= prevLower)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands-indicator.ts",
          "startLine": 122,
          "endLine": 124,
          "className": "BollingerBandsIndicator",
          "signature": "if (currentPrice > currentUpper && prevPrice <= prevUpper)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9027777777777778,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands-indicator.ts",
          "startLine": 200,
          "endLine": 202,
          "className": "BollingerBandsIndicator",
          "signature": "if (percentB.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\ema-indicator.ts",
          "startLine": 111,
          "endLine": 113,
          "className": "EMAIndicator",
          "signature": "if (validData.length === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\aether\\core.ts",
          "startLine": 288,
          "endLine": 290,
          "className": "AetherSignalGenerator",
          "signature": "if (componentValues.length === 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8636363636363636,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands-indicator.ts",
          "startLine": 230,
          "endLine": 232,
          "className": "BollingerBandsIndicator",
          "signature": "if (current === undefined || previous === undefined || current <= previous)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\TradingActivityMonitor.tsx",
          "startLine": 165,
          "endLine": 167,
          "signature": "if (filters.status && filters.status !== 'all' && trade.status !== filters.status)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8695652173913043,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\bollinger-bands.ts",
          "startLine": 91,
          "endLine": 94,
          "signature": "if (\r\n      price !== undefined && l !== undefined && pricePrev !== undefined && lPrev !== undefined &&\r\n      price < l && pricePrev >= lPrev\r\n    )"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\rsi.ts",
          "startLine": 169,
          "endLine": 171,
          "className": "instead",
          "signature": "if (rsi < oversoldLevel && rsiPrev >= oversoldLevel)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.975609756097561,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\indicator-interface.ts",
          "startLine": 185,
          "endLine": 188,
          "className": "BaseIndicator",
          "signature": "if (paramDef.type === 'boolean' && typeof value !== 'boolean')"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\indicator-interface.ts",
          "startLine": 190,
          "endLine": 193,
          "className": "BaseIndicator",
          "signature": "if (paramDef.type === 'string' && typeof value !== 'string')"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9411764705882353,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\macd-indicator.ts",
          "startLine": 116,
          "endLine": 118,
          "className": "MACDIndicator",
          "signature": "if (latestMacd > latestSignal && prevMacd <= prevSignal)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\macd-indicator.ts",
          "startLine": 121,
          "endLine": 123,
          "className": "MACDIndicator",
          "signature": "if (latestMacd < latestSignal && prevMacd >= prevSignal)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9211267605633803,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\macd.ts",
          "startLine": 83,
          "endLine": 101,
          "signature": "for (let i = 1; i < macd.length; i++)"
        },
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\moving-averages.ts",
          "startLine": 76,
          "endLine": 94,
          "signature": "for (let i = 1; i < fastMA.length; i++)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9011627906976745,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\moving-averages.ts",
          "startLine": 20,
          "endLine": 24,
          "signature": "for (let i = period - 1; i < prices.length; i++)"
        },
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\sma-indicator.ts",
          "startLine": 92,
          "endLine": 96,
          "className": "SMAIndicator",
          "signature": "for (let i = period - 1; i < validData.length; i++)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9615384615384616,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\moving-averages.ts",
          "startLine": 71,
          "endLine": 73,
          "signature": "if (fastMA.length !== slowMA.length)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\indicators\\standard-deviation.ts",
          "startLine": 14,
          "endLine": 16,
          "signature": "if (values.length < 2)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8817128817128816,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-processing-manager.ts",
          "startLine": 254,
          "endLine": 257,
          "className": "SignalProcessingManager",
          "signature": "if (result.success && result.signal)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-processing-manager.ts",
          "startLine": 297,
          "endLine": 300,
          "className": "SignalProcessingManager",
          "signature": "if (result.success && result.signal)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-processing-manager.ts",
          "startLine": 331,
          "endLine": 334,
          "className": "SignalProcessingManager",
          "signature": "if (result2.success && result2.signal)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 4,
      "similarityScore": 0.8695652173913043,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-processing-manager.ts",
          "startLine": 669,
          "endLine": 671,
          "className": "SignalProcessingManager",
          "signature": "if (!this.aetherGenerator && !this.targetReacher)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-processing-manager.ts",
          "startLine": 674,
          "endLine": 676,
          "className": "SignalProcessingManager",
          "signature": "if (!this.tradingEngine)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-processing-manager.ts",
          "startLine": 679,
          "endLine": 681,
          "className": "SignalProcessingManager",
          "signature": "if (this.stats.lastProcessed > 0 && now - this.stats.lastProcessed > 60000)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-processing-manager.ts",
          "startLine": 684,
          "endLine": 686,
          "className": "SignalProcessingManager",
          "signature": "if (this.signalQueue.length > this.config.batchSize * 5)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9523809523809523,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-translator.ts",
          "startLine": 92,
          "endLine": 94,
          "className": "SignalTranslator",
          "signature": "if (aetherSignal.value > 0.2)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-translator.ts",
          "startLine": 176,
          "endLine": 178,
          "className": "SignalTranslator",
          "signature": "if (smaSignal.signal > 0.5)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9166666666666666,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-translator.ts",
          "startLine": 105,
          "endLine": 107,
          "className": "SignalTranslator",
          "signature": "if (aetherSignal.regime === MarketRegime.VOLATILE || aetherSignal.confidence < 0.4)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-translator.ts",
          "startLine": 189,
          "endLine": 191,
          "className": "SignalTranslator",
          "signature": "if (smaSignal.confidence >= 0.7 && strength >= 0.6)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signal-processing\\signal-translator.ts",
          "startLine": 296,
          "endLine": 298,
          "className": "SignalTranslator",
          "signature": "if (confidence > 0.8)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8613098514034122,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-crossover-strategy.ts",
          "startLine": 251,
          "endLine": 257,
          "className": "SMACrossoverStrategy",
          "signature": "if (data.fastPeriod < 5)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\signals\\sma\\sma-crossover-strategy.ts",
          "startLine": 266,
          "endLine": 272,
          "className": "SMACrossoverStrategy",
          "signature": "if (data.confidenceThreshold < 0.5)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\strategies\\target-reacher-strategy.ts",
          "startLine": 280,
          "endLine": 286,
          "className": "TargetReacherStrategy",
          "signature": "if (params.confidenceThreshold < 0.1 || params.confidenceThreshold > 1.0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9466666666666667,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\config-validator.ts",
          "startLine": 26,
          "endLine": 29,
          "className": "ConfigValidator",
          "signature": "if (obj[field] === undefined || obj[field] === null)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\config-validator.ts",
          "startLine": 50,
          "endLine": 53,
          "className": "ConfigValidator",
          "signature": "if (options.min !== undefined && value < options.min)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\config-validator.ts",
          "startLine": 54,
          "endLine": 57,
          "className": "ConfigValidator",
          "signature": "if (options.max !== undefined && value > options.max)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.859375,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\modular-target-reacher.ts",
          "startLine": 79,
          "endLine": 85,
          "className": "ModularTargetReacher",
          "signature": "if (!position || !targets.targetPrice)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\modular-target-reacher.ts",
          "startLine": 95,
          "endLine": 101,
          "className": "ModularTargetReacher",
          "signature": "if (targets.targetPrice && currentPrice >= targets.targetPrice)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9916874480465503,
      "methods": [
        {
          "name": "execute",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 29,
          "endLine": 59,
          "className": "ModularTargetReacherStrategy",
          "signature": "execute(): Promise<StrategyResult>"
        },
        {
          "name": "execute",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 122,
          "endLine": 152,
          "className": "TargetReacherStrategy",
          "signature": "execute(): Promise<StrategyResult>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9838709677419355,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 35,
          "endLine": 37,
          "className": "ModularTargetReacherStrategy",
          "signature": "if (priceSource === 'fixed')"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 128,
          "endLine": 130,
          "className": "TargetReacherStrategy",
          "signature": "if (priceSource === 'fixed')"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9705882352941176,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 51,
          "endLine": 57,
          "className": "ModularTargetReacherStrategy",
          "signature": "if (typeof targetPrice === 'number')"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 144,
          "endLine": 150,
          "className": "TargetReacherStrategy",
          "signature": "if (typeof targetPrice === 'number')"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9830508474576272,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 53,
          "endLine": 55,
          "className": "ModularTargetReacherStrategy",
          "signature": "if (currentPrice <= targetPrice)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 146,
          "endLine": 148,
          "className": "TargetReacherStrategy",
          "signature": "if (currentPrice <= targetPrice)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9864077669902913,
      "methods": [
        {
          "name": "validateConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 65,
          "endLine": 77,
          "className": "ModularTargetReacherStrategy",
          "signature": "validateConfig(config: Record<string, unknown>): ConfigValidationResult"
        },
        {
          "name": "validateConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 158,
          "endLine": 170,
          "className": "TargetReacherStrategy",
          "signature": "validateConfig(config: Record<string, unknown>): ConfigValidationResult"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9714285714285714,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 71,
          "endLine": 73,
          "className": "ModularTargetReacherStrategy",
          "signature": "if (params.priceSource === 'fixed')"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 164,
          "endLine": 166,
          "className": "TargetReacherStrategy",
          "signature": "if (params.priceSource === 'fixed')"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9826086956521739,
      "methods": [
        {
          "name": "getDefaultConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 79,
          "endLine": 90,
          "className": "ModularTargetReacherStrategy",
          "signature": "getDefaultConfig(): StrategyConfig"
        },
        {
          "name": "getDefaultConfig",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 172,
          "endLine": 183,
          "className": "TargetReacherStrategy",
          "signature": "getDefaultConfig(): StrategyConfig"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8661417322834646,
      "methods": [
        {
          "name": "getState",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 92,
          "endLine": 101,
          "className": "ModularTargetReacherStrategy",
          "signature": "getState(): StrategyState"
        },
        {
          "name": "getState",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\target-reacher\\target-reacher.ts",
          "startLine": 187,
          "endLine": 195,
          "className": "TargetReacherStrategy",
          "signature": "getState(): StrategyState"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8518518518518519,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\unified-signals.ts",
          "startLine": 229,
          "endLine": 231,
          "className": "SignalExecutionAdapter",
          "signature": "if (!botId || typeof botId !== 'string')"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\JabbrLabs\\unified-strategies.ts",
          "startLine": 101,
          "endLine": 103,
          "signature": "if (!botId || typeof botId !== 'string')"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.935064935064935,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\packages\\backend\\src\\middleware\\app-monitoring.middleware.ts",
          "startLine": 27,
          "endLine": 30,
          "className": "AppMonitoringMiddleware",
          "signature": "constructor()"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 499,
          "endLine": 501,
          "className": "MonitoringService",
          "signature": "if (this.config.enableApplicationMonitoring)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9263157894736842,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\logs.routes.ts",
          "startLine": 60,
          "endLine": 64,
          "signature": "if (startDate)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\logs.routes.ts",
          "startLine": 65,
          "endLine": 69,
          "signature": "if (endDate)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9220573313039067,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\logs.routes.ts",
          "startLine": 73,
          "endLine": 77,
          "signature": "if (userId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\logs.routes.ts",
          "startLine": 80,
          "endLine": 84,
          "signature": "if (botId)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\logs.routes.ts",
          "startLine": 87,
          "endLine": 91,
          "signature": "if (tradeId)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9552238805970149,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\plugins.ts",
          "startLine": 136,
          "endLine": 142,
          "signature": "if (!req.file)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\routes\\plugins.ts",
          "startLine": 244,
          "endLine": 250,
          "signature": "if (!config)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8749363219561895,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\scripts\\bot-trading-cycle-validation.ts",
          "startLine": 268,
          "endLine": 277,
          "signature": "if (require.main === module)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\scripts\\performance-monitoring-validation.ts",
          "startLine": 356,
          "endLine": 365,
          "signature": "if (require.main === module)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\scripts\\signal-processing-validation.ts",
          "startLine": 170,
          "endLine": 179,
          "signature": "if (require.main === module)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9222222222222223,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\scripts\\production-readiness-validation.ts",
          "startLine": 394,
          "endLine": 399,
          "className": "ProductionReadinessValidator",
          "signature": "if (failures.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\scripts\\production-readiness-validation.ts",
          "startLine": 401,
          "endLine": 406,
          "className": "ProductionReadinessValidator",
          "signature": "if (warnings.length > 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.858974358974359,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\scripts\\production-readiness-validation.ts",
          "startLine": 506,
          "endLine": 511,
          "className": "ProductionReadinessValidator",
          "signature": "if (require.main === module)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 781,
          "endLine": 786,
          "className": "OrchestratorCLI",
          "signature": "if (require.main === module)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8923076923076922,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\server.ts",
          "startLine": 461,
          "endLine": 464,
          "className": "JabbrServer",
          "signature": "if (this.strategyMonitorService)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\server.ts",
          "startLine": 476,
          "endLine": 479,
          "className": "JabbrServer",
          "signature": "if (this.databaseMonitorService)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\server.ts",
          "startLine": 482,
          "endLine": 485,
          "className": "JabbrServer",
          "signature": "if (this.exchangeMonitorService)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8518518518518517,
      "methods": [
        {
          "name": "getAllAlerts",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 286,
          "endLine": 288,
          "className": "AlertManagerService",
          "signature": "getAllAlerts(): Alert[]"
        },
        {
          "name": "findAll",
          "filePath": ".\\packages\\backend\\src\\users\\user.repository.ts",
          "startLine": 169,
          "endLine": 171,
          "className": "InMemoryUserRepository",
          "signature": "findAll(): Promise<InternalUser[]>"
        },
        {
          "name": "getAllScripts",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 247,
          "endLine": 249,
          "className": "ScriptRegistry",
          "signature": "getAllScripts(): ScriptConfig[]"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.875,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 581,
          "endLine": 583,
          "className": "AlertManagerService",
          "signature": "if (!rule || rule.escalationDelay <= 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\position-monitor.service.ts",
          "startLine": 41,
          "endLine": 44,
          "className": "PositionMonitorService",
          "signature": "if (!pos || pos.size === 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8617886178861789,
      "methods": [
        {
          "name": "getAlertIcon",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 597,
          "endLine": 605,
          "className": "AlertManagerService",
          "signature": "getAlertIcon(level: Alert['level']): string"
        },
        {
          "name": "switch",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 598,
          "endLine": 604,
          "className": "AlertManagerService",
          "signature": "switch (level)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9746835443037974,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\alert-manager.service.ts",
          "startLine": 730,
          "endLine": 733,
          "className": "AlertManagerService",
          "signature": "if (this.cleanupInterval)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\database-monitor.service.ts",
          "startLine": 181,
          "endLine": 184,
          "className": "DatabaseMonitorService",
          "signature": "if (this.cleanupInterval)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9482758620689655,
      "methods": [
        {
          "name": "getRecentRequests",
          "filePath": ".\\packages\\backend\\src\\services\\application-monitor.service.ts",
          "startLine": 516,
          "endLine": 519,
          "className": "ApplicationMonitorService",
          "signature": "getRecentRequests(duration: number): RequestLog[]"
        },
        {
          "name": "getRecentErrors",
          "filePath": ".\\packages\\backend\\src\\services\\application-monitor.service.ts",
          "startLine": 524,
          "endLine": 527,
          "className": "ApplicationMonitorService",
          "signature": "getRecentErrors(duration: number): ErrorLog[]"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8700069740037996,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\application-monitor.service.ts",
          "startLine": 574,
          "endLine": 583,
          "className": "ApplicationMonitorService",
          "signature": "if (avgResponseTime >= this.config.alertThresholds.responseTime.critical)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\application-monitor.service.ts",
          "startLine": 596,
          "endLine": 605,
          "className": "ApplicationMonitorService",
          "signature": "if (errorRate >= this.config.alertThresholds.errorRate.critical)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\application-monitor.service.ts",
          "startLine": 640,
          "endLine": 649,
          "className": "ApplicationMonitorService",
          "signature": "if (dbQueryTime >= this.config.alertThresholds.databaseQueryTime.critical)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.875,
      "methods": [
        {
          "name": "shutdown",
          "filePath": ".\\packages\\backend\\src\\services\\application-monitor.service.ts",
          "startLine": 768,
          "endLine": 773,
          "className": "ApplicationMonitorService",
          "signature": "shutdown(): void"
        },
        {
          "name": "shutdown",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 482,
          "endLine": 487,
          "className": "SystemMonitorService",
          "signature": "shutdown(): void"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9077060931899642,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\database-monitor.service.ts",
          "startLine": 577,
          "endLine": 580,
          "className": "DatabaseMonitorService",
          "signature": "if (performance.cacheHitRatio < this.config.performanceThresholds.lowCacheHitRatio)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\database-monitor.service.ts",
          "startLine": 581,
          "endLine": 584,
          "className": "DatabaseMonitorService",
          "signature": "if (performance.lockWaitTime > this.config.performanceThresholds.highLockWaitMs)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\database-monitor.service.ts",
          "startLine": 589,
          "endLine": 592,
          "className": "DatabaseMonitorService",
          "signature": "if (slowQueries.length > 5)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9103181772558466,
      "methods": [
        {
          "name": "encryptApiKey",
          "filePath": ".\\packages\\backend\\src\\services\\encryption.service.ts",
          "startLine": 96,
          "endLine": 99,
          "className": "EncryptionService",
          "signature": "encryptApiKey(apiKey: string): string"
        },
        {
          "name": "encryptApiSecret",
          "filePath": ".\\packages\\backend\\src\\services\\encryption.service.ts",
          "startLine": 116,
          "endLine": 119,
          "className": "EncryptionService",
          "signature": "encryptApiSecret(apiSecret: string): string"
        },
        {
          "name": "encryptPassphrase",
          "filePath": ".\\packages\\backend\\src\\services\\encryption.service.ts",
          "startLine": 136,
          "endLine": 139,
          "className": "EncryptionService",
          "signature": "encryptPassphrase(passphrase: string): string"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9504678117581343,
      "methods": [
        {
          "name": "decryptApiKey",
          "filePath": ".\\packages\\backend\\src\\services\\encryption.service.ts",
          "startLine": 104,
          "endLine": 111,
          "className": "EncryptionService",
          "signature": "decryptApiKey(encryptedApiKey: string): string"
        },
        {
          "name": "decryptApiSecret",
          "filePath": ".\\packages\\backend\\src\\services\\encryption.service.ts",
          "startLine": 124,
          "endLine": 131,
          "className": "EncryptionService",
          "signature": "decryptApiSecret(encryptedApiSecret: string): string"
        },
        {
          "name": "decryptPassphrase",
          "filePath": ".\\packages\\backend\\src\\services\\encryption.service.ts",
          "startLine": 144,
          "endLine": 151,
          "className": "EncryptionService",
          "signature": "decryptPassphrase(encryptedPassphrase: string): string"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9166666666666666,
      "methods": [
        {
          "name": "getApiRequestHistory",
          "filePath": ".\\packages\\backend\\src\\services\\exchange-monitor.service.ts",
          "startLine": 341,
          "endLine": 344,
          "className": "ExchangeMonitorService",
          "signature": "getApiRequestHistory(\r\n    exchangeName: string,\r\n    limit = 100\r\n  ): ApiRequestMetric[]"
        },
        {
          "name": "getOrderHistory",
          "filePath": ".\\packages\\backend\\src\\services\\exchange-monitor.service.ts",
          "startLine": 352,
          "endLine": 355,
          "className": "ExchangeMonitorService",
          "signature": "getOrderHistory(\r\n    exchangeName: string,\r\n    limit = 100\r\n  ): OrderExecutionMetric[]"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9545454545454546,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\exchange-monitor.service.ts",
          "startLine": 622,
          "endLine": 624,
          "className": "ExchangeMonitorService",
          "signature": "if (request.duration && request.duration > this.config.thresholds.slowRequestMs)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\exchange-monitor.service.ts",
          "startLine": 627,
          "endLine": 629,
          "className": "ExchangeMonitorService",
          "signature": "if (!request.success)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 4,
      "similarityScore": 0.8652534113060429,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\exchange-monitor.service.ts",
          "startLine": 675,
          "endLine": 678,
          "className": "ExchangeMonitorService",
          "signature": "if (metrics.api.errorRate > this.config.thresholds.highErrorRate)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\exchange-monitor.service.ts",
          "startLine": 679,
          "endLine": 682,
          "className": "ExchangeMonitorService",
          "signature": "if (metrics.api.averageResponseTime > this.config.thresholds.slowRequestMs)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\exchange-monitor.service.ts",
          "startLine": 686,
          "endLine": 689,
          "className": "ExchangeMonitorService",
          "signature": "if (metrics.rateLimits.utilizationPercentage > this.config.thresholds.rateLimitCritical)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\exchange-monitor.service.ts",
          "startLine": 704,
          "endLine": 707,
          "className": "ExchangeMonitorService",
          "signature": "if (metrics.trading.orderFillRate < 95 && metrics.trading.completedOrders > 10)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9615384615384616,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\health-check.service.ts",
          "startLine": 378,
          "endLine": 380,
          "className": "HealthCheckService",
          "signature": "if (appMetrics.performance.responseTime.average > 2000)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\health-check.service.ts",
          "startLine": 383,
          "endLine": 385,
          "className": "HealthCheckService",
          "signature": "if (appMetrics.database.averageQueryTime > 1000)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8900634249471459,
      "methods": [
        {
          "name": "aggregateValues",
          "filePath": ".\\packages\\backend\\src\\services\\metrics-collector.service.ts",
          "startLine": 714,
          "endLine": 733,
          "className": "MetricsCollectorService",
          "signature": "aggregateValues(values: MetricValue[], method: string): number"
        },
        {
          "name": "switch",
          "filePath": ".\\packages\\backend\\src\\services\\metrics-collector.service.ts",
          "startLine": 716,
          "endLine": 731,
          "className": "MetricsCollectorService",
          "signature": "switch (method)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9853479853479854,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\metrics-collector.service.ts",
          "startLine": 757,
          "endLine": 765,
          "className": "MetricsCollectorService",
          "signature": "if (bucketValues.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\metrics-collector.service.ts",
          "startLine": 774,
          "endLine": 782,
          "className": "MetricsCollectorService",
          "signature": "if (bucketValues.length > 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8883928571428571,
      "methods": [
        {
          "name": "createAlert",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 380,
          "endLine": 392,
          "className": "MonitoringService",
          "signature": "createAlert(\r\n    type: string,\r\n    severity: 'low' | 'medium' | 'high' | 'critical',\r\n    message: string,\r\n    source?: string,\r\n    metadata?: any\r\n  ): void"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 387,
          "endLine": 397,
          "className": "MonitoringService",
          "signature": "if (this.alertManager)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.970873786407767,
      "methods": [
        {
          "name": "addExchange",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 403,
          "endLine": 408,
          "className": "MonitoringService",
          "signature": "addExchange(exchangeName: string): void"
        },
        {
          "name": "removeExchange",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 413,
          "endLine": 418,
          "className": "MonitoringService",
          "signature": "removeExchange(exchangeName: string): void"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.96,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 404,
          "endLine": 407,
          "className": "MonitoringService",
          "signature": "if (this.exchangeMonitor)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 414,
          "endLine": 417,
          "className": "MonitoringService",
          "signature": "if (this.exchangeMonitor)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8564102564102565,
      "methods": [
        {
          "name": "recordOrderExecution",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 452,
          "endLine": 468,
          "className": "MonitoringService",
          "signature": "recordOrderExecution(\r\n    exchangeName: string,\r\n    orderId: string,\r\n    symbol: string,\r\n    side: 'buy' | 'sell',\r\n    type: 'market' | 'limit' | 'stop',\r\n    quantity: number,\r\n    price: number | undefined,\r\n    executedPrice: number | undefined,\r\n    executedQuantity: number | undefined,\r\n    executionTime: number,\r\n    status: 'filled' | 'partial' | 'failed' | 'cancelled'\r\n  ): void"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 465,
          "endLine": 479,
          "className": "MonitoringService",
          "signature": "if (this.exchangeMonitor)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9020979020979021,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 503,
          "endLine": 507,
          "className": "MonitoringService",
          "signature": "if (this.config.enableDatabaseMonitoring)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 509,
          "endLine": 513,
          "className": "MonitoringService",
          "signature": "if (this.config.enableExchangeMonitoring)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9166666666666666,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 530,
          "endLine": 532,
          "className": "MonitoringService",
          "signature": "if (this.systemMonitor)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 566,
          "endLine": 568,
          "className": "MonitoringService",
          "signature": "if (this.systemMonitor)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.926829268292683,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 534,
          "endLine": 536,
          "className": "MonitoringService",
          "signature": "if (this.applicationMonitor)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 562,
          "endLine": 564,
          "className": "MonitoringService",
          "signature": "if (this.applicationMonitor)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9210526315789473,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 538,
          "endLine": 540,
          "className": "MonitoringService",
          "signature": "if (this.databaseMonitor)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 558,
          "endLine": 560,
          "className": "MonitoringService",
          "signature": "if (this.databaseMonitor)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8529411764705882,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 542,
          "endLine": 544,
          "className": "MonitoringService",
          "signature": "if (this.healthCheck)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 555,
          "endLine": 557,
          "className": "MonitoringService",
          "signature": "if (this.healthCheck)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8757062146892656,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 614,
          "endLine": 638,
          "className": "MonitoringService",
          "signature": "if (this.applicationMonitor && this.alertManager)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\monitoring.service.ts",
          "startLine": 641,
          "endLine": 665,
          "className": "MonitoringService",
          "signature": "if (this.databaseMonitor && this.alertManager)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9268774703557313,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\strategy-monitor.service.ts",
          "startLine": 415,
          "endLine": 417,
          "className": "StrategyMonitorService",
          "signature": "if (metrics.currentDrawdown > 20)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\strategy-monitor.service.ts",
          "startLine": 420,
          "endLine": 422,
          "className": "StrategyMonitorService",
          "signature": "if (metrics.dailyPnL < -1000)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\strategy-monitor.service.ts",
          "startLine": 425,
          "endLine": 427,
          "className": "StrategyMonitorService",
          "signature": "if (metrics.totalTrades > 10 && metrics.winRate < 30)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8951048951048951,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\strategy-monitor.service.ts",
          "startLine": 430,
          "endLine": 441,
          "className": "StrategyMonitorService",
          "signature": "if (alerts.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\strategy-monitor.service.ts",
          "startLine": 451,
          "endLine": 461,
          "className": "StrategyMonitorService",
          "signature": "if (metrics)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9127178515833361,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 376,
          "endLine": 385,
          "className": "SystemMonitorService",
          "signature": "if (metrics.cpu.usage >= this.config.alertThresholds.cpu.critical)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 397,
          "endLine": 406,
          "className": "SystemMonitorService",
          "signature": "if (metrics.memory.percentage >= this.config.alertThresholds.memory.critical)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\system-monitor.service.ts",
          "startLine": 418,
          "endLine": 427,
          "className": "SystemMonitorService",
          "signature": "if (metrics.disk.percentage >= this.config.alertThresholds.disk.critical)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8611111111111112,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\services\\time-sync.service.ts",
          "startLine": 136,
          "endLine": 139,
          "className": "TimeSyncService",
          "signature": "if (this.ntpSyncInterval)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-time-sync.ts",
          "startLine": 88,
          "endLine": 91,
          "className": "BybitTimeSync",
          "signature": "if (this.syncInterval)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9175257731958762,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\strategies\\plugin-manager.ts",
          "startLine": 285,
          "endLine": 291,
          "className": "StrategyPluginManager",
          "signature": "if (!pluginInfo)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\strategies\\strategy-factory.ts",
          "startLine": 149,
          "endLine": 155,
          "className": "StrategyFactory",
          "signature": "if (!factory)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8709677419354839,
      "methods": [
        {
          "name": "validateConfig",
          "filePath": ".\\packages\\backend\\src\\strategies\\strategy-factory.ts",
          "startLine": 44,
          "endLine": 47,
          "signature": "validateConfig(config: Record<string, unknown>): ConfigValidationResult"
        },
        {
          "name": "validateConfig",
          "filePath": ".\\packages\\backend\\src\\strategies\\strategy-factory.ts",
          "startLine": 61,
          "endLine": 64,
          "signature": "validateConfig(config: Record<string, unknown>): ConfigValidationResult"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8651685393258427,
      "methods": [
        {
          "name": "getDefaultConfig",
          "filePath": ".\\packages\\backend\\src\\strategies\\strategy-factory.ts",
          "startLine": 49,
          "endLine": 52,
          "signature": "getDefaultConfig(): StrategyConfig"
        },
        {
          "name": "getDefaultConfig",
          "filePath": ".\\packages\\backend\\src\\strategies\\strategy-factory.ts",
          "startLine": 66,
          "endLine": 69,
          "signature": "getDefaultConfig(): StrategyConfig"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9322033898305084,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\strategies\\target-reacher-strategy.ts",
          "startLine": 250,
          "endLine": 256,
          "className": "TargetReacherStrategy",
          "signature": "if (typeof params.fixedPrice !== 'number' || params.fixedPrice <= 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\strategies\\target-reacher-strategy.ts",
          "startLine": 261,
          "endLine": 267,
          "className": "TargetReacherStrategy",
          "signature": "if (typeof params.averagePeriod !== 'number' || params.averagePeriod < 1 || params.averagePeriod > 500)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 4,
      "similarityScore": 0.8892429017593534,
      "methods": [
        {
          "name": "findById",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 25,
          "endLine": 48,
          "className": "DatabaseUserRepository",
          "signature": "findById(id: string): Promise<InternalUser | null>"
        },
        {
          "name": "findByEmail",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 53,
          "endLine": 76,
          "className": "DatabaseUserRepository",
          "signature": "findByEmail(email: string): Promise<InternalUser | null>"
        },
        {
          "name": "verifyEmail",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 297,
          "endLine": 328,
          "className": "DatabaseUserRepository",
          "signature": "verifyEmail(token: string): Promise<InternalUser | null>"
        },
        {
          "name": "resetPassword",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 349,
          "endLine": 379,
          "className": "DatabaseUserRepository",
          "signature": "resetPassword(token: string, newPasswordHash: string): Promise<InternalUser | null>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.8502010495467865,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 152,
          "endLine": 155,
          "className": "DatabaseUserRepository",
          "signature": "if (userData.passwordHash !== undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 182,
          "endLine": 185,
          "className": "DatabaseUserRepository",
          "signature": "if (userData.lastLoginAt !== undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 187,
          "endLine": 190,
          "className": "DatabaseUserRepository",
          "signature": "if (userData.passwordResetToken !== undefined)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9012345679012346,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 172,
          "endLine": 175,
          "className": "DatabaseUserRepository",
          "signature": "if (userData.emailVerificationToken !== undefined)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 177,
          "endLine": 180,
          "className": "DatabaseUserRepository",
          "signature": "if (userData.emailVerificationExpiresAt !== undefined)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.870719160104987,
      "methods": [
        {
          "name": "delete",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 234,
          "endLine": 241,
          "className": "DatabaseUserRepository",
          "signature": "delete(id: string): Promise<boolean>"
        },
        {
          "name": "updatePassword",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 257,
          "endLine": 265,
          "className": "DatabaseUserRepository",
          "signature": "updatePassword(id: string, hashedPassword: string): Promise<boolean>"
        },
        {
          "name": "setEmailVerificationToken",
          "filePath": ".\\packages\\backend\\src\\users\\database-user.repository.ts",
          "startLine": 281,
          "endLine": 292,
          "className": "DatabaseUserRepository",
          "signature": "setEmailVerificationToken(id: string, token: string, expiresAt: Date): Promise<boolean>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9733333333333334,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 133,
          "endLine": 136,
          "className": "BybitWebSocketClient",
          "signature": "if (this.reconnectTimeout)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 437,
          "endLine": 440,
          "className": "BybitWebSocketClient",
          "signature": "if (this.reconnectTimeout)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8506375227686703,
      "methods": [
        {
          "name": "handleTradeData",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 373,
          "endLine": 387,
          "className": "BybitWebSocketClient",
          "signature": "handleTradeData(data: unknown, symbol: string, timestamp: Date): void"
        },
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 375,
          "endLine": 386,
          "className": "BybitWebSocketClient",
          "signature": "for (const trade of trades)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8621794871794872,
      "methods": [
        {
          "name": "handleOrderbookData",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 392,
          "endLine": 401,
          "className": "BybitWebSocketClient",
          "signature": "handleOrderbookData(data: unknown, symbol: string, timestamp: Date): void"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 393,
          "endLine": 400,
          "className": "BybitWebSocketClient",
          "signature": "if (typeof data === 'object' && data !== null)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8853146853146853,
      "methods": [
        {
          "name": "handleKlineData",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 406,
          "endLine": 422,
          "className": "BybitWebSocketClient",
          "signature": "handleKlineData(data: unknown, topicType: string, symbol: string, timestamp: Date): void"
        },
        {
          "name": "for",
          "filePath": ".\\packages\\backend\\src\\websocket\\bybit-websocket.client.ts",
          "startLine": 408,
          "endLine": 421,
          "className": "BybitWebSocketClient",
          "signature": "for (const kline of klines)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.96,
      "methods": [
        {
          "name": "handleClientSubscription",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-bridge.ts",
          "startLine": 377,
          "endLine": 382,
          "className": "WebSocketBridge",
          "signature": "handleClientSubscription(channel: string, symbol?: string, exchange = 'bybit'): Promise<void>"
        },
        {
          "name": "handleClientUnsubscription",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-bridge.ts",
          "startLine": 387,
          "endLine": 392,
          "className": "WebSocketBridge",
          "signature": "handleClientUnsubscription(channel: string, symbol?: string, exchange = 'bybit'): Promise<void>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9193548387096774,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-bridge.ts",
          "startLine": 378,
          "endLine": 380,
          "className": "WebSocketBridge",
          "signature": "if (channel === CONSTANTS.WS_CHANNELS.MARKET_DATA && symbol)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-bridge.ts",
          "startLine": 388,
          "endLine": 390,
          "className": "WebSocketBridge",
          "signature": "if (channel === CONSTANTS.WS_CHANNELS.MARKET_DATA && symbol)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8780487804878049,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-server.ts",
          "startLine": 77,
          "endLine": 80,
          "className": "JabbrWebSocketServer",
          "signature": "if (!token)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-server.ts",
          "startLine": 85,
          "endLine": 88,
          "className": "JabbrWebSocketServer",
          "signature": "if (!decoded)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9818181818181818,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-server.ts",
          "startLine": 263,
          "endLine": 268,
          "className": "JabbrWebSocketServer",
          "signature": "if (channelSessions)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-server.ts",
          "startLine": 336,
          "endLine": 341,
          "className": "JabbrWebSocketServer",
          "signature": "if (channelSessions)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9512195121951219,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-server.ts",
          "startLine": 265,
          "endLine": 267,
          "className": "JabbrWebSocketServer",
          "signature": "if (channelSessions.size === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-server.ts",
          "startLine": 338,
          "endLine": 340,
          "className": "JabbrWebSocketServer",
          "signature": "if (channelSessions.size === 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9539473684210527,
      "methods": [
        {
          "name": "handlePing",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-server.ts",
          "startLine": 287,
          "endLine": 295,
          "className": "JabbrWebSocketServer",
          "signature": "handlePing(sessionId: string): void"
        },
        {
          "name": "sendError",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-server.ts",
          "startLine": 391,
          "endLine": 400,
          "className": "JabbrWebSocketServer",
          "signature": "sendError(sessionId: string, error: string): void"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.875,
      "methods": [
        {
          "name": "handleServerError",
          "filePath": ".\\packages\\backend\\src\\websocket\\websocket-server.ts",
          "startLine": 368,
          "endLine": 370,
          "className": "JabbrWebSocketServer",
          "signature": "handleServerError(error: Error): void"
        },
        {
          "name": "onError",
          "filePath": ".\\packages\\frontend\\src\\contexts\\WebSocketContext.tsx",
          "startLine": 156,
          "endLine": 158,
          "signature": "onError: (error) => {"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9539473684210527,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\layout.ts",
          "startLine": 30,
          "endLine": 33,
          "signature": "if ('generateMetadata' in entry)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\.next\\types\\app\\layout.ts",
          "startLine": 36,
          "endLine": 39,
          "signature": "if ('generateViewport' in entry)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8947368421052632,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\app\\bots\\page.tsx",
          "startLine": 72,
          "endLine": 74,
          "signature": "if (filters.status && filters.status !== 'all')"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\app\\bots\\page.tsx",
          "startLine": 75,
          "endLine": 77,
          "signature": "if (filters.strategy && filters.strategy !== 'all')"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8787878787878788,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\app\\bots\\page.tsx",
          "startLine": 219,
          "endLine": 221,
          "signature": "if (!response.ok)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\app\\bots\\[id]\\edit\\page.tsx",
          "startLine": 74,
          "endLine": 76,
          "signature": "if (!response.ok)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9060402684563759,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\app\\bots\\page.tsx",
          "startLine": 233,
          "endLine": 243,
          "signature": "if (loading)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\app\\bots\\[id]\\edit\\page.tsx",
          "startLine": 144,
          "endLine": 154,
          "signature": "if (loading)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9130434782608696,
      "methods": [
        {
          "name": "onError",
          "filePath": ".\\packages\\frontend\\src\\app\\page.tsx",
          "startLine": 56,
          "endLine": 61,
          "signature": "onError: (error) => {"
        },
        {
          "name": "onClose",
          "filePath": ".\\packages\\frontend\\src\\app\\page.tsx",
          "startLine": 62,
          "endLine": 67,
          "signature": "onClose: (event) => {"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8873239436619719,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\AlertSystem.tsx",
          "startLine": 172,
          "endLine": 178,
          "signature": "if (response.ok)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\AlertSystem.tsx",
          "startLine": 195,
          "endLine": 201,
          "signature": "if (response.ok)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9117647058823529,
      "methods": [
        {
          "name": "onMessage",
          "filePath": ".\\packages\\frontend\\src\\components\\ConnectionStatus.tsx",
          "startLine": 35,
          "endLine": 38,
          "signature": "onMessage: (message) => {"
        },
        {
          "name": "onClose",
          "filePath": ".\\packages\\frontend\\src\\components\\ConnectionStatus.tsx",
          "startLine": 43,
          "endLine": 46,
          "signature": "onClose: (event) => {"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9537037037037037,
      "methods": [
        {
          "name": "render",
          "filePath": ".\\packages\\frontend\\src\\components\\ErrorBoundary.tsx",
          "startLine": 64,
          "endLine": 140,
          "className": "ErrorBoundary",
          "signature": "render()"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\components\\ErrorBoundary.tsx",
          "startLine": 66,
          "endLine": 138,
          "className": "ErrorBoundary",
          "signature": "if (this.state.hasError)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8636363636363636,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\config\\app.ts",
          "startLine": 53,
          "endLine": 55,
          "signature": "if (isProduction && !process.env.NEXT_PUBLIC_API_URL)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\config\\app.ts",
          "startLine": 56,
          "endLine": 58,
          "signature": "if (isProduction && !process.env.NEXT_PUBLIC_WS_URL)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8703703703703703,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\services\\api.ts",
          "startLine": 179,
          "endLine": 181,
          "className": "ApiService",
          "signature": "if (params?.limit)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\services\\api.ts",
          "startLine": 182,
          "endLine": 184,
          "className": "ApiService",
          "signature": "if (params?.offset)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8571428571428572,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\utils\\errorHandler.ts",
          "startLine": 35,
          "endLine": 37,
          "className": "ErrorHandler",
          "signature": "if (error instanceof ApiError)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\utils\\errorHandler.ts",
          "startLine": 38,
          "endLine": 40,
          "className": "ErrorHandler",
          "signature": "if (error instanceof Error)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9333333333333333,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\utils\\errorHandler.ts",
          "startLine": 51,
          "endLine": 53,
          "className": "ErrorHandler",
          "signature": "if (error instanceof ApiError)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\utils\\errorHandler.ts",
          "startLine": 54,
          "endLine": 56,
          "className": "ErrorHandler",
          "signature": "if (error instanceof Error)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.88268156424581,
      "methods": [
        {
          "name": "isNetworkError",
          "filePath": ".\\packages\\frontend\\src\\utils\\errorHandler.ts",
          "startLine": 65,
          "endLine": 75,
          "className": "ErrorHandler",
          "signature": "isNetworkError(error: unknown): boolean"
        },
        {
          "name": "shouldRetry",
          "filePath": ".\\packages\\frontend\\src\\utils\\errorHandler.ts",
          "startLine": 85,
          "endLine": 96,
          "className": "ErrorHandler",
          "signature": "shouldRetry(error: unknown): boolean"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.875,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\utils\\theme.ts",
          "startLine": 116,
          "endLine": 118,
          "signature": "if (value > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\packages\\frontend\\src\\utils\\theme.ts",
          "startLine": 119,
          "endLine": 121,
          "signature": "if (value < 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9310344827586207,
      "methods": [
        {
          "name": "runSecurityAnalysis",
          "filePath": ".\\scripts\\analysis\\analyze.ts",
          "startLine": 87,
          "endLine": 103,
          "className": "QualityAnalyzer",
          "signature": "runSecurityAnalysis(): Promise<AnalysisResult>"
        },
        {
          "name": "runDuplicationAnalysis",
          "filePath": ".\\scripts\\analysis\\analyze.ts",
          "startLine": 108,
          "endLine": 124,
          "className": "QualityAnalyzer",
          "signature": "runDuplicationAnalysis(): Promise<AnalysisResult>"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9186046511627907,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\analyze.ts",
          "startLine": 198,
          "endLine": 201,
          "className": "QualityAnalyzer",
          "signature": "if (require.main === module)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplication-analyzer.ts",
          "startLine": 568,
          "endLine": 571,
          "className": "patterns",
          "signature": "if (require.main === module)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.972972972972973,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplicate-method-detector.ts",
          "startLine": 300,
          "endLine": 302,
          "className": "class",
          "signature": "if (processedFiles % 50 === 0)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 716,
          "endLine": 718,
          "className": "class",
          "signature": "if (processedFiles % 10 === 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9515246658103801,
      "methods": [
        {
          "name": "findTypeScriptFiles",
          "filePath": ".\\scripts\\analysis\\duplicate-method-detector.ts",
          "startLine": 315,
          "endLine": 343,
          "className": "class",
          "signature": "findTypeScriptFiles(rootPath: string): string[]"
        },
        {
          "name": "findDocumentationFiles",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 108,
          "endLine": 135,
          "className": "DocumentationScanner",
          "signature": "findDocumentationFiles(rootPath: string, options: DocValidationOptions): string[]"
        },
        {
          "name": "findCodeFiles",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 136,
          "endLine": 163,
          "className": "DocumentationScanner",
          "signature": "findCodeFiles(rootPath: string, options: DocValidationOptions): string[]"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9201831291736654,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\scripts\\analysis\\duplicate-method-detector.ts",
          "startLine": 322,
          "endLine": 335,
          "className": "class",
          "signature": "for (const entry of entries)"
        },
        {
          "name": "for",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 114,
          "endLine": 126,
          "className": "DocumentationScanner",
          "signature": "for (const entry of entries)"
        },
        {
          "name": "for",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 143,
          "endLine": 155,
          "className": "DocumentationScanner",
          "signature": "for (const entry of entries)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9,
      "methods": [
        {
          "name": "for",
          "filePath": ".\\scripts\\analysis\\duplicate-method-detector.ts",
          "startLine": 520,
          "endLine": 531,
          "className": "class",
          "signature": "for (const group of groups)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplicate-method-detector.ts",
          "startLine": 522,
          "endLine": 531,
          "className": "class",
          "signature": "if (group.methods.length > 1)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8508771929824561,
      "methods": [
        {
          "name": "generateReport",
          "filePath": ".\\scripts\\analysis\\duplicate-method-detector.ts",
          "startLine": 543,
          "endLine": 553,
          "className": "class",
          "signature": "generateReport(result: DetectionResult): void"
        },
        {
          "name": "generateReport",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 812,
          "endLine": 822,
          "className": "DocumentationReporter",
          "signature": "generateReport(report: ValidationReport): void"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9854014598540146,
      "methods": [
        {
          "name": "getSourceFiles",
          "filePath": ".\\scripts\\analysis\\duplication-analyzer.ts",
          "startLine": 85,
          "endLine": 113,
          "className": "DuplicationAnalyzer",
          "signature": "getSourceFiles(dir: string, extensions: string[] = ['.ts', '.tsx', '.js', '.jsx']): string[]"
        },
        {
          "name": "getSourceFiles",
          "filePath": ".\\scripts\\analysis\\manual-duplication-reviewer.ts",
          "startLine": 81,
          "endLine": 108,
          "className": "ManualDuplicationReviewer",
          "signature": "getSourceFiles(dir: string, extensions: string[] = ['.ts', '.tsx', '.js', '.jsx']): string[]"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9939024390243902,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplication-analyzer.ts",
          "startLine": 251,
          "endLine": 259,
          "className": "DuplicationAnalyzer",
          "signature": "if (normalized.length > 200)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplication-analyzer.ts",
          "startLine": 271,
          "endLine": 279,
          "className": "DuplicationAnalyzer",
          "signature": "if (normalized.length > 100)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.921875,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplication-analyzer.ts",
          "startLine": 405,
          "endLine": 408,
          "className": "DuplicationAnalyzer",
          "signature": "if (exactDuplicates.length > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\analysis\\duplication-analyzer.ts",
          "startLine": 416,
          "endLine": 419,
          "className": "patterns",
          "signature": "if (exactDuplicates.length === 0 && codeBlockDuplicates.length === 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9063297118564005,
      "methods": [
        {
          "name": "constructor",
          "filePath": ".\\scripts\\analysis\\manual-duplication-reviewer.ts",
          "startLine": 48,
          "endLine": 60,
          "className": "ManualDuplicationReviewer",
          "signature": "constructor()"
        },
        {
          "name": "constructor",
          "filePath": ".\\scripts\\monitoring\\post-implementation-validator.ts",
          "startLine": 50,
          "endLine": 61,
          "className": "PostImplementationValidator",
          "signature": "constructor()"
        },
        {
          "name": "constructor",
          "filePath": ".\\scripts\\utilities\\naming-validator.ts",
          "startLine": 55,
          "endLine": 66,
          "className": "NamingConventionValidator",
          "signature": "constructor()"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8617511520737327,
      "methods": [
        {
          "name": "loadAutomatedResults",
          "filePath": ".\\scripts\\analysis\\manual-duplication-reviewer.ts",
          "startLine": 66,
          "endLine": 76,
          "className": "ManualDuplicationReviewer",
          "signature": "loadAutomatedResults(): AutomatedResults | null"
        },
        {
          "name": "loadDuplicationResults",
          "filePath": ".\\scripts\\monitoring\\production-violations-analyzer.ts",
          "startLine": 400,
          "endLine": 410,
          "className": "ProductionViolationsAnalyzer",
          "signature": "loadDuplicationResults(): DuplicationResults | null"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8575163398692811,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 261,
          "endLine": 303,
          "className": "ValidationRules",
          "signature": "if (linkMatches)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 265,
          "endLine": 302,
          "className": "ValidationRules",
          "signature": "if (urlMatch)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 4,
      "similarityScore": 0.8768805124737327,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 290,
          "endLine": 300,
          "className": "ValidationRules",
          "signature": "if (!hasAnchor)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 332,
          "endLine": 341,
          "className": "ValidationRules",
          "signature": "if (!fileExists)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 458,
          "endLine": 467,
          "className": "references",
          "signature": "if (completed > total)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 496,
          "endLine": 505,
          "className": "references",
          "signature": "if (currentLevel > previousHeaderLevel + 1)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8876404494382022,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 590,
          "endLine": 598,
          "className": "references",
          "signature": "if (codeBlockCount % 2 !== 0)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\comprehensive-doc-validator.ts",
          "startLine": 661,
          "endLine": 669,
          "className": "references",
          "signature": "if (uniqueVersions.length > 1)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9166666666666666,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\production-violations-analyzer.ts",
          "startLine": 428,
          "endLine": 430,
          "className": "ProductionViolationsAnalyzer",
          "signature": "if (stats.CRITICAL > 0)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\monitoring\\production-violations-analyzer.ts",
          "startLine": 432,
          "endLine": 434,
          "className": "ProductionViolationsAnalyzer",
          "signature": "if (stats.HIGH > 0)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9734513274336283,
      "methods": [
        {
          "name": "getWorkflow",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 271,
          "endLine": 337,
          "className": "WorkflowManager",
          "signature": "getWorkflow(name: string): WorkflowStep[]"
        },
        {
          "name": "switch",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 273,
          "endLine": 337,
          "className": "WorkflowManager",
          "signature": "switch (name)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8695652173913043,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 378,
          "endLine": 380,
          "className": "ScriptExecutor",
          "signature": "if (script.estimatedDuration)"
        },
        {
          "name": "showHelp",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 574,
          "endLine": 621,
          "className": "OrchestratorCLI",
          "signature": "showHelp(): void"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.8620689655172413,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 450,
          "endLine": 452,
          "className": "ScriptExecutor",
          "signature": "if (result.success)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 672,
          "endLine": 674,
          "className": "OrchestratorCLI",
          "signature": "if (result.success)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 3,
      "similarityScore": 0.9301830566198382,
      "methods": [
        {
          "name": "if",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 454,
          "endLine": 456,
          "className": "ScriptExecutor",
          "signature": "if (result.error)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 495,
          "endLine": 497,
          "className": "ScriptExecutor",
          "signature": "if (result.error)"
        },
        {
          "name": "if",
          "filePath": ".\\scripts\\orchestrator.ts",
          "startLine": 714,
          "endLine": 716,
          "className": "OrchestratorCLI",
          "signature": "if (!step.success && step.error)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.912037037037037,
      "methods": [
        {
          "name": "generateSuggestion",
          "filePath": ".\\scripts\\utilities\\naming-validator.ts",
          "startLine": 437,
          "endLine": 453,
          "className": "definition",
          "signature": "generateSuggestion(name: string, rule: NamingRule): string"
        },
        {
          "name": "switch",
          "filePath": ".\\scripts\\utilities\\naming-validator.ts",
          "startLine": 438,
          "endLine": 452,
          "className": "definition",
          "signature": "switch (rule.id)"
        }
      ]
    },
    {
      "type": "similar",
      "methodCount": 2,
      "similarityScore": 0.9624060150375939,
      "methods": [
        {
          "name": "toCamelCase",
          "filePath": ".\\scripts\\utilities\\naming-validator.ts",
          "startLine": 458,
          "endLine": 462,
          "className": "definition",
          "signature": "toCamelCase(str: string): string"
        },
        {
          "name": "toPascalCase",
          "filePath": ".\\scripts\\utilities\\naming-validator.ts",
          "startLine": 467,
          "endLine": 471,
          "className": "definition",
          "signature": "toPascalCase(str: string): string"
        }
      ]
    }
  ]
}